{
    "DashboardDefinitionRoles": [],
    "Id": "831a9fff-78de-4c7a-9ef4-d35bf26f1ee4",
    "Name": "Workload",
    "Active": true,
    "Location": 1,
    "DocumentId": "00000000-0000-0000-0000-000000000000",
    "DocumentName": "",
    "DocumentTypeName": "jobtype",
    "DocumentsConfiguration": "[{\"entity\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"patch\":{\"endpoint\":\"\",\"model\":[{\"field\":\"\",\"caption\":\"\",\"type\":\"\"}]},\"remove\":{\"endpoint\":\"\"},\"lookup\":{\"endpoint\":\"\"},\"lookupById\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{},\"patch\":{}},\"customDocument\":{\"useCustomStyle\":false,\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemName\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"workspaces\":false},\"fields\":[]}]",
    "Templates": [],
    "DashboardDefinitionComponents": [
        {
            "Id": "46513fe4-3d14-4910-967a-1f713461f58d",	
            "Name": "creation",
            "Active": true,
            "UseQuery": false,
            "Query": "",
            "Size": 12,
            "Order": 0,
            "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"documentcreation\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":33,\"WidgetColumns\":48,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":true,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
            "DashboardComponentType": {
                "Id": "3c1da83b-efe9-4b70-87d0-c3813a512774",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            },
            "AnalyticsApiUrl": "",
            "Configuration": "{\"entity\":\"jobtype\",\"entityToCreate\":\"workload\",\"get\":{\"call\":\"function getCall(data, entityId){\\n    return 'job-types/' + entityId + '/job-type-workloads';\\n}\"},\"insert\":{\"call\":\"function postCall(data, entityId){\\n    return 'job-type-workloads';\\n}\",\"model\":\"function postModel(data, entityId){\\n    return {\\n        JobTypeId: entityId,\\n        DepartmentId: data.DepartmentId,\\n        TypologyId: data.TypologyId,\\n        TypologyGroupId: data.TypologyGroupId,\\n        Workload: data.Workload,\\n        DefaultRate: data.DefaultRate\\n    }\\n}\"},\"update\":{\"call\":\"function putCall(data, newData, entityId){\\n    return 'job-type-workloads/' + data.Id \\n}\",\"model\":\"function putModel(data, newData, entityId){\\n    return {\\n        DepartmentId: newData[\\\"DepartmentId\\\"] || data.DepartmentId,\\n        JobTypeId: newData[\\\"JobTypeId\\\"] || data.JobTypeId,\\n        TypologyId: newData[\\\"TypologyId\\\"] || data.TypologyId,\\n        TypologyGroupId: newData[\\\"TypologyGroupId\\\"] || data.TypologyGroupId,\\n        Workload: newData[\\\"Workload\\\"] == null ? data.Workload : newData[\\\"Workload\\\"],\\n        DefaultRate: newData[\\\"DefaultRate\\\"] == null ? data.DefaultRate : newData[\\\"DefaultRate\\\"]\\n    }\\n}\"},\"remove\":{\"call\":\"function removeCall(data, entityId){\\n    return 'job-type-workloads/' + data.Id; \\n}\"},\"grid\":{\"properties\":{\"height\":\"100%\",\"onEditorPreparing\":\"function(e) {        if (!e || e.parentType === 'filterRow') {                return;            }        const grid = e.component;        const editorBox = e.editorOptions;       const lookupColumns = ['DivisionId', 'DepartmentId', 'TypologyGroupId'            ];     if(e.parentType === 'dataRow' && lookupColumns.includes(e.dataField)){        editorBox.onInitialized = arg => {            window['SW'                    ].saveComponent(arg.component, e.dataField);                }            }    if (e.parentType === 'dataRow' && e.dataField === 'DivisionId') {                editorBox.onValueChanged = vcArg => { \\n                 const selectedItem = vcArg.component.option('selectedItem');       \\n  debugger;                   e.setValue(selectedItem);         \\n                 window['SW'                    ].saveComponent(vcArg.component, 'DivisionId');            e.row.data.DepartmentId =  null;              e.row.data.TypologyGroupId =  null;              grid.cellValue(e.row.rowIndex, 'DepartmentId', null);            grid.cellValue(e.row.rowIndex, 'TypologyGroupId', null);                };            }            if (e.parentType === 'dataRow' && e.dataField === 'DepartmentId') {                editorBox.onValueChanged = vcArg => { \\n                 const selectedItem = vcArg.component.option('selectedItem');       \\n                     e.setValue(selectedItem);         \\n                 window['SW'                    ].saveComponent(vcArg.component, 'DepartmentId');            e.row.data.TypologyGroupId =  null;              grid.cellValue(e.row.rowIndex, 'TypologyGroupId', null);                };            }            if (e.parentType === 'dataRow' && e.dataField === 'TypologyGroupId') {                editorBox.onValueChanged = vcArg => { \\n                 const selectedItem = vcArg.component.option('selectedItem');       \\n                     e.setValue(selectedItem);         \\n                 window['SW'                    ].saveComponent(vcArg.component, 'TypologyGroupId');                };            }        }\"}},\"columns\":\"function(e) {\\r\\n\\r\\n    let emptyGuid = '00000000-0000-0000-0000-000000000000';\\r\\n    function emptyGuidValue(key, callback){\\r\\n        if (key == emptyGuid || !key) {\\r\\n            return new Promise((resolve, reject) => resolve({\\r\\n                Id: emptyGuid,\\r\\n                Name: 'N/A',\\r\\n            }));\\r\\n        }\\r\\n        return callback()\\r\\n    };\\r\\n\\r\\n    return [\\r\\n        {\\r\\n            dataField: \\\"DivisionId\\\",\\r\\n            caption: \\\"Division\\\",\\r\\n            calculateDisplayValue: function(rowData){\\r\\n                if (!rowData.DivisionId || rowData.DivisionId === emptyGuid) {\\r\\n                    return \\\"\\\";\\r\\n                }\\r\\n                return rowData.DivisionName;\\r\\n            },\\r\\n            setCellValue: function(rowData, value) {\\r\\n                rowData.DivisionId = value.Id;\\r\\n                rowData.DivisionName = value.Name;\\r\\n            },\\r\\n            lookup: {\\r\\n                searchEnabled: true,\\r\\n                dataSource: {\\r\\n                    load: function (loadOptions) {\\r\\n                        var component = window[\\\"SW\\\"].getComponent('data');\\r\\n                        var searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : '');\\r\\n                        var skip = loadOptions.skip || 0;\\r\\n                        var take = loadOptions.take || 20;\\r\\n                        var params = { companyId: component.CompanyId, name: searchValue, skip, take };\\r\\n                        return window[\\\"SW\\\"].executeAPI('GET', `divisions/lookup`, params, {});\\r\\n                    },\\r\\n                    byKey: function (key) {\\r\\n                        return emptyGuidValue(key, () => window[\\\"SW\\\"].executeAPI('GET', `divisions/${key}/lookup`, null, {}));\\r\\n                    }\\r\\n                },\\r\\n                displayExpr: \\\"Name\\\",\\r\\n                valueExpr: \\\"Id\\\"\\r\\n            }\\r\\n        },\\r\\n        {\\r\\n            dataField: \\\"DepartmentId\\\",\\r\\n            caption: \\\"Department\\\",\\r\\n            calculateDisplayValue: function (rowData) {\\r\\n                if (!rowData.DepartmentId || rowData.DepartmentId === emptyGuid) {\\r\\n                    return \\\"\\\";\\r\\n                }\\r\\n                return rowData.DepartmentName;\\r\\n            },\\r\\n            setCellValue: function (rowData, value) {\\r\\n                if(!value){\\r\\n                    value = { Id: null, Name: '' }\\r\\n                }\\r\\n\\r\\n                rowData.DepartmentId = value.Id;\\r\\n                rowData.DepartmentName = value.Name;\\r\\n            },\\r\\n            lookup: {\\r\\n                searchEnabled: true,\\r\\n                dataSource: {\\r\\n                    load: function (loadOptions) {\\r\\n                        var component = window[\\\"SW\\\"].getComponent('data');\\r\\n                        var searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : '');\\r\\n                        var skip = loadOptions.skip || 0;\\r\\n                        var take = loadOptions.take || 20;\\r\\n                        const divisionId = window['SW'].getValueFromComponent(\\\"DivisionId\\\");\\r\\n                        var params = { companyId: component.CompanyId, divisionId, name: searchValue, skip, take };\\r\\n                        return window[\\\"SW\\\"].executeAPI('GET', `departments/lookup`, params, {});\\r\\n                    },\\r\\n                    byKey: function (key) {\\r\\n                        return emptyGuidValue(key, () => window[\\\"SW\\\"].executeAPI('GET', `departments/${key}`, null, {}))\\r\\n                    }\\r\\n                },\\r\\n                displayExpr: \\\"Name\\\",\\r\\n                valueExpr: \\\"Id\\\"\\r\\n            }\\r\\n        },\\r\\n        {\\r\\n            dataField: \\\"TypologyGroupId\\\",\\r\\n            caption: \\\"TypologyGroup\\\",\\r\\n            calculateDisplayValue: function (rowData) {\\r\\n                if (!rowData.TypologyGroupId || rowData.TypologyGroupId === emptyGuid) {\\r\\n                    return \\\"\\\";\\r\\n                }\\r\\n                return rowData.TypologyGroupName;\\r\\n            },\\r\\n            setCellValue: function (rowData, value) {\\r\\n                if (!value) {\\r\\n                    value = { Id: null, Name: '' }\\r\\n                }\\r\\n                rowData.TypologyGroupId = value.Id;\\r\\n                rowData.TypologyGroupName = value.Name;\\r\\n            },\\r\\n            lookup: {\\r\\n                searchEnabled: true,\\r\\n                dataSource: {\\r\\n                    load: function (loadOptions) {\\r\\n                        var component = window[\\\"SW\\\"].getComponent('data');\\r\\n                        var searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : '');\\r\\n                        var skip = loadOptions.skip || 0;\\r\\n                        var take = loadOptions.take || 20;\\r\\n                        const departmentId = window['SW'].getValueFromComponent(\\\"DepartmentId\\\");\\r\\n                        const companyId = component.CompanyId;\\r\\n                        var params = { verifyUserAccess: true, companyId, departmentId, name: searchValue, skip, take };\\r\\n                        return window[\\\"SW\\\"].executeAPI('GET', `userTypologyGroups`, params, {});\\r\\n                    },\\r\\n                    byKey: function (key) {\\r\\n                         return emptyGuidValue(key, () => window[\\\"SW\\\"].executeAPI('GET', `userTypologyGroups/${key}`, null, {}));\\r\\n                    }\\r\\n                },\\r\\n                displayExpr: \\\"Name\\\",\\r\\n                valueExpr: \\\"Id\\\"\\r\\n            }\\r\\n        },\\r\\n        {\\r\\n            dataField: \\\"Workload\\\",\\r\\n            editorType: \\\"dxNumberBox\\\"\\r\\n        },\\r\\n        {\\r\\n            dataField: \\\"DefaultRate\\\",\\r\\n            caption: \\\"Default Rate\\\",\\r\\n            editorType: \\\"dxNumberBox\\\",\\r\\n            editorOptions: {\\r\\n                format: \\\"$#0.00\\\"\\r\\n            }\\r\\n\\r\\n        }\\r\\n    ]\\r\\n}\"}",
            "DashboardDefinitionId": "831a9fff-78de-4c7a-9ef4-d35bf26f1ee4"
        }
    ],
    "QueryText": "",
    "UseStore": false,
    "StoreEntity": null,
    "Version": 3,
    "Default": true
}
