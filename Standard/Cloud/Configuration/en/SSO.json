{
  "DashboardDefinitionRoles": [],
  "Id": "15166990-3b37-45ed-bb52-7725b743d48c",
  "Name": "SSO",
  "Active": true,
  "Location": 2,
  "DocumentId": "00000000-0000-0000-0000-000000000000",
  "DocumentName": "",
  "DocumentTypeName": "sso",
  "DocumentsConfiguration": "{}",
  "Templates": [],
  "DashboardDefinitionComponents": [
    {
      "Id": "dafb0d9f-7d14-4614-95e3-2ffdbf974f15",
      "Name": "",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"form\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{\"padding\":\"5px\"},\"WidgetXPosition\":0,\"WidgetYPosition\":1,\"WidgetRows\":7,\"WidgetColumns\":19,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\n    \"items\": [\n        {\n            \"template\": \"<input type='file' id='fileUpload'/>\"\n        },\n        {\n            \"dataField\": \"Name\",\n            \"label\": {\n                \"text\": \"Name\"\n            },\n            \"validationRules\": [\n                {\n                    \"type\": \"required\",\n                    \"message\": \"Name is required\"\n                }\n            ]\n        },\n        {\n            \"dataField\": \"EntityId\",\n            \"label\": {\n                \"text\": \"Entity Id\"\n            },\n            \"validationRules\": [\n                {\n                    \"type\": \"required\",\n                    \"message\": \"Name is required\"\n                }\n            ]\n        },\n        {\n            \"dataField\": \"SingleSignOnServiceUrl\",\n            \"label\": {\n                \"text\": \"SSO Service Url\"\n            },\n            \"validationRules\": [\n                {\n                    \"type\": \"required\",\n                    \"message\": \"Name is required\"\n                }\n            ]\n        },\n        {\n            \"dataField\": \"X509Certificate\",\n            \"editorType\": \"dxTextArea\",\n            \"editorOptions\": {\n                \"height\": 100\n            },\n            \"label\": {\n                \"text\": \"Certificate\"\n            },\n            \"validationRules\": [\n                {\n                    \"type\": \"required\",\n                    \"message\": \"Name is required\"\n                }\n            ]\n        }\n    ],\n    \"onInitialized\": \"function(e) {\\n    SW.saveComponent(e, 'form');\\n    var e = e;\\n    debugger;\\n    var idPdata = { \\\"value\\\": 0 }\\n    SW.executeAPI('GET', 'identity-providers', null, null, false).then(value => {\\n        debugger;\\n        idPdata.value = 1;\\n        SW.saveComponent(idPdata, 'hasSsoData')\\n        setData(value, e);\\n    }, reject => {\\n        debugger;\\n        idPdata.value = 0;\\n        SW.saveComponent(idPdata, 'hasSsoData');\\n    });\\n\\n    function setData(value, e) {\\n        e.component.option('formData', value);\\n    }\\n}\"\n}",
      "DashboardDefinitionId": "15166990-3b37-45ed-bb52-7725b743d48c"
    },
    {
      "Id": "bc6c2932-5596-49c7-a32e-4b471fc54f69",
      "Name": "",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"button\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{\"padding\":\"5px\"},\"WidgetXPosition\":18,\"WidgetYPosition\":0,\"WidgetRows\":1,\"WidgetColumns\":1,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"{\\\"entities\\\":[],\\\"fields\\\":[]}\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\"icon\":\"save\",\"text\":\"\",\"onClick\":\"function(e) {\\n    var form = SW.getComponent('form');\\n    var formData = form.component.option('formData');\\n\\n    if (formData.hasOwnProperty('Name') && formData.hasOwnProperty('EntityId') && formData.hasOwnProperty('SingleSignOnServiceUrl') && formData.hasOwnProperty('X509Certificate')) {\\n    debugger;\\n        if (!formData.Name.trim().length == 0 && !formData.EntityId.trim().length == 0 && !formData.SingleSignOnServiceUrl.trim().length == 0 && !formData.X509Certificate.trim().length == 0) {\\n            var model = { \\\"Name\\\": formData.Name, \\\"EntityId\\\": formData.EntityId, \\\"SingleSignOnServiceUrl\\\": formData.SingleSignOnServiceUrl, \\\"X509Certificate\\\": formData.X509Certificate };\\n\\n            var hasSsoData = SW.getComponent('hasSsoData').value;\\n            debugger;\\n            if (formData && hasSsoData) {\\n                SW.executeAPI('PUT', 'identity-providers', null, model)\\n            }\\n            else if (formData && !hasSsoData) {\\n                SW.executeAPI('POST', 'identity-providers', null, model);\\n            }\\n\\n            SW.Toastr.toastr_Success('Metadata updated.');\\n        }\\n        else {\\n            SW.Toastr.toastr_Warning('<strong>Please complete the form.</strong></br> There are fields with empty values.')\\n        }\\n    }\\n    else {\\n        SW.Toastr.toastr_Warning('Please click to upload or fill in the form.')\\n    }\\n\\n}\"}",
      "DashboardDefinitionId": "15166990-3b37-45ed-bb52-7725b743d48c"
    },
    {
      "Id": "392ce12b-263d-4e59-9fc0-a3d6b9f65e21",
      "Name": "",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"button\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{\"padding\":\"5px\"},\"WidgetXPosition\":17,\"WidgetYPosition\":0,\"WidgetRows\":1,\"WidgetColumns\":1,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"{\\\"entities\\\":[],\\\"fields\\\":[]}\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\"icon\":\"upload\",\"text\":\"\",\"onClick\":\"function(e) {\\n    {\\n        if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {\\n            SW.Toastr.toastr_Error('The File APIs are not fully supported in this browser.');\\n            return;\\n        }\\n        var input = document.getElementById(\\\"fileUpload\\\");\\n        if (!input) {\\n            SW.Toastr.toastr_Error(\\\"Um, couldn't find the fileinput element.\\\");\\n        }\\n        else if (!input.files) {\\n            SW.Toastr.toastr_Error(\\\"This browser doesn't seem to support the `files` property of file inputs.\\\");\\n        }\\n        else if (!input.files[0]) {\\n            SW.Toastr.toastr_Warning(\\\"Please select a file to upload.\\\");\\n        }\\n        else {\\n\\n            var file = input.files[0];\\n            var fr = new FileReader();\\n\\n            if (file.type != 'text/xml') { return SW.Toastr.toastr_Error('The selected file is not a XML file.')}\\n            fr.onload = receivedText;\\n            fr.readAsText(file);\\n\\n        }\\n    }\\n    function receivedText(file) {\\n        var parser = new DOMParser();\\n        var xmlDoc = parser.parseFromString(fr.result, \\\"text/xml\\\");\\n        var dataJson = xmlToJson(xmlDoc);\\n                \\n        var form = SW.getComponent('form');\\n        \\n        var entityId = '';\\n        var ssoServiceUrl = '';\\n        var certificate = '';\\n\\n        if (xmlDoc.getElementsByTagName('md:EntityDescriptor').length > 0 && dataJson['md:EntityDescriptor']['md:IDPSSODescriptor']) {\\n            entityId = xmlDoc.getElementsByTagName('md:EntityDescriptor')[0].getAttribute('entityID');\\n            ssoServiceUrl = xmlDoc.getElementsByTagName('md:SingleSignOnService')[0].getAttribute('Location');\\n            certificate = dataJson['md:EntityDescriptor']['md:IDPSSODescriptor']['md:KeyDescriptor']['ds:KeyInfo']['ds:X509Data']['ds:X509Certificate']['#text'];\\n            \\n        }\\n        if (xmlDoc.getElementsByTagName('EntityDescriptor').length > 0 && dataJson.EntityDescriptor.IDPSSODescriptor) {\\n            entityId = xmlDoc.getElementsByTagName('EntityDescriptor')[0].getAttribute('entityID');\\n            ssoServiceUrl = xmlDoc.getElementsByTagName('SingleSignOnService')[0].getAttribute('Location');\\n            if (Array.isArray(dataJson.EntityDescriptor.IDPSSODescriptor.KeyDescriptor)){\\n                certificate = dataJson.EntityDescriptor.IDPSSODescriptor.KeyDescriptor.filter(x => { return x[\\\"@attributes\\\"].use == 'signing'; })[0].KeyInfo.X509Data.X509Certificate['#text'];\\n            }\\n            else\\n            {\\n                certificate = dataJson.EntityDescriptor.IDPSSODescriptor.KeyDescriptor.KeyInfo.X509Data.X509Certificate['#text'];\\n            }\\n        }\\n        \\n        var host = window.location.host;\\n        host = host.substring(0, host.indexOf('.')).toUpperCase() + ' SSO';\\n     \\n        var model = {\\\"Name\\\": host, \\\"EntityId\\\": entityId, \\\"SingleSignOnServiceUrl\\\": ssoServiceUrl, \\\"X509Certificate\\\": certificate};\\n\\n        var hasSsoData = SW.getComponent('hasSsoData').value;\\n\\n        if (form.component.option('formData').X509Certificate && hasSsoData) {\\n            SW.executeAPI('PUT', 'identity-providers', null, model)\\n        }\\n        else if (form.component.option('formData').X509Certificate && !hasSsoData) {\\n            SW.executeAPI('POST', 'identity-providers', null, model);\\n        }\\n        \\n        form.component.updateData('Name', host);\\n        form.component.updateData('EntityId', entityId);\\n        form.component.updateData('SingleSignOnServiceUrl', ssoServiceUrl);\\n        form.component.updateData('X509Certificate', certificate);\\n        \\n        SW.Toastr.toastr_Success('File uploaded.')\\n    }\\n\\n    function xmlToJson(xml) {\\n        var obj = {};\\n\\n        if (xml.nodeType == 1) { \\n            if (xml.attributes.length > 0) {\\n                obj[\\\"@attributes\\\"] = {};\\n                for (var j = 0; j < xml.attributes.length; j++) {\\n                    var attribute = xml.attributes.item(j);\\n                    obj[\\\"@attributes\\\"][attribute.nodeName] = attribute.nodeValue;\\n                }\\n            }\\n        } else if (xml.nodeType == 3) {\\n            obj = xml.nodeValue;\\n        }\\n\\n        if (xml.hasChildNodes()) {\\n            for (var i = 0; i < xml.childNodes.length; i++) {\\n                var item = xml.childNodes.item(i);\\n                var nodeName = item.nodeName;\\n                if (typeof (obj[nodeName]) == \\\"undefined\\\") {\\n                    obj[nodeName] = xmlToJson(item);\\n                } else {\\n                    if (typeof (obj[nodeName].push) == \\\"undefined\\\") {\\n                        var old = obj[nodeName];\\n                        obj[nodeName] = [];\\n                        obj[nodeName].push(old);\\n                    }\\n                    obj[nodeName].push(xmlToJson(item));\\n                }\\n            }\\n        }\\n        return obj;\\n    };\\n}\"}",
      "DashboardDefinitionId": "15166990-3b37-45ed-bb52-7725b743d48c"
    },
    {
      "Id": "05a6189b-bd1f-438f-842e-bb9bd925de43",
      "Name": "",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"button\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{\"padding\":\"5px\"},\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":1,\"WidgetColumns\":4,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"{\\\"entities\\\":[],\\\"fields\\\":[]}\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\"icon\":\"download\",\"text\":\"Metadata\",\"onClick\":\"function(e){window.open('https://auth-test.skillsworkflow.com/saml2/metadata');}\"}",
      "DashboardDefinitionId": "15166990-3b37-45ed-bb52-7725b743d48c"
    }
  ],
  "QueryText": "",
  "UseStore": false,
  "StoreEntity": null,
  "Version": 4,
  "Default": true
}
