{
  "DashboardDefinitionRoles": [],
  "Id": "e57330ce-544c-4d93-9345-d359068761f2",
  "Name": "Import Users",
  "Active": true,
  "Location": 1,
  "DocumentId": "00000000-0000-0000-0000-000000000000",
  "DocumentName": "",
  "DocumentTypeName": null,
  "DocumentsConfiguration": "[{\"entity\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"patch\":{\"endpoint\":\"\",\"model\":[{\"field\":\"\",\"caption\":\"\",\"type\":\"\"}]},\"remove\":{\"endpoint\":\"\"},\"lookup\":{\"endpoint\":\"\"},\"lookupById\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{},\"patch\":{}},\"customDocument\":{\"useCustomStyle\":false,\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemName\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"workspaces\":false},\"fields\":[]}]",
  "Templates": [],
  "DashboardDefinitionComponents": [
    {
      "Id": "71539bb6-633f-4d17-89ac-120263ea15b6",
      "Name": "",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"button\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":27,\"WidgetYPosition\":0,\"WidgetRows\":2,\"WidgetColumns\":3,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"{\\\"entities\\\":[],\\\"fields\\\":[]}\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "3c1da83b-efe9-4b70-87d0-c3813a512774",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\"icon\":\"fas fa-file-download\",\"text\":\"\",\"onClick\":\"function(e){\\n    var fileUpload = document.getElementById(\\\"fileUpload\\\");\\n    var grid = SW.getComponent('grid');\\n    var bla = SW.importExcelIntoGrid(fileUpload, grid);\\n}\",\"width\":\"100%\"}",
      "DashboardDefinitionId": "e57330ce-544c-4d93-9345-d359068761f2"
    },
    {
      "Id": "67a5e4a1-cb0c-4225-bdaa-13c8ef2a3e41",
      "Name": "Users",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"Users\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":2,\"WidgetRows\":22,\"WidgetColumns\":48,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "3c1da83b-efe9-4b70-87d0-c3813a512774",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\"stateStoring\":{\"enabled\":false},\"editing\":{\"allowUpdating\":\"true\",\"allowAdding\":\"true\",\"mode\":\"batch\",\"useIcons\":\"true\"},\"height\":\"100%\",\"onToolbarPreparing\":\"function(e) {\\n    var dataGrid = e.component; \\n    e.toolbarOptions.items.unshift({\\n        location: 'after',\\n        widget: 'dxButton',\\n        options: {\\n            icon: 'fal fa-download', \\n            onClick: async function (e) {\\n                dataGrid.option('disabled', true);\\n                var selectedUsers= dataGrid.getSelectedRowKeys();\\n                var p1 = MapCompanies(selectedUsers);\\n                var p2 = MapDivisions(selectedUsers);\\n                var p3 = MapDepartments(selectedUsers);\\n                var p4 = MapTypology(selectedUsers);\\n                var p5 = MapUserTypes(selectedUsers);\\n                var p6 = MapEmployees(selectedUsers);\\n                var p7 = MapWorkTypes(selectedUsers);\\n                await Promise.all([p1, p2, p3, p4, p5, p6, p7]);\\n                debugger;\\n                var allRequired = CheckAllRequired(selectedUsers);\\n                if(!allRequired){\\n                    dataGrid.option('disabled', false);\\n                    dataGrid.clearSelection();\\n                    return;\\n                }\\n                var postModel = {\\n                    OperationType: 2,\\n                    ImportModels: selectedUsers\\n                };\\n                SW.executeAPI('POST', 'v3/users', null, postModel)\\n                    .then(\\n                        x => {\\n                            dataGrid.option('disabled', false);\\n                            dataGrid.clearSelection();\\n                            SW.Toastr.toastr_Success(\\\"Done\\\");\\n                        }\\n                    )\\n                    .catch(\\n                        x => {\\n                            dataGrid.option('disabled', false);\\n                            SW.Toastr.toastr_Error(x);\\n                        }\\n                    );\\n            }, \\n            hint: 'Import selected users'\\n        }\\n    });\\n\\n    function MapCompanies(selectedUsers){\\n        return SW.executeAPI(\\\"GET\\\", \\\"companies/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var company = user.Company;\\n                if (dictionary[company]) {\\n                    user.CompanyId = dictionary[company];\\n                }\\n            });\\n        })\\n    }\\n\\n    function MapDivisions(selectedUsers) {\\n        return SW.executeAPI(\\\"GET\\\", \\\"divisions/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({[(x.CompanyName, x.Name)]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                if(!user.Division){\\n                    return;\\n                }\\n                var company = user.Company;\\n                var division = user.Division;\\n                if (dictionary[(company, division)]) {\\n                    user.DivisionId = dictionary[(company, division)];\\n                }\\n            });\\n        })\\n    }\\n\\n    function MapDepartments(selectedUsers) {\\n        return SW.executeAPI(\\\"GET\\\", \\\"departments/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [(x.CompanyName, x.Name)]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var company = user.CompanyName;\\n                var department = user.Department\\n                if (dictionary[(company, department)]) {\\n                    user.DepartmentId = dictionary[(company, department)];\\n                }\\n            });\\n            debugger;\\n        })\\n    }\\n\\n    function MapTypology(selectedUsers){\\n        return SW.executeAPI(\\\"GET\\\", \\\"userTypologies/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                debugger;\\n                var typology = user.Typology;\\n                if (dictionary[typology]) {\\n                    user.TypologyId = dictionary[typology];\\n                }\\n            });\\n            debugger;\\n        })\\n    }\\n\\n    function MapUserTypes(selectedUsers) {\\n        return SW.executeAPI(\\\"GET\\\", \\\"usertypes\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var userType = user.UserType;\\n                if (dictionary[userType]) {\\n                    user.UserTypeId = dictionary[userType];\\n                }\\n            });\\n        })\\n    }\\n\\n    function MapEmployees(selectedUsers) {\\n        return SW.executeAPI(\\\"GET\\\", \\\"employees/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var employee = user.Employee;\\n                if (dictionary[employee]) {\\n                    user.EmployeeId = dictionary[employee];\\n                }\\n            });\\n        })\\n    }\\n\\n    function MapWorkTypes(selectedUsers) {\\n        return SW.executeAPI(\\\"GET\\\", \\\"worktypes/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var worktype = user.TimesheetWorkType;\\n                if (dictionary[worktype]) {\\n                    user.TimesheetWorkTypeId = dictionary[worktype];\\n                }\\n            });\\n        })\\n    }\\n\\n    function CheckAllRequired(selectedUsers) {\\n        var problems = [];\\n        selectedUsers.forEach(user => {\\n            if (!user.UserName || user.UserName == \\\"\\\") {\\n                problems = [...problems, user.Name + ' - UserName is a required field and it was not found <br>'];\\n            }\\n            if (!user.CompanyId) {\\n                problems = [...problems, user.UserName + ' - Company is a required field and it was not found <br>'];\\n            }\\n            if (!user.DepartmentId) {\\n                problems = [...problems, user.UserName + ' - Department is a required field and it was not found <br>'];\\n            }\\n            if (!user.TypologyId) {\\n                problems = [...problems, user.UserName + ' - Typology is a required field and it was not found <br>'];\\n            }\\n            if(!user.IsActive){\\n                user.IsActive = false;\\n            }\\n        });\\n        if (problems.length > 0) {\\n            SW.Toastr.toastr_Error(problems.toString());\\n            return false;\\n        };\\n        return true;\\n    }\\n}\",\"onInitialized\":\"function(e) {\\n    SW.saveComponent(e.component, 'grid');\\n}\",\"onContentReady\":\"function(e) {\\n    SW.saveComponent(e.component, 'grid');\\n}\",\"dataSource\":{\"load\":\"function(data){\\n    debugger;\\n}\"},\"columns\":[{\"dataField\":\"UserName\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"Name\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"IsActive\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"Company\",\"lookup\":{\"dataSource\":{\"load\":\"function(e){return SW.executeAPI('GET', 'companies/lookup')}\",\"byKey\":\"function(key, bla){}\"},\"displayExpr\":\"Name\",\"valueExpr\":\"Name\"},\"width\":\"150\",\"alignment\":\"center\",\"editorOptions\":{\"acceptCustomValue\":false}},{\"dataField\":\"Division\",\"lookup\":{\"dataSource\":{\"load\":\"function(e){return SW.executeAPI('GET', 'divisions/lookup')}\",\"byKey\":\"function(e, e){}\"},\"displayExpr\":\"function(e){ return e.Name + ' ('+e.CompanyName+')' }\",\"valueExpr\":\"Name\"},\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"Department\",\"lookup\":{\"dataSource\":{\"load\":\"function(e){return SW.executeAPI('GET', 'departments/lookup')}\",\"byKey\":\"function(e, e){}\"},\"displayExpr\":\"function(e){ return e.Name + ' ('+e.DivisionName+')' }\",\"valueExpr\":\"Name\"},\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"Typology\",\"lookup\":{\"dataSource\":{\"load\":\"function(e){return SW.executeAPI('GET', 'userTypologies/lookup')}\",\"byKey\":\"function(e, e){}\"},\"displayExpr\":\"function(e){ return e.Name + ' ('+e.CompanyName+')' }\",\"valueExpr\":\"Name\"},\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"Hours\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"HireDate\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"StartDate\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"BirthDate\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"ExpirationDate\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"MaximumDailyHours\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"Tolerance\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"MinimumWeeklyHours\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"MaximumWeeklyHours\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"WeeklyOvertimeHoursThreshold\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"UserType\",\"lookup\":{\"dataSource\":{\"load\":\"function(e){return SW.executeAPI('GET', 'usertypes')}\",\"byKey\":\"function(e, e){}\"},\"displayExpr\":\"Name\",\"valueExpr\":\"Name\"},\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"Responsible\",\"lookup\":{\"dataSource\":{\"load\":\"function(e){return SW.executeAPI('GET', 'users/all/lookup')}\",\"byKey\":\"function(e, e){}\"},\"displayExpr\":\"Name\",\"valueExpr\":\"Name\"},\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"TimesheetToApproveTolerance\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"SendToleranceNotificationDays\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"Mail\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"TimesheetWorkType\",\"lookup\":{\"dataSource\":{\"load\":\"function(e){return SW.executeAPI('GET', 'worktypes/lookup')}\",\"byKey\":\"function(e, e){}\"},\"displayExpr\":\"Name\",\"valueExpr\":\"Name\"},\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"Phone\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"IsClient\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ChangePasswordOnFirstLogon\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"Employee\",\"lookup\":{\"dataSource\":{\"load\":\"function(e){return SW.executeAPI('GET', 'employees/lookup')}\",\"byKey\":\"function(e, e){}\"},\"displayExpr\":\"Name\",\"valueExpr\":\"Name\"},\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"EntryTimeTotalMinutes\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"number\"},{\"dataField\":\"EntryTimeToleranceTotalMinutes\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"number\"},{\"dataField\":\"ExitTimeTotalMinutes\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"number\"},{\"dataField\":\"ExitTimeToleranceTotalMinutes\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"number\"},{\"dataField\":\"OffsetTotalMinutes\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"number\"},{\"dataField\":\"UsedOffsetTotalMinutes\",\"width\":\"150\",\"alignment\":\"center\"},{\"dataField\":\"ReceiveNotificationsPushNotifications\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ReceiveNotificationsEmail\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ReceiveDigestEmail\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ReceiveTimesheetsNotifications\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ReceiveLeavesNotifications\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ReceiveDocumentsNotifications\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ReceiveResponsibleTimesheetsExpiringNotifications\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ReceiveResponsibleTimesheetsExpiredNotifications\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ReceiveResponsibleTimesheetsToApproveNotifications\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ReceiveResponsibleLeavesToApproveNotifications\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"PaidOvertime\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"HourlyPaid\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"Approver\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"Plannable\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"TimesheetsToApproveBlockEnabled\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"TimesheetRequired\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"EstimateCostCanExceedIncome\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"EstimateCostMarginVisible\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"ExpenseMonthly\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"},{\"dataField\":\"SsoOnly\",\"width\":\"150\",\"alignment\":\"center\",\"dataType\":\"boolean\"}],\"paging\":{\"enabled\":false},\"width\":\"\\\"100%\\\"\",\"columnAutoWidth\":\"true\",\"masterDetail\":{\"template\":\"function template(detailElement, detailInfo){\\n    \\n}\"}}",
      "DashboardDefinitionId": "e57330ce-544c-4d93-9345-d359068761f2"
    },
    {
      "Id": "dfcf9aef-96c8-4501-8316-c1747ca0455b",
      "Name": "",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"form\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":18,\"WidgetYPosition\":0,\"WidgetRows\":2,\"WidgetColumns\":9,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "3c1da83b-efe9-4b70-87d0-c3813a512774",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\n    \"items\": [\n        {\n            \"template\": \"<input type='file' id='fileUpload' />\"\n        },\n        {\n            \n        }\n    ]\n}",
      "DashboardDefinitionId": "e57330ce-544c-4d93-9345-d359068761f2"
    }
  ],
  "QueryText": "",
  "UseStore": false,
  "StoreEntity": null,
  "Version": 1,
  "Default": true
}