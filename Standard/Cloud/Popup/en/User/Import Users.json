{
  "DashboardDefinitionRoles": [],
  "Id": "e57330ce-544c-4d93-9345-d359068761f2",
  "Name": "Import Users",
  "Active": true,
  "Location": 1,
  "DocumentId": "00000000-0000-0000-0000-000000000000",
  "DocumentName": "",
  "DocumentTypeName": null,
  "DocumentsConfiguration": "{}",
  "Templates": [],
  "DashboardDefinitionComponents": [
    {
      "Id": "77247db7-63c7-4455-8b5a-0438b88d194f",
      "Name": "Users",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"Users\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":2,\"WidgetRows\":22,\"WidgetColumns\":48,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "be9c4895-90b8-4755-9054-caa7770b6a09",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\r\n    \"stateStoring\": {\r\n        \"enabled\": false\r\n    },\r\n    \"editing\": {\r\n        \"allowUpdating\": \"true\",\r\n        \"allowAdding\": \"true\",\r\n        \"mode\": \"batch\",\r\n        \"useIcons\": \"true\"\r\n    },\r\n    \"height\": \"100%\",\r\n    \"onToolbarPreparing\": \"function f(e) {\\n    var dataGrid = e.component; \\n    e.toolbarOptions.items.unshift({\\n        location: 'after',\\n        widget: 'dxButton',\\n        options: {\\n            icon: 'fal fa-download', \\n            onClick: async function (e) {\\n                dataGrid.option('disabled', true);\\n                var selectedUsers= dataGrid.getSelectedRowKeys();\\n                if(selectedUsers.length == 0){\\n                    SW.Toastr.toastr_Error(\\\"Select at least one user first\\\");\\n                    dataGrid.option('disabled', false);\\n                    return;\\n                }\\n                var p1 = MapCompanies(selectedUsers);\\n                var p2 = MapDivisions(selectedUsers);\\n                var p3 = MapDepartments(selectedUsers);\\n                var p4 = MapTypology(selectedUsers);\\n                var p5 = MapUserTypes(selectedUsers);\\n                var p6 = MapEmployees(selectedUsers);\\n                var p7 = MapWorkTypes(selectedUsers);\\n                await Promise.all([p1, p2, p3, p4, p5, p6, p7]);\\n                var allRequired = CheckAllRequired(selectedUsers);\\n                if(!allRequired){\\n                    dataGrid.option('disabled', false);\\n                    dataGrid.clearSelection();\\n                    return;\\n                }\\n                var postModel = {\\n                    OperationType: 2,\\n                    ImportModels: selectedUsers\\n                };\\n                SW.executeAPI('POST', 'v3/users', null, postModel)\\n                    .then(\\n                        x => {\\n                            dataGrid.option('disabled', false);\\n                            dataGrid.clearSelection();\\n                            SW.Toastr.toastr_Success(\\\"Done\\\");\\n                        }\\n                    )\\n                    .catch(\\n                        x => {\\n                            dataGrid.option('disabled', false);\\n                            SW.Toastr.toastr_Error(x);\\n                        }\\n                    );\\n            }, \\n            hint: 'Import selected users'\\n        }\\n    });\\n\\n    function MapCompanies(selectedUsers){\\n        return SW.executeAPI(\\\"GET\\\", \\\"companies/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var company = user.Company;\\n                if (dictionary[company]) {\\n                    user.CompanyId = dictionary[company];\\n                }\\n            });\\n        })\\n    }\\n\\n    function MapDivisions(selectedUsers) {\\n        return SW.executeAPI(\\\"GET\\\", \\\"divisions/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({[x.CompanyName+x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                if(!user.Division){\\n                    return;\\n                }\\n                var company = user.Company;\\n                var division = user.Division;\\n                debugger;\\n                if (dictionary[company+division]) {\\n                    user.DivisionId = dictionary[company+division];\\n                }\\n                debugger;\\n            });\\n        })\\n    }\\n\\n    function MapDepartments(selectedUsers) {\\n        return SW.executeAPI(\\\"GET\\\", \\\"departments/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.CompanyName+x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var company = user.Company;\\n                var department = user.Department\\n                if (dictionary[company+department]) {\\n                    user.DepartmentId = dictionary[company+department];\\n                }\\n            });\\n        })\\n    }\\n\\n    function MapTypology(selectedUsers){\\n        return SW.executeAPI(\\\"GET\\\", \\\"userTypologies/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var typology = user.Typology;\\n                if (dictionary[typology]) {\\n                    user.TypologyId = dictionary[typology];\\n                }\\n            });\\n        })\\n    }\\n\\n    function MapUserTypes(selectedUsers) {\\n        return SW.executeAPI(\\\"GET\\\", \\\"usertypes\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var userType = user.UserType;\\n                if (dictionary[userType]) {\\n                    user.UserTypeId = dictionary[userType];\\n                }\\n            });\\n        })\\n    }\\n\\n    function MapEmployees(selectedUsers) {\\n        return SW.executeAPI(\\\"GET\\\", \\\"employees/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var employee = user.Employee;\\n                if (dictionary[employee]) {\\n                    user.EmployeeId = dictionary[employee];\\n                }\\n            });\\n        })\\n    }\\n\\n    function MapWorkTypes(selectedUsers) {\\n        return SW.executeAPI(\\\"GET\\\", \\\"worktypes/lookup\\\").then(data => {\\n            let dictionary = Object.assign({}, ...data.map((x) => ({ [x.Name]: x.Id })));\\n            selectedUsers.forEach(user => {\\n                var worktype = user.TimesheetWorkType;\\n                if (dictionary[worktype]) {\\n                    user.TimesheetWorkTypeId = dictionary[worktype];\\n                }\\n            });\\n        })\\n    }\\n\\n    function CheckAllRequired(selectedUsers) {\\n        var problems = [];\\n        selectedUsers.forEach(user => {\\n            if (!user.UserName || user.UserName == \\\"\\\") {\\n                problems = [...problems, user.Name + ' - UserName is a required field and it was not found <br>'];\\n            }\\n            if (!user.CompanyId) {\\n                problems = [...problems, user.UserName + ' - Company is a required field and it was not found <br>'];\\n            }\\n            if (!user.DepartmentId) {\\n                problems = [...problems, user.UserName + ' - Department is a required field and it was not found for that company <br>'];\\n            }\\n            if (!user.TypologyId) {\\n                problems = [...problems, user.UserName + ' - Typology is a required field and it was not found <br>'];\\n            }\\n            if(!user.IsActive){\\n                user.IsActive = false;\\n            }\\n        });\\n        if (problems.length > 0) {\\n            SW.Toastr.toastr_Error(problems.toString());\\n            return false;\\n        };\\n        return true;\\n    }\\n}\",\r\n    \"onInitialized\": \"function(e) {\\n    SW.saveComponent(e.component, 'grid');\\n}\",\r\n    \"onContentReady\": \"function(e) {\\n    SW.saveComponent(e.component, 'grid');\\n}\",\r\n    \"dataSource\": {\r\n        \"load\": \"function(data){\\n    debugger;\\n}\"\r\n    },\r\n    \"columns\": [\r\n        {\r\n            \"dataField\": \"UserName\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"Name\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"IsActive\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"Company\",\r\n            \"lookup\": {\r\n                \"dataSource\": {\r\n                    \"load\": \"function(e){return SW.executeAPI('GET', 'companies/lookup').then(data => { var names = data.map(function(item) { return item.Name; }); let unique = [...new Set(names)]; return unique; }) }\",\r\n                    \"byKey\": \"function(key, bla){}\"\r\n                }\r\n            },\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"editorOptions\": {\r\n                \"acceptCustomValue\": false\r\n            }\r\n        },\r\n        {\r\n            \"dataField\": \"Division\",\r\n            \"lookup\": {\r\n                \"dataSource\": {\r\n                    \"load\": \"function f(e){ return SW.executeAPI('GET', 'divisions/lookup').then(data => { var names = data.map(function(item) { return item.Name; }); let unique = [...new Set(names)]; return unique; }) }\",\r\n                    \"byKey\": \"function(e, e){}\"\r\n                }\r\n            },\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"Department\",\r\n            \"lookup\": {\r\n                \"dataSource\": {\r\n                    \"load\": \"function(e){return SW.executeAPI('GET', 'departments/lookup').then(data => { var names = data.map(function(item) { return item.Name; }); let unique = [...new Set(names)]; return unique; }) }\",\r\n                    \"byKey\": \"function(e, e){}\"\r\n                }\r\n            },\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"Typology\",\r\n            \"lookup\": {\r\n                \"dataSource\": {\r\n                    \"load\": \"function(e){return SW.executeAPI('GET', 'userTypologies/lookup').then(data => { var names = data.map(function(item) { return item.Name; }); let unique = [...new Set(names)]; return unique; }) }\",\r\n                    \"byKey\": \"function(e, e){}\"\r\n                }\r\n            },\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"Hours\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"HireDate\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"StartDate\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"BirthDate\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"ExpirationDate\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"MaximumDailyHours\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"Tolerance\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"MinimumWeeklyHours\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"MaximumWeeklyHours\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"WeeklyOvertimeHoursThreshold\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"UserType\",\r\n            \"lookup\": {\r\n                \"dataSource\": {\r\n                    \"load\": \"function(e){return SW.executeAPI('GET', 'usertypes')}\",\r\n                    \"byKey\": \"function(e, e){}\"\r\n                },\r\n                \"displayExpr\": \"Name\",\r\n                \"valueExpr\": \"Name\"\r\n            },\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"Responsible\",\r\n            \"lookup\": {\r\n                \"dataSource\": {\r\n                    \"load\": \"function(e){return SW.executeAPI('GET', 'users/all/lookup')}\",\r\n                    \"byKey\": \"function(e, e){}\"\r\n                },\r\n                \"displayExpr\": \"Name\",\r\n                \"valueExpr\": \"Name\"\r\n            },\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"TimesheetToApproveTolerance\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"SendToleranceNotificationDays\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"Mail\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"TimesheetWorkType\",\r\n            \"lookup\": {\r\n                \"dataSource\": {\r\n                    \"load\": \"function(e){return SW.executeAPI('GET', 'worktypes/lookup')}\",\r\n                    \"byKey\": \"function(e, e){}\"\r\n                },\r\n                \"displayExpr\": \"Name\",\r\n                \"valueExpr\": \"Name\"\r\n            },\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"Phone\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"IsClient\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ChangePasswordOnFirstLogon\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"Employee\",\r\n            \"lookup\": {\r\n                \"dataSource\": {\r\n                    \"load\": \"function(e){return SW.executeAPI('GET', 'employees/lookup')}\",\r\n                    \"byKey\": \"function(e, e){}\"\r\n                },\r\n                \"displayExpr\": \"Name\",\r\n                \"valueExpr\": \"Name\"\r\n            },\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"EntryTimeTotalMinutes\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"number\"\r\n        },\r\n        {\r\n            \"dataField\": \"EntryTimeToleranceTotalMinutes\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"number\"\r\n        },\r\n        {\r\n            \"dataField\": \"ExitTimeTotalMinutes\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"number\"\r\n        },\r\n        {\r\n            \"dataField\": \"ExitTimeToleranceTotalMinutes\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"number\"\r\n        },\r\n        {\r\n            \"dataField\": \"OffsetTotalMinutes\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"number\"\r\n        },\r\n        {\r\n            \"dataField\": \"UsedOffsetTotalMinutes\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\"\r\n        },\r\n        {\r\n            \"dataField\": \"ReceiveNotificationsPushNotifications\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ReceiveNotificationsEmail\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ReceiveDigestEmail\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ReceiveTimesheetsNotifications\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ReceiveLeavesNotifications\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ReceiveDocumentsNotifications\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ReceiveResponsibleTimesheetsExpiringNotifications\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ReceiveResponsibleTimesheetsExpiredNotifications\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ReceiveResponsibleTimesheetsToApproveNotifications\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ReceiveResponsibleLeavesToApproveNotifications\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"PaidOvertime\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"HourlyPaid\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"Approver\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"Plannable\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"TimesheetsToApproveBlockEnabled\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"TimesheetRequired\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"EstimateCostCanExceedIncome\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"EstimateCostMarginVisible\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"ExpenseMonthly\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        },\r\n        {\r\n            \"dataField\": \"SsoOnly\",\r\n            \"width\": \"150\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"boolean\"\r\n        }\r\n    ],\r\n    \"paging\": {\r\n        \"enabled\": false\r\n    },\r\n    \"width\": \"\\\"100%\\\"\",\r\n    \"columnAutoWidth\": \"true\",\r\n    \"masterDetail\": {\r\n        \"template\": \"function template(detailElement, detailInfo){\\n    \\n}\"\r\n    }\r\n}",
      "DashboardDefinitionId": "e57330ce-544c-4d93-9345-d359068761f2"
    },
    {
      "Id": "ddb8d39d-eae2-48f3-8aef-6c9b33a2fdf9",
      "Name": "",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"form\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":18,\"WidgetYPosition\":0,\"WidgetRows\":2,\"WidgetColumns\":9,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "be9c4895-90b8-4755-9054-caa7770b6a09",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\n    \"items\": [\n        {\n            \"template\": \"<input type='file' id='fileUpload' />\"\n        },\n        {\n            \n        }\n    ]\n}",
      "DashboardDefinitionId": "e57330ce-544c-4d93-9345-d359068761f2"
    },
    {
      "Id": "9890b320-4c0f-4de4-a52f-cb6477a286e6",
      "Name": "",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"button\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":27,\"WidgetYPosition\":0,\"WidgetRows\":2,\"WidgetColumns\":3,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"queryempty\",\"value\":\"{\\\"entities\\\":[],\\\"fields\\\":[]}\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "be9c4895-90b8-4755-9054-caa7770b6a09",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\"icon\":\"fas fa-file-download\",\"text\":\"\",\"onClick\":\"function(e){\\n    var fileUpload = document.getElementById(\\\"fileUpload\\\");\\n    var grid = SW.getComponent('grid');\\n    var bla = SW.importExcelIntoGrid(fileUpload, grid);\\n}\",\"width\":\"100%\"}",
      "DashboardDefinitionId": "e57330ce-544c-4d93-9345-d359068761f2"
    }
  ],
  "QueryText": "",
  "UseStore": false,
  "StoreEntity": null,
  "Version": 2,
  "Default": true
}