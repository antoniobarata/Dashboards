{
    "DashboardDefinitionRoles": [],
    "Id": "e1bf6377-79b6-407a-845f-94a5c3cc5ff1",
    "Name": "Clients Dashboard",
    "Active": true,
    "Location": 0,
    "DocumentId": "00000000-0000-0000-0000-000000000000",
    "DocumentName": "",
    "DocumentsConfiguration": null,
    "Templates": [],
    "DashboardDefinitionComponents": [
        {
            "Id": "b6b8d925-bb36-4c0d-b1c9-339ba27f1cf4",
            "Name": "Typology Group Burn",
            "Active": true,
            "UseQuery": false,
            "Query": null,
            "Size": 4,
            "Order": 3,
            "Parameters": "[\r\n    {\r\n        \"WidgetSubTitle\": \"Actual Time\",\r\n        \"WidgetType\": \"chart\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"#efefef\",\r\n        \"WidgetHeight\": \"\",\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            } ,\r\n            \"WidgetMetrics\": {\r\n                \"visible\": true,\r\n                \"Metrics\": [\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"# Planned\",\r\n                        \"metricFieldValue\": \"PlannedTimeGrandTotal\"\r\n                    } ,\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"# Actual\",\r\n                        \"metricFieldValue\": \"ActualTimeGrandTotal\"\r\n                    } \r\n                ]\r\n            } ,\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        } ,\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"queryText\",\r\n                \"value\": \"select v.*, iif(v.ActualCostGrandTotal \u003e 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage, (v.ForecastSell - v.ActualCost) as ForecastProfit, (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal, iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage, sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal, iif(v.ForecastSellGrandTotal \u003e 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage, (v.PlannedSell - v.ActualCost) as PlannedProfit, (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal, iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage, sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal, iif(v.PlannedSellGrandTotal \u003e 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage, (v.ContractedSell - v.ActualCost) as ContractedProfit, (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal, iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage, sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal, iif(v.ContractedSellGrandTotal \u003e 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage from ( select tg.Oid as TypologyGroupId, tg.[Name] as TypologyGroup, sum(v.ActualHours) as ActualTime, sum(sum(v.ActualHours)) OVER (ORDER BY tg.[Oid]) AS ActualTimeRunningTotal, sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal, sum(v.ActualHoursCost) as ActualCost, sum(sum(v.ActualHoursCost)) OVER (ORDER BY tg.[Oid]) AS ActualCostRunningTotal, sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal, sum(v.ActualHoursSell) as ActualSell, sum(sum(v.ActualHoursSell)) OVER (ORDER BY tg.[Oid]) AS ActualSellRunningTotal, sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal, sum(v.ForecastHours) as ForecastTime, sum(sum(v.ForecastHours)) OVER (ORDER BY tg.[Oid]) AS ForecastTimeRunningTotal, sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal, sum(v.ForecastHoursSell) as ForecastSell, sum(sum(v.ForecastHoursSell)) OVER (ORDER BY tg.[Oid]) AS ForecastSellRunningTotal, sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal, sum(v.AllocatedHours) as AllocatedTime, sum(sum(v.AllocatedHours)) OVER (ORDER BY tg.[Oid]) AS AllocatedTimeRunningTotal, sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal, sum(v.AllocatedHoursSell) as AllocatedSell, sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY tg.[Oid]) AS AllocatedSellRunningTotal, sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal, sum(v.ContractedHours) as ContractedTime, sum(sum(v.ContractedHours)) OVER (ORDER BY tg.[Oid]) AS ContractedTimeRunningTotal, sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal, sum(v.ContractedHoursSell) as ContractedSell, sum(sum(v.ContractedHoursSell)) OVER (ORDER BY tg.[Oid]) AS ContractedSellRunningTotal, sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal, max(v.ContractedHoursRate) as ContractedRate, sum(v.PlannedHours) as PlannedTime, sum(sum(v.PlannedHours)) OVER (ORDER BY tg.[Oid]) AS PlannedTimeRunningTotal, sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal, sum(v.PlannedHoursSell) as PlannedSell, sum(sum(v.PlannedHoursSell)) OVER (ORDER BY tg.[Oid]) AS PlannedSellRunningTotal, sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal, max(v.PlannedHoursRate) as PlannedRate from SkillAnalyticsBurnRate v, UserTypologyGroup tg, Project p, CommercialClient cc, UserUsers_CompanyCompanies uucc where v.ProjectId = p.Oid and p.Client = cc.Oid and v.UserTypologyGroupId = tg.Oid and v.ProjectId = p.Oid /*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/ /*[ClientFilter]*/ and cc.Oid = @ClientId /*[/ClientFilter]*/ /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/ /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/ and uucc.Users = @CurrentUserId and uucc.Companies = p.Company group by tg.Oid, tg.[Name] ) v\",\r\n                \"mapping\": \"\"\r\n            } \r\n        } ,\r\n        \"QueryConfiguration\": {\r\n            \"RequiredFilters\": [\r\n                \"clientId\"\r\n            ],\r\n            \"Sort\": {\r\n                \"FieldName\": \"ActualTime\",\r\n                \"Type\": 2\r\n            } \r\n        } \r\n    } \r\n]",
            "DashboardComponentType": {
                "Id": "6f649e62-be82-4af7-8d64-06b32cf6c0ea",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            } ,
            "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_TypologyGroup/execute",
            "Configuration": "{\n\"palette\":\"material\",\n  \"commonSeriesSettings\": {\n    \"argumentField\": \"TypologyGroup\"\n  } ,\n  \"series\": [\n    {\n      \"type\": \"bar\",\n      \"valueField\": \"ActualTime\",\n      \"name\": \"Actual Time\"\n    } ,\n    {\n      \"type\": \"area\",\n      \"valueField\": \"PlannedTime\",\n      \"name\": \"Planned Time\"\n    } ,\n    {\n      \"type\": \"scatter\",\n      \"valueField\": \"ContractedTime\",\n      \"name\": \"Contracted Time\",\n      \"point\": {\n   \"symbol\": \"triangleDown\",\n        \"color\":\"#a5bdd7\"\n      } \n    } \n  ],\n  \"size\": {\n    \"height\": 250\n  } ,\n  \"legend\": {\n    \"visible\": true,\n    \"orientation\":\"horizontal\",\n    \"verticalAlignment\":\"bottom\",\n    \"horizontalAlignment\":\"center\"\n  } ,\n  \"argumentAxis\": {\n    \"label\": {\n      \"overlappingBehavior\":\"stagger\",\n      \"customizeText\":\"function(t){return t.valueText.split(\u0027 - \u0027)[0].substring(0,10)} \",\n      \"font\": {\n        \"size\": 8\n      } \n    } \n  } \n} ",
            "DashboardDefinitionId": "e1bf6377-79b6-407a-845f-94a5c3cc5ff1"
        } ,
        {
            "Id": "6837dcf6-b125-4faa-9ddf-464052670ae1",
            "Name": "Clients",
            "Active": true,
            "UseQuery": false,
            "Query": null,
            "Size": 12,
            "Order": 1,
            "Parameters": "[\r\n    {\r\n        \"WidgetSubTitle\": \"All Clients\",\r\n        \"WidgetType\": \"grid\",\r\n        \"WidgetFilterField\": \"ClientId\",\r\n        \"WidgetColor\": \"\",\r\n        \"WidgetHeight\": \"\",\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"showPeriodChooser\": false,\r\n            \"WidgetMetrics\": {\r\n                \"visible\": true,\r\n                \"Metrics\": [\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"# Planned\",\r\n                        \"metricFieldValue\": \"PlannedTimeGrandTotal\"\r\n                    } ,\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"# Actual\",\r\n                        \"metricFieldValue\": \"ActualTimeGrandTotal\"\r\n                    } ,\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"# Revenue\",\r\n                        \"metricFieldValue\": \"PlannedSellGrandTotal\"\r\n                    } ,\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"# Cost\",\r\n                        \"metricFieldValue\": \"ActualCostGrandTotal\"\r\n                    } \r\n                ]\r\n            } ,\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        } ,\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"queryText\",\r\n                \"value\": \"select v.*, iif(v.ActualCostGrandTotal \u003e 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage, (v.ForecastSell - v.ActualCost) as ForecastProfit, (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal, iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage, sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal, iif(v.ForecastSellGrandTotal \u003e 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage, (v.PlannedSell - v.ActualCost) as PlannedProfit, (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal, iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage, sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal, iif(v.PlannedSellGrandTotal \u003e 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage, (v.ContractedSell - v.ActualCost) as ContractedProfit, (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal, iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage, sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal, iif(v.ContractedSellGrandTotal \u003e 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage from ( select cli.Oid as ClientId, cli.[Name] as Client, sum(v.ActualHours) as ActualTime, sum(sum(v.ActualHours)) OVER (ORDER BY cli.[Oid]) AS ActualTimeRunningTotal, sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal, sum(v.ActualHoursCost) as ActualCost, sum(sum(v.ActualHoursCost)) OVER (ORDER BY cli.[Oid]) AS ActualCostRunningTotal, sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal, sum(v.ActualHoursSell) as ActualSell, sum(sum(v.ActualHoursSell)) OVER (ORDER BY cli.[Oid]) AS ActualSellRunningTotal, sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal, sum(v.ForecastHours) as ForecastTime, sum(sum(v.ForecastHours)) OVER (ORDER BY cli.[Oid]) AS ForecastTimeRunningTotal, sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal, sum(v.ForecastHoursSell) as ForecastSell, sum(sum(v.ForecastHoursSell)) OVER (ORDER BY cli.[Oid]) AS ForecastSellRunningTotal, sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal, sum(v.AllocatedHours) as AllocatedTime, sum(sum(v.AllocatedHours)) OVER (ORDER BY cli.[Oid]) AS AllocatedTimeRunningTotal, sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal, sum(v.AllocatedHoursSell) as AllocatedSell, sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY cli.[Oid]) AS AllocatedSellRunningTotal, sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal, sum(v.ContractedHours) as ContractedTime, sum(sum(v.ContractedHours)) OVER (ORDER BY cli.[Oid]) AS ContractedTimeRunningTotal, sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal, sum(v.ContractedHoursSell) as ContractedSell, sum(sum(v.ContractedHoursSell)) OVER (ORDER BY cli.[Oid]) AS ContractedSellRunningTotal, sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal, max(v.ContractedHoursRate) as ContractedRate, sum(v.PlannedHours) as PlannedTime, sum(sum(v.PlannedHours)) OVER (ORDER BY cli.[Oid]) AS PlannedTimeRunningTotal, sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal, sum(v.PlannedHoursSell) as PlannedSell, sum(sum(v.PlannedHoursSell)) OVER (ORDER BY cli.[Oid]) AS PlannedSellRunningTotal, sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal, max(v.PlannedHoursRate) as PlannedRate from SkillAnalyticsBurnRate v, Project p, CommercialClient cli, UserUsers_CompanyCompanies uucc where v.ProjectId = p.Oid and cli.oid = p.Client /*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/ /*[ClientFilter]*/ and p.Client = @ClientId /*[/ClientFilter]*/ /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/ /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/ and uucc.Users = @CurrentUserId and uucc.Companies = p.Company and Exists(select ccc.CommercialClient from CommercialClientCompany ccc, UserUsers_CompanyCompanies uucc where ccc.Company = uucc.Companies and uucc.Users = @CurrentUserId and ccc.CommercialClient = cli.Oid) group by cli.Oid, cli.[Name] ) v\",\r\n                \"mapping\": \"\"\r\n            } \r\n        } ,\r\n        \"QueryConfiguration\": {\r\n            \"Sort\": {\r\n                \"Type\": 1,\r\n                \"FieldName\": \"MonthYearNumber\"\r\n            } \r\n        } \r\n    } \r\n]",
            "DashboardComponentType": {
                "Id": "6f649e62-be82-4af7-8d64-06b32cf6c0ea",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            } ,
            "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_Client/execute",
            "Configuration": "{\n\"palette\":\"material\",\n  \"selection\": {\n    \"mode\": \"single\"\n  } ,\n  \"filterRow\": {\n    \"visible\": true\n  } ,\n  \"height\": 250,\n  \"columnsAutoWidth\": true,\n  \"allowColumnResizing\": true,\n  \"columnResizingMode\": \"nextColumn\",\n  \"columnMinWidth\": 50,\n  \"filterPanel\": {\n    \"visible\": false\n  } ,\n  \"scrolling\": {\n    \"mode\": \"virtual\"\n  } ,\n  \"columns\": [\n    \"Client\",\n    {\n      \"dataField\": \"ActualTime\",\n      \"caption\": \"Actual\",\n      \"format\": \"#,##0.00\"\n    } ,\n    {\n      \"dataField\": \"ActualCost\",\n      \"caption\": \"Cost\",\n      \"format\": {\n        \"type\": \"currency\",\n        \"precision\": 2\n      } \n    } ,\n    {\n      \"dataField\": \"PlannedTime\",\n      \"caption\": \"Planned\",\n      \"format\": \"#,##0.00\"\n    } ,\n    {\n      \"dataField\": \"PlannedSell\",\n      \"caption\": \"Planned Revenue\",\n      \"format\": {\n        \"type\": \"currency\",\n        \"precision\": 2\n      } \n    } ,\n    {\n      \"dataField\": \"PlannedProfitPercentage\",\n      \"caption\": \"Profit %\",\n      \"dataType\":\"number\",\n\"format\":\"percent\"\n    } ,\n    {\n      \"dataField\": \"ContractedTime\",\n      \"caption\": \"Contracted\",\n      \"format\": \"#,##0.00\"\n    } ,\n    {\n      \"dataField\": \"ContractedRate\",\n      \"caption\": \"Rate\",\n      \"format\": {\n        \"type\": \"currency\",\n        \"precision\": 2\n      } \n    } \n  ],\n  \"summary\": {\n    \"totalItems\": [\n      {\n        \"column\": \"Project\",\n        \"summaryType\": \"count\"\n      } ,\n      {\n        \"column\": \"ActualTime\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0.00\",\n        \"displayFormat\": \"{0} \"\n      } ,\n  \r\n    {\n        \"column\": \"ActualCost\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": {\n          \"type\": \"currency\",\n          \"precision\": 2\n        } ,\n        \"displayFormat\": \"{0} \"\n      } ,\n      {\n        \"column\": \"PlannedTime\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0.00\",\n        \"displayFormat\": \"{0} \"\n      } ,\n      {\n        \"column\": \"PlannedSell\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": {\n          \"type\": \"currency\",\n          \"precision\": 2\n        } ,\n        \"displayFormat\": \"{0} \"\n      } ,\n      {\n        \"column\": \"ContractedTime\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0.00\",\n        \"displayFormat\": \"{0} \"\n      } ,\n      {\n        \"column\": \"ContractedRate\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": {\n          \"type\": \"currency\",\n          \"precision\": 2\n        } ,\n        \"displayFormat\": \"{0} \"\n      } \n    ]\n  } \n} ",
            "DashboardDefinitionId": "e1bf6377-79b6-407a-845f-94a5c3cc5ff1"
        } ,
        {
            "Id": "5a534270-3e2e-43c3-816d-a4605d55f1b9",
            "Name": "Time per Project",
            "Active": true,
            "UseQuery": false,
            "Query": null,
            "Size": 8,
            "Order": 2,
            "Parameters": "[\r\n    {\r\n        \"WidgetSubTitle\": \"Planned x Actual\",\r\n        \"WidgetType\": \"chart\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"#efefef\",\r\n        \"WidgetHeight\": \"\",\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            } ,\r\n            \"WidgetMetrics\": {\r\n                \"visible\": true,\r\n                \"Metrics\": [\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"# Planned\",\r\n                        \"metricFieldValue\": \"PlannedTimeGrandTotal\"\r\n                    } ,\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"# Actual\",\r\n                        \"metricFieldValue\": \"ActualTimeGrandTotal\"\r\n                    } \r\n                ]\r\n            } ,\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        } ,\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"queryText\",\r\n                \"value\": \"select v.*, iif(v.ActualCostGrandTotal \u003e 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage, (v.ForecastSell - v.ActualCost) as ForecastProfit, (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal, iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage, sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal, iif(v.ForecastSellGrandTotal \u003e 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage, (v.PlannedSell - v.ActualCost) as PlannedProfit, (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal, iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage, sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal, iif(v.PlannedSellGrandTotal \u003e 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage, (v.ContractedSell - v.ActualCost) as ContractedProfit, (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal, iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage, sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal, iif(v.ContractedSellGrandTotal \u003e 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage from ( select p.Oid as ProjectId, p.[Name] as Project, ws.[Name] as Stage, ws.[Color] as StageColor, pc.[Name] as Classification, pn.[Name] as [Type], sum(v.ActualHours) as ActualTime, sum(sum(v.ActualHours)) OVER (ORDER BY p.[Oid]) AS ActualTimeRunningTotal, sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal, sum(v.ActualHoursCost) as ActualCost, sum(sum(v.ActualHoursCost)) OVER (ORDER BY p.[Oid]) AS ActualCostRunningTotal, sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal, sum(v.ActualHoursSell) as ActualSell, sum(sum(v.ActualHoursSell)) OVER (ORDER BY p.[Oid]) AS ActualSellRunningTotal, sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal, sum(v.ForecastHours) as ForecastTime, sum(sum(v.ForecastHours)) OVER (ORDER BY p.[Oid]) AS ForecastTimeRunningTotal, sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal, sum(v.ForecastHoursSell) as ForecastSell, sum(sum(v.ForecastHoursSell)) OVER (ORDER BY p.[Oid]) AS ForecastSellRunningTotal, sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal, sum(v.AllocatedHours) as AllocatedTime, sum(sum(v.AllocatedHours)) OVER (ORDER BY p.[Oid]) AS AllocatedTimeRunningTotal, sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal, sum(v.AllocatedHoursSell) as AllocatedSell, sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY p.[Oid]) AS AllocatedSellRunningTotal, sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal, sum(v.ContractedHours) as ContractedTime, sum(sum(v.ContractedHours)) OVER (ORDER BY p.[Oid]) AS ContractedTimeRunningTotal, sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal, sum(v.ContractedHoursSell) as ContractedSell, sum(sum(v.ContractedHoursSell)) OVER (ORDER BY p.[Oid]) AS ContractedSellRunningTotal, sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal, max(v.ContractedHoursRate) as ContractedRate, sum(v.PlannedHours) as PlannedTime, sum(sum(v.PlannedHours)) OVER (ORDER BY p.[Oid]) AS PlannedTimeRunningTotal, sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal, sum(v.PlannedHoursSell) as PlannedSell, sum(sum(v.PlannedHoursSell)) OVER (ORDER BY p.[Oid]) AS PlannedSellRunningTotal, sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal, max(v.PlannedHoursRate) as PlannedRate from SkillAnalyticsBurnRate v, Project p, WorkflowState ws, ProjectClassification pc, ProjectNature pn, UserUsers_CompanyCompanies uucc where v.ProjectId = p.Oid and ws.Oid = p.WorkflowState and pc.Oid = p.Classification and pn.Oid = p.ProjectNature /*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/ /*[ClientFilter]*/ and p.Client = @ClientId /*[/ClientFilter]*/ /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/ /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/ and uucc.Users = @CurrentUserId and uucc.Companies = p.Company group by p.Oid, p.[Name], ws.[Name], ws.[Color], pc.[Name], pn.[Name] ) v\",\r\n                \"mapping\": \"\"\r\n            } \r\n        } ,\r\n        \"QueryConfiguration\": {\r\n            \"RequiredFilters\": [\r\n                \"clientId\"\r\n            ],\r\n            \"Sort\": {\r\n                \"FieldName\": \"ActualTime\",\r\n                \"Type\": 2\r\n            } \r\n        } \r\n    } \r\n]",
            "DashboardComponentType": {
                "Id": "6f649e62-be82-4af7-8d64-06b32cf6c0ea",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            } ,
            "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_Project/execute",
            "Configuration": "{\n \"size\": {\n    \"height\": 250\n  } ,\n  \"commonSeriesSettings\": {\n    \"argumentField\": \"Project\",\n    \"ignoreEmptyPoints\": false\n  } ,\n  \"series\": [\n    {\n      \"type\": \"bar\",\n      \"valueField\": \"PlannedTime\",\n      \"name\": \"Planned\"\n    } ,\n    {\n      \"type\": \"bar\",\n      \"valueField\": \"ActualTime\",\n      \"name\": \"Actual\"\n    } \n  ],\n  \"legend\": {\n    \"rowCount\": 1,\n    \"verticalAlignment\": \"bottom\",\n    \"horizontalAlignment\": \"center\"\n  } ,\n  \"argumentAxis\": {\n    \"label\": {\n      \"overlappingBehavior\":\"stagger\",\n      \"customizeText\":\"function(t){return t.valueText.split(\u0027 - \u0027)[0].substring(0,10)} \",\n      \"font\": {\n        \"size\": 8\n      } \n    } \n  } \n} ",
            "DashboardDefinitionId": "e1bf6377-79b6-407a-845f-94a5c3cc5ff1"
        } 
    ],
    "Version": 3,
    "Default": true,
    "Dependencies": {
        "DashboardSdk": "1.0.0",
        "Analytics": "1.0.0",
        "SkillsWorkflow": "1.0.0"
    } 
} 
