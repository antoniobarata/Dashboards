{"DashboardDefinitionRoles":[{"AccessRoleId":"5c2e7024-eaf4-43fa-96d3-9ad61b011657","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda","AccessRoleName":"Finance Profile"},{"AccessRoleId":"adebf70c-0dab-41d1-8ee8-e78bcc9b09f7","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda","AccessRoleName":"Account Profile"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda","AccessRoleName":"Administrator"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"adebf70c-0dab-41d1-8ee8-e78bcc9b09f7","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda","AccessRoleName":"Account Profile"},{"AccessRoleId":"5c2e7024-eaf4-43fa-96d3-9ad61b011657","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda","AccessRoleName":"Finance Profile"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda","AccessRoleName":"Administrator"}],"Id":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda","Name":"Burn - Project","Active":true,"Location":1,"DocumentId":"8055b90e-69d2-4346-a378-5b8f21d5ec7b","DocumentName":"Project","DocumentTypeName":null,"DocumentsConfiguration":"[{\"entity\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"patch\":{\"endpoint\":\"\",\"model\":[{\"field\":\"\",\"caption\":\"\",\"type\":\"\"}]},\"remove\":{\"endpoint\":\"\"},\"lookup\":{\"endpoint\":\"\"},\"lookupById\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{},\"patch\":{}},\"customDocument\":{\"useCustomStyle\":false,\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemName\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"dashboard\":false},\"fields\":[]}]","Templates":[],"DashboardDefinitionComponents":[{"Id":"cf8e352e-2762-419f-b044-13e7917e44d3","Name":"Utilization per User","Active":true,"UseQuery":false,"Query":"","Size":12,"Order":0,"Parameters":"[{\"WidgetSubTitle\":\"Billable and Non-Billable Actual Hours in % of User Capacity\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":15,\"WidgetColumns\":48,\"WidgetHeader\":{\"showTitle\":true,\"showSubTitle\":true,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select \\r\\n\\tv.JobId,\\r\\n\\tIsNull(v.JobName, concat('Project Total (', (select p.[Name] from Project p where p.Oid = @ProjectId), ')')) as JobName,\\r\\n\\tv.JobType,\\r\\n\\tv.ContractedHours,\\r\\n\\tIIF(n.RoleId is not null, v.ContractedHoursIncome, null) as ContractedHoursIncome,\\r\\n\\tv.PlannedHours,\\r\\n\\tIIF(n.RoleId is not null, v.PlannedHoursIncome, null) as PlannedHoursIncome,\\r\\n\\tv.ForecastHours,\\r\\n\\tIIF(n.RoleId is not null, v.ForecastHoursIncome, null) as ForecastHoursIncome,\\r\\n\\tv.ActualHours,\\r\\n\\tIIF(n.RoleId is not null, v.ActualHoursIncome, null) as ActualHoursIncome,\\r\\n\\tv.BillableHours,\\r\\n\\tIIF(n.RoleId is not null, v.BillableHoursIncome, null) as BillableHoursIncome,\\r\\n\\tv.NonBillableHours,\\r\\n\\tIIF(n.RoleId is not null, v.NonBillableHoursIncome, null) as NonBillableHoursIncome,\\r\\n\\tv.ActualPlusForecastHours,\\r\\n\\tIIF(n.RoleId is not null, v.ActualPlusForecastIncome, null) as ActualPlusForecastIncome,\\r\\n\\tv.ActualBurnPercentageHours,\\r\\n\\tIIF(n.RoleId is not null, v.ActualBurnPercentageIncome, null) as ActualBurnPercentageIncome,\\r\\n\\tv.ActualPlusForecastBurnPercentage,\\r\\n\\tIIF(n.RoleId is not null, v.ActualPlusForecastBurnIncome, null) as ActualPlusForecastBurnIncome\\r\\nfrom (\\r\\n\\tselect\\r\\n\\t\\t\\tv.[Job] as JobId,\\r\\n\\t\\t\\td.[NameAndExternalId] as JobName,\\r\\n\\t\\t\\tjt.[Name] as JobType,\\r\\n\\t\\t\\tsum(v.ContractedHours) as ContractedHours,\\r\\n\\t\\t\\tsum(v.ContractedHoursIncome) as ContractedHoursIncome,\\r\\n\\t\\t\\tsum(v.PlannedHours) as PlannedHours,\\r\\n\\t\\t\\tsum(v.PlannedHoursIncome) as PlannedHoursIncome,\\r\\n\\t\\t\\tsum(v.ForecastHours) as ForecastHours,\\r\\n\\t\\t\\tsum(v.ForecastHoursIncome) as ForecastHoursIncome,\\r\\n\\t\\t\\tsum(v.ActualHours) as ActualHours,\\r\\n\\t\\t\\tsum(v.ActualHoursIncome) as ActualHoursIncome,\\r\\n\\t\\t\\tsum(v.BillableHours) as BillableHours,\\r\\n\\t\\t\\tsum(v.BillableHoursIncome) as BillableHoursIncome,\\r\\n\\t\\t\\tsum(v.NonBillableHours) as NonBillableHours,\\r\\n\\t\\t\\tsum(v.NonBillableHoursIncome) as NonBillableHoursIncome,\\r\\n\\t\\t\\tsum(v.ActualHours) + sum(v.ForecastHours) as ActualPlusForecastHours,\\r\\n\\t\\t\\tsum(v.ActualHoursIncome) + sum(v.ForecastHoursIncome) as ActualPlusForecastIncome,\\r\\n\\t\\t\\tIIF(sum(v.ContractedHours) > 0, sum(v.ActualHours) / sum(v.ContractedHours), 0) as ActualBurnPercentageHours,\\r\\n\\t\\t\\tIIF(sum(v.ContractedHoursIncome) > 0, sum(v.ActualHoursIncome) / sum(v.ContractedHoursIncome), 0) as ActualBurnPercentageIncome,\\r\\n\\t\\t\\tIIF(sum(v.ContractedHours) > 0, (sum(v.ActualHours) + sum(v.ForecastHours)) / sum(v.ContractedHours), 0) as ActualPlusForecastBurnPercentage,\\r\\n\\t\\t\\tIIF(sum(v.ContractedHoursIncome) > 0, (sum(v.ActualHoursIncome) + sum(v.ForecastHoursIncome)) / sum(v.ContractedHoursIncome), 0) as ActualPlusForecastBurnIncome\\r\\n\\t\\tfrom (\\r\\n\\t\\t\\tselect\\r\\n\\t\\t\\t\\tv.Job,\\r\\n\\t\\t\\t\\tsum(v.[Rate]) as Rate,\\r\\n\\t\\t\\t\\tsum(v.ContractedHours) as ContractedHours,\\r\\n\\t\\t\\t\\tsum(v.ContractedHours) * sum(v.Rate) as ContractedHoursIncome,\\r\\n\\t\\t\\t\\tsum(v.PlannedHours) as PlannedHours,\\r\\n\\t\\t\\t\\tsum(v.PlannedHours) * sum(v.Rate) as PlannedHoursIncome,\\r\\n\\t\\t\\t\\tsum(v.ForecastHours) as ForecastHours,\\r\\n\\t\\t\\t\\tsum(v.ForecastHours) * sum(v.Rate) as ForecastHoursIncome,\\r\\n\\t\\t\\t\\tsum(v.ActualHours) as ActualHours,\\r\\n\\t\\t\\t\\tsum(v.ActualHours) * sum(v.Rate) as ActualHoursIncome,\\r\\n\\t\\t\\t\\tsum(v.BillableHours) as BillableHours,\\r\\n\\t\\t\\t\\tsum(v.BillableHours) * sum(v.Rate) as BillableHoursIncome,\\r\\n\\t\\t\\t\\tsum(v.NonBillableHours) as NonBillableHours,\\r\\n\\t\\t\\t\\tsum(v.NonBillableHours) * sum(v.Rate) as NonBillableHoursIncome\\r\\n\\t\\t\\tfrom (\\r\\n\\t\\t\\t\\tselect \\r\\n\\t\\t\\t\\t\\tpht.Job,\\r\\n\\t\\t\\t\\t\\tMax(isnull(pht.SellRate, 0)) as Rate,\\r\\n\\t\\t\\t\\t\\tsum(isnull(pht.ContractedMinutes, 0)) / 60.0 as ContractedHours,\\r\\n\\t\\t\\t\\t\\tsum(isnull(pht.PlannedMinutes, 0)) / 60.0 as PlannedHours,\\r\\n\\t\\t\\t\\t\\t0 as ForecastHours,\\r\\n\\t\\t\\t\\t\\t0 as ActualHours,\\r\\n\\t\\t\\t\\t\\t0 as BillableHours,\\r\\n\\t\\t\\t\\t\\t0 as NonBillableHours\\r\\n\\t\\t\\t\\tfrom \\r\\n\\t\\t\\t\\t\\tPlannedHoursTotal pht\\r\\n\\t\\t\\t\\t\\t\\tleft outer join Project p on p.Oid = pht.Project\\r\\n\\t\\t\\t\\twhere\\r\\n                    pht.GCRecord is null and\\r\\n\\t\\t\\t\\t\\tp.Oid = @ProjectId\\r\\n\\t\\t\\t\\tgroup by\\r\\n\\t\\t\\t\\t\\tpht.Job\\r\\n\\t\\t\\t\\tunion all\\r\\n\\t\\t\\t\\tselect\\r\\n\\t\\t\\t\\t\\tpha.Job,\\r\\n\\t\\t\\t\\t\\t0 as Rate,\\r\\n\\t\\t\\t\\t\\t0 as ContractedHours,\\r\\n\\t\\t\\t\\t\\t0 as PlannedHours,\\r\\n\\t\\t\\t\\t\\tsum(isnull(pha.AdjustmentMinutes, 0)) / 60.0 as ForecastHours,\\r\\n\\t\\t\\t\\t\\t0 as ActualHours,\\r\\n\\t\\t\\t\\t\\t0 as BillableHours,\\r\\n\\t\\t\\t\\t\\t0 as NonBillableHours\\r\\n\\t\\t\\t\\tfrom\\r\\n\\t\\t\\t\\t\\tPlannedHoursAdjustment pha\\r\\n\\t\\t\\t\\t\\t\\tleft outer join Project p on p.Oid = pha.Project\\r\\n\\t\\t\\t\\twhere\\r\\n                    pha.GCRecord is null and\\r\\n\\t\\t\\t\\t\\tYear(pha.[Date]) >= Year(CURRENT_TIMESTAMP) and\\r\\n\\t\\t\\t\\t\\tMonth(pha.[Date]) >= Month(CURRENT_TIMESTAMP) and\\r\\n\\t\\t\\t\\t\\tp.Oid = @ProjectId\\r\\n\\t\\t\\t\\tgroup by\\r\\n\\t\\t\\t\\t\\tpha.Job\\r\\n\\t\\t\\t\\tunion all\\r\\n\\t\\t\\t\\tselect\\r\\n\\t\\t\\t\\t\\tv.Job,\\r\\n\\t\\t\\t\\t\\t0 as Rate,\\r\\n\\t\\t\\t\\t\\t0 as ContractedHours,\\r\\n\\t\\t\\t\\t\\t0 as PlannedHours,\\r\\n\\t\\t\\t\\t\\t0 as ForecastHours,\\r\\n\\t\\t\\t\\t\\tsum(v.[Hours]) as ActualHours,\\r\\n\\t\\t\\t\\t\\tsum(v.[Hours] - (v.AdministrativeHours + v.NewBusinessHours)) as BillableHours,\\r\\n\\t\\t\\t\\t\\tsum(v.NewBusinessHours + v.AdministrativeHours) as NonBillableHours \\r\\n\\t\\t\\t\\tfrom (\\r\\n\\t\\t\\t\\t\\tselect\\r\\n\\t\\t\\t\\t\\t\\td.Oid as Job,\\r\\n\\t\\t\\t\\t\\t\\tiif(t.IsAdministrative = 1, (t.[Hours] / 60.0), 0) as AdministrativeHours,\\r\\n\\t\\t\\t\\t\\t\\tIIF(\\r\\n\\t\\t\\t\\t\\t\\t\\t(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\twhen t.IsAdministrative = 0 and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tisnull(jc.Billable, 0) = 0 and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tisnull(pc.Billable, 0) = 0\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tthen 1 \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telse 0 \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tend\\r\\n\\t\\t\\t\\t\\t\\t\\t) = 1, (t.[Hours] / 60.0), 0\\r\\n\\t\\t\\t\\t\\t\\t) as NewBusinessHours,\\r\\n\\t\\t\\t\\t\\t\\tIIF(\\r\\n\\t\\t\\t\\t\\t\\t\\t(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\twhen t.IsAdministrative = 0 and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(pc.Billable = 1 and isnull(jc.Billable, 0) = 0)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t) \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tthen (t.[Hours] / 60.0) \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telse 0 \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tend\\r\\n\\t\\t\\t\\t\\t\\t\\t) = 1, (t.[Hours] / 60.0), 0\\r\\n\\t\\t\\t\\t\\t\\t) as InternalWorkHours,\\r\\n\\t\\t\\t\\t\\t\\tIIF(\\r\\n\\t\\t\\t\\t\\t\\t\\t(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\twhen t.IsAdministrative = 0 and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(pc.Billable = 1 or jc.Billable = 1)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tthen (t.[Hours] / 60.0) \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telse 0 \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tend\\r\\n\\t\\t\\t\\t\\t\\t\\t) = 1, (t.[Hours] / 60.0), 0\\r\\n\\t\\t\\t\\t\\t\\t) as BillableHours,\\r\\n\\t\\t\\t\\t\\t\\t(t.[Hours] / 60.0) as [Hours],\\r\\n\\t\\t\\t\\t\\t\\tt.TotalUserCost\\r\\n\\t\\t\\t\\t\\tfrom\\t\\r\\n\\t\\t\\t\\t\\t\\tdbo.SkillTimesheetExpanded t\\r\\n\\t\\t\\t\\t\\t\\t\\tinner join Project p ON (p.Oid = t.ProjectId AND p.Oid = @ProjectId)\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join ProjectClassification pc on (pc.Oid = p.Classification)\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join Deliverable d on (d.Oid = t.DeliverableId)\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join JobClassification jc on (jc.Oid = d.Classification)\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join UserTypology tp on (tp.Oid = t.UserTypologyId)\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join UserTypologyGroup utg on (utg.Oid = tp.UserTypologyGroup)\\r\\n\\t\\t\\t\\t\\t) v\\r\\n\\t\\t\\t\\tgroup by\\r\\n\\t\\t\\t\\t\\tv.Job\\r\\n\\t\\t\\t) v\\r\\n\\t\\t\\tgroup by\\r\\n\\t\\t\\t\\tv.Job\\r\\n\\t\\t) v\\r\\n\\t\\t\\tleft outer join Deliverable d on d.Oid = v.Job\\r\\n\\t\\t\\tleft outer join JobType jt on jt.Oid = d.JobType\\r\\n\\t\\tgroup by \\r\\n\\t\\t\\tv.Job,\\r\\n\\t\\t\\td.[NameAndExternalId],\\r\\n\\t\\t\\tjt.[Name]\\r\\n) v\\r\\nleft outer join Analytics.[Authorization](@CurrentUserId) n ON (n.RoleName = 'DeliverablesSellRead')\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"","Configuration":"{\"selection\":{\"mode\":\"single\"},\"filterRow\":{\"visible\":true},\"height\":\"300\",\"columnsAutoWidth\":true,\"allowColumnResizing\":false,\"columnResizingMode\":\"nextColumn\",\"columnMinWidth\":\"100\",\"filterPanel\":{\"visible\":false},\"groupPanel\":{\"visible\":false},\"scrolling\":{\"mode\":\"virtual\"},\"columns\":[{\"dataField\":\"JobName\",\"caption\":\"Job\",\"width\":250,\"allowGrouping\":false},{\"dataField\":\"JobId\",\"caption\":\"JobId\",\"width\":400,\"allowGrouping\":false,\"visible\":false},{\"dataField\":\"JobType\",\"caption\":\"Job Type\",\"width\":125,\"allowGrouping\":false},{\"dataField\":\"ContractedHours\",\"caption\":\"Contracted\",\"format\":\"#,##0.00\",\"width\":125,\"allowGrouping\":false},{\"dataField\":\"ContractedHoursIncome\",\"caption\":\"Contracted $\",\"dataType\":\"number\",\"format\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\",\"allowGrouping\":false,\"width\":125},{\"dataField\":\"ForecastHours\",\"caption\":\"Forecasted\",\"format\":\"#,##0.00\",\"alignment\":\"right\",\"width\":125,\"allowGrouping\":false},{\"dataField\":\"ForecastHoursIncome\",\"caption\":\"Forecast $\",\"dataType\":\"number\",\"format\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\",\"allowGrouping\":false,\"width\":125},{\"dataField\":\"PlannedHours\",\"caption\":\"Planned\",\"format\":\"#,##0.00\",\"width\":100,\"allowGrouping\":false,\"visible\":false},{\"dataField\":\"ActualHours\",\"caption\":\"Actual\",\"alignment\":\"center\",\"columns\":[{\"dataField\":\"BillableHours\",\"caption\":\"Billable\",\"format\":\"#,##0.00\",\"width\":125,\"allowGrouping\":false,\"alignment\":\"right\"},{\"dataField\":\"BillableHoursIncome\",\"caption\":\"Billable $\",\"dataType\":\"number\",\"format\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\",\"allowGrouping\":false,\"width\":125},{\"dataField\":\"NonBillableHours\",\"caption\":\"Non Billable\",\"format\":\"#,##0.00\",\"width\":125,\"allowGrouping\":false,\"alignment\":\"right\"}]},{\"dataField\":\"ActualHoursIncome\",\"caption\":\"Actual $\",\"dataType\":\"number\",\"format\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\",\"allowGrouping\":false,\"visible\":false,\"width\":125},{\"dataField\":\"ActualPlusForecastHours\",\"caption\":\"Actual + Forecast\",\"format\":\"#,##0.00\",\"width\":125,\"allowGrouping\":false},{\"dataField\":\"ActualPlusForecastIncome\",\"caption\":\"Actual + Forecast $\",\"dataType\":\"number\",\"format\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\",\"allowGrouping\":false,\"width\":125},{\"dataField\":\"ActualBurnPercentageHours\",\"caption\":\"Actual Burn % (Hours)\",\"dataType\":\"number\",\"format\":\"percent\",\"width\":150,\"allowGrouping\":false,\"cellTemplate\":\"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); }\"},{\"dataField\":\"ActualBurnPercentageIncome\",\"caption\":\"Actual Burn % ($)\",\"dataType\":\"number\",\"format\":\"percent\",\"width\":150,\"allowGrouping\":false,\"cellTemplate\":\"function(e, i) {                if(i.data.ActualBurnPercentageIncome != null) {                    SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true);                }            }\"},{\"dataField\":\"ActualPlusForecastBurnPercentage\",\"caption\":\"Actual + Forecast Burn % (Hours)\",\"dataType\":\"number\",\"format\":\"percent\",\"width\":200,\"allowGrouping\":false,\"cellTemplate\":\"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); }\",\"visible\":true},{\"dataField\":\"PlannedContractedPercentage\",\"caption\":\"Planned Burn %\",\"dataType\":\"number\",\"format\":\"percent\",\"width\":150,\"allowGrouping\":false,\"cellTemplate\":\"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); }\",\"visible\":false},{\"dataField\":\"ActualPlusForecastBurnIncome\",\"caption\":\"Actual + Forecast Burn % ($)\",\"dataType\":\"number\",\"format\":\"percent\",\"width\":200,\"allowGrouping\":false,\"cellTemplate\":\"function(e, i) {                 if(i.data.ActualPlusForecastBurnIncome != null) {                    SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true);                 }                   }\",\"visible\":true}],\"summary\":{\"calculateCustomSummary\":\"function (options) {            if (options.name === 'ActualBurnHours') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                    options.totalValue[0] = options.totalValue[0] + options.value.ActualHours;                    options.totalValue[1] = options.totalValue[1] + options.value.ContractedHours;                        break;                    case 'finalize':                    if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                    else                            options.totalValue = 0;                            break;                }            }                    if (options.name === 'ActualPlusForecastBurnHours') {                switch(options.summaryProcess) {                    case 'start':                    options.totalValue = [0,0];                        break;                    case 'calculate':                    options.totalValue[0] = options.totalValue[0] + options.value.ActualPlusForecastHours;                    options.totalValue[1] = options.totalValue[1] + options.value.ContractedHours;                        break;                    case 'finalize':                    if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                    options.totalValue = 0;                            break;                }            }            if (options.name === 'PlannedBurn') {                        switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                        case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.PlannedHours;                        options.totalValue[1] = options.totalValue[1] + options.value.ContractedHours;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }            }                        if (options.name === 'ActualPlusForecastBurnIncome') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.ActualPlusForecastIncome;                        options.totalValue[1] = options.totalValue[1] + options.value.ContractedIncome;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }            }            if (options.name === 'ActualBurnIncome') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.ActualIncome;                        options.totalValue[1] = options.totalValue[1] + options.value.ContractedIncome;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }            }        }\",\"totalItems\":[{\"name\":\"ActualBurnIncome\",\"showInColumn\":\"Actual Burn % ($)\",\"displayFormat\":\"{0}\",\"valueFormat\":{\"type\":\"percent\",\"precision\":1},\"summaryType\":\"custom\",\"alignment\":\"right\"},{\"name\":\"ActualPlusForecastBurnIncome\",\"showInColumn\":\"Actual + Forecast Burn % ($)\",\"displayFormat\":\"{0}\",\"valueFormat\":{\"type\":\"percent\",\"precision\":1},\"summaryType\":\"custom\",\"alignment\":\"right\"},{\"name\":\"PlannedBurn\",\"showInColumn\":\"Planned Burn %\",\"displayFormat\":\"{0}\",\"valueFormat\":{\"type\":\"percent\",\"precision\":1},\"summaryType\":\"custom\",\"alignment\":\"right\"},{\"name\":\"ActualPlusForecastBurnHours\",\"showInColumn\":\"Actual + Forecast Burn % (Hours)\",\"displayFormat\":\"{0}\",\"valueFormat\":{\"type\":\"percent\",\"precision\":1},\"summaryType\":\"custom\",\"alignment\":\"right\"},{\"name\":\"ActualBurnHours\",\"showInColumn\":\"Actual Burn % (Hours)\",\"displayFormat\":\"{0}\",\"valueFormat\":{\"type\":\"percent\",\"precision\":1},\"summaryType\":\"custom\",\"alignment\":\"right\"},{\"column\":\"ProjectName\",\"summaryType\":\"count\",\"displayFormat\":\"All Projects\"},{\"column\":\"ActualTime\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"Actual $\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"Billable\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"Planned\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"Non Billable\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"Forecasted\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"Actual + Forecast\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"ActualCost\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"},{\"column\":\"PlannedTime\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"ContractedRevenue\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"},{\"column\":\"Contracted\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"ContractedHoursIncome\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"},{\"column\":\"ContractedActualIncomeVariation\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"},{\"column\":\"Billable $\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"},{\"column\":\"Forecast $\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"},{\"column\":\"Actual + Forecast $\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"},{\"column\":\"Actual Burn $\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"},{\"column\":\"Actual + Forecast Burn $\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"}]},\"columnChooser\":{\"enabled\":\"true\"},\"stateStoring\":{\"enabled\":false}}","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda"},{"Id":"7be9b0bb-9156-4c8f-846b-14d41c615131","Name":"Revenue Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":3,"Parameters":"[{\"WidgetSubTitle\":\"Planned Revenue vs Actual Cost\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":24,\"WidgetYPosition\":15,\"WidgetRows\":16,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Revenue\",\"metricFieldValue\":\"ForecastSellGrandTotal\"},{\"visible\":true,\"metricName\":\"# Cost\",\"metricFieldValue\":\"ActualCostGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"With ProjectYearMonths As\\r\\n(\\r\\n    select @ProjectId as ProjectId, \\r\\n    ym.* \\r\\n    from YearsMonths(\\r\\n    (select p.BeginDate from Project p where p.Oid = @ProjectId), \\r\\n    (select p.EndDate from Project p where p.Oid = @ProjectId)) ym\\r\\n),\\r\\nPlannedAndContracted AS\\r\\n(\\r\\n    select\\tv.[Year],\\r\\n            v.[Month],\\r\\n                    isnull(sum(v.PlannedHours), 0) as PlannedTime,\\r\\n                    isnull(sum(sum(v.PlannedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedTimeRunningTotal,\\r\\n                    isnull(sum(sum(v.PlannedHours)) OVER (), 0) AS PlannedGrandTotal,\\r\\n                    isnull(sum(v.PlannedHoursSell), 0) as PlannedSell,\\r\\n                    isnull(sum(sum(v.PlannedHoursSell)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedSellRunningTotal,\\r\\n                    isnull(sum(sum(v.PlannedHoursSell)) OVER (), 0) AS PlannedSellGrandTotal,\\r\\n                    isnull(sum(v.ContractedHours), 0) as ContractedTime,\\r\\n                    isnull(sum(sum(v.ContractedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS ContractedTimeRunningTotal,\\r\\n                    isnull(sum(sum(v.ContractedHours)) OVER (), 0) AS ContractedTimeGrandTotal,\\r\\n                    isnull(max(v.ContractedHoursRate), 0) as ContractedRate \\r\\n            from\\tSkillAnalyticsBurnRate v\\r\\n    where\\tv.[Year] is null and v.[Month] is null \\r\\n            /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n    group by v.[Year],\\r\\n            v.[Month]\\r\\n)\\r\\nselect\\r\\n    v.MonthYear,\\r\\n    IIF(n.RoleId is not null, v.ForecastSell, null) as ForecastSell,\\r\\n    IIF(n.RoleId is not null, v.ActualCost, null) as ActualCost,\\r\\n    IIF(n.RoleId is not null, v.ForecastSellRunningTotal, null) as ForecastSellRunningTotal,\\r\\n    IIF(n.RoleId is not null, v.ActualCostRunningTotal, null) as ActualCostRunningTotal,\\r\\n    IIF(n.RoleId is not null, v.ForecastSellGrandTotal, null) as ForecastSellGrandTotal,\\r\\n    IIF(n.RoleId is not null, v.ActualCostGrandTotal, null) as ActualCostGrandTotal\\r\\nfrom\\r\\n(\\r\\n    select\\tv.*,\\r\\n        pc.PlannedTime,\\r\\n        pc.PlannedTimeRunningTotal,\\r\\n        pc.PlannedGrandTotal,\\r\\n        pc.PlannedSell,\\r\\n        pc.PlannedSellRunningTotal,\\r\\n        pc.PlannedSellGrandTotal,\\r\\n        pc.ContractedTime,\\r\\n        pc.ContractedTimeRunningTotal,\\r\\n        pc.ContractedTimeGrandTotal,\\r\\n        pc.ContractedRate\\r\\n    from\\r\\n        (\\r\\n            select\\tconcat(FORMAT(pym.[Month], '0#'), '/', pym.[Year]) as MonthYear,\\r\\n                        pym.YearMonth as MonthYearNumber,\\r\\n                        isnull(sum(v.ActualHours), 0) as ActualTime,\\r\\n                        isnull(sum(sum(v.ActualHours)) OVER (ORDER BY pym.YearMonth), 0) AS ActualTimeRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHours)) OVER (), 0) AS ActualTimeGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursCost), 0) as ActualCost,\\r\\n                        isnull(sum(sum(v.ActualHoursCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualCostRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursCost)) OVER (), 0) AS ActualCostGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursSell), 0) as ActualSell,\\r\\n                        isnull(sum(sum(v.ActualHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualSellRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursSell)) OVER (), 0) AS ActualSellGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursBillable), 0) as ActualBillableTime,\\r\\n                        isnull(sum(sum(v.ActualHoursBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableTimeRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursBillable)) OVER (), 0) AS ActualBillableTimeGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursBillableCost), 0) as ActualBillableCost,\\r\\n                        isnull(sum(sum(v.ActualHoursBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableCostRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursBillableCost)) OVER (), 0) AS ActualBillableCostGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursBillableSell), 0) as ActualBillableSell,\\r\\n                        isnull(sum(sum(v.ActualHoursBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableSellRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursBillableSell)) OVER (), 0) AS ActualBillableSellGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursNonBillable), 0) as ActualNonBillableTime,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableTimeRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillable)) OVER (), 0) AS ActualNonBillableTimeGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursNonBillableCost), 0) as ActualNonBillableCost,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableCostRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (), 0) AS ActualNonBillableCostGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursNonBillableSell), 0) as ActualNonBillableSell,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableSellRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (), 0) AS ActualNonBillableSellGrandTotal,\\r\\n                        isnull(sum(v.ForecastHours), 0) as ForecastTime,\\r\\n                        isnull(sum(sum(v.ForecastHours)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastTimeRunningTotal,\\r\\n                        isnull(sum(sum(v.ForecastHours)) OVER (), 0) AS ForecastTimeGrandTotal,\\r\\n                        isnull(sum(v.ForecastHoursSell), 0) as ForecastSell,\\r\\n                        isnull(sum(sum(v.ForecastHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastSellRunningTotal,\\r\\n                        isnull(sum(sum(v.ForecastHoursSell)) OVER (), 0) AS ForecastSellGrandTotal,\\r\\n                        isnull(sum(v.AllocatedHours), 0) as AllocatedTime,\\r\\n                        isnull(sum(sum(v.AllocatedHours)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedTimeRunningTotal,\\r\\n                        isnull(sum(sum(v.AllocatedHours)) OVER (), 0) AS AllocatedTimeGrandTotal,\\r\\n                        isnull(sum(v.AllocatedHoursSell), 0) as AllocatedSell,\\r\\n                        isnull(sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedSellRunningTotal,\\r\\n                        isnull(sum(sum(v.AllocatedHoursSell)) OVER (), 0) AS AllocatedSellGrandTotal\\r\\n                from\\tProjectYearMonths pym\\r\\n                        left outer join SkillAnalyticsBurnRate v on \\r\\n                            (v.ProjectId = pym.ProjectId and \\r\\n                                v.[Year] is not null and \\r\\n                                v.[Month] is not null and \\r\\n                                cast(concat(v.[Year], FORMAT(v.[Month], '0#')) as int) = pym.YearMonth),\\r\\n                        Project p,\\r\\n                        CommercialClient cc\\r\\n                where\\tpym.ProjectId = p.Oid and \\r\\n                        p.Client = cc.Oid\\r\\n                        /*[ProjectFilter]*/ and pym.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                group by pym.[Year],\\r\\n                        pym.[Month],\\r\\n                        pym.YearMonth\\r\\n    ) v,\\r\\n    PlannedAndContracted pc\\r\\n) v\\r\\n    left outer join Analytics.[Authorization](@CurrentUserId) n ON (n.RoleName = 'RateCardRead')\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Burn_Rate_By_Project_Per_Year_Month/execute","Configuration":"{\n    \"size\": {\n        \"height\": 250\n    },\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"MonthYear\",\n        \"ignoreEmptyPoints\": false\n    },\n    \"panes\": [\n        {\n            \"name\": \"accumulated\"\n        },\n        {\n            \"name\": \"monthly\"\n        }\n    ],\n    \"series\": [\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"area\",\n            \"valueField\": \"ForecastSell\",\n            \"name\": \"Planned Revenue\"\n        },\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualCost\",\n            \"name\": \"Actual Cost\",\n            \"point\": {\n                \"size\": 6\n            }\n        },\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"area\",\n            \"valueField\": \"ForecastSellRunningTotal\",\n            \"name\": \"# Planned Revenue\"\n        },\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualCostRunningTotal\",\n            \"name\": \"# Actual Cost\",\n            \"point\": {\n                \"size\": 6\n            }\n        }\n    ],\n    \"valueAxis\": [\n        {\n            \"name\": \"monthly\",\n            \"position\": \"left\"\n        },\n        {\n            \"name\": \"accumulated\",\n            \"position\": \"left\"\n        }\n    ],\n    \"legend\": {\n        \"rowCount\": 1,\n        \"verticalAlignment\": \"bottom\",\n        \"horizontalAlignment\": \"center\"\n    }\n}","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda"},{"Id":"0c241dd6-e412-40b4-853b-231a3e4394a8","Name":"Department Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":5,"Parameters":"[{\"WidgetSubTitle\":\"Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":24,\"WidgetYPosition\":31,\"WidgetRows\":15,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Actual (Billable)\",\"metricFieldValue\":\"DirectHoursGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual (Non Billable)\",\"metricFieldValue\":\"NewBusinessHoursGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select [TOP_MACRO] v.*,\\r\\n                       sum(DirectHours) over (order by v.DepartmentId) as DirectHoursRunningTotal,\\r\\n                       sum(DirectHours) over () as DirectHoursGrandTotal,\\r\\n                       sum(NewBusinessHours) over (order by v.DepartmentId) as NewBusinessHoursRunningTotal,\\r\\n                       sum(NewBusinessHours) over () as NewBusinessHoursGrandTotal,\\r\\n                       sum(AdministrativeHours) over (order by v.DepartmentId) as AdministrativeHoursRunningTotal,\\r\\n                       sum(AdministrativeHours) over () as AdministrativeHoursGrandTotal,\\r\\n                       sum(TimeOffHours) over (order by v.DepartmentId) as TimeOffHoursRunningTotal,\\r\\n                       sum(TimeOffHours) over () as TimeOffHoursGrandTotal,\\r\\n                       sum(TotalHours) over () as GlobalTotalHours\\r\\n                    from\\r\\n                    (\\r\\n                       select t.[DepartmentId],\\r\\n                             t.[Department] as DepartmentName,\\r\\n                             isnull(t.DirectHours, 0.0) as DirectHours,\\r\\n                             isnull(t.NewBusinessHours, 0.0) as NewBusinessHours,\\r\\n                             isnull(t.AdministrativeHours, 0.0) as AdministrativeHours,\\r\\n                             isnull(uv.TimeOffHours, 0.0) as TimeOffHours,\\r\\n                             isnull(t.[Hours], 0.0) + isnull(uv.TimeOffHours, 0.0) as TotalHours\\r\\n                       from\\r\\n                       (\\r\\n                          select t.[DepartmentId],\\r\\n                                t.[Department],\\r\\n                                sum(t.[Hours]) as [Hours],\\r\\n                                (sum(t.[Hours]) - (sum(t.NewBusinessHours) + sum(t.AdministrativeHours))) as DirectHours,\\r\\n                                sum(t.NewBusinessHours) as NewBusinessHours,\\r\\n                                sum(AdministrativeHours) as AdministrativeHours\\r\\n                          from   SkillAnalyticsTimeUtilization t\\r\\n                          where\\t 1 = 1\\r\\n\\t\\t\\t\\t\\t\\t/*[ProjectFilter]*/ and t.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                          group by t.[DepartmentId],\\r\\n                                t.[Department]\\r\\n                       ) t\\r\\n                       left outer join \\r\\n                       (\\r\\n                          select uv.[DepartmentId],\\r\\n                                uv.[Department],\\r\\n                                sum(uv.[Hours]) as TimeOffHours\\r\\n                          from   SkillAnalyticsLeaves uv\\r\\n\\t                      where\\t 1 = 1\\r\\n                          group by uv.[DepartmentId],\\r\\n                                uv.[Department]\\r\\n                       )\\r\\n                       uv on (uv.[DepartmentId] = t.DepartmentId)\\r\\n                    ) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Time_Utilization_Per_Department/execute","Configuration":"{\n    \"rotated\": true,\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"DepartmentName\",\n        \"type\": \"bar\",\n        \"ignoreEmptyPoints\": true,\n        \"valueField\": \"DirectHours\"\n    },\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        }\n    },\n    \"seriesTemplate\": {\n        \"nameField\": \"DepartmentName\"\n    },\n    \"size\": {\n        \"height\": 200\n    }\n}","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda"},{"Id":"838a6099-414a-498a-9563-5da5f6cddeb1","Name":"Typology Group Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":6,"Parameters":"[{\"WidgetSubTitle\":\"Forecast vs Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":46,\"WidgetRows\":15,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Forecast\",\"metricFieldValue\":\"ForecastTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual (Billable)\",\"metricFieldValue\":\"ActualBillableGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual (Non Billable)\",\"metricFieldValue\":\"ActualNonBillableGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"With ProjectYearMonths As\\r\\n                                (\\r\\n\\t                                select @ProjectId as ProjectId, \\r\\n\\t                                ym.* \\r\\n\\t                                from YearsMonths(\\r\\n\\t                                (select p.BeginDate from Project p where p.Oid = @ProjectId), \\r\\n\\t                                (select p.EndDate from Project p where p.Oid = @ProjectId)) ym\\r\\n                                ),\\r\\n                                PlannedAndContracted AS\\r\\n                                (\\r\\n\\t                                select\\tv.UserTypologyGroupId as TypologyGroupId,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHours), 0) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (ORDER BY v.UserTypologyGroupId), 0) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (), 0) AS PlannedGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHoursSell), 0) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (ORDER BY v.UserTypologyGroupId), 0) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (), 0) AS PlannedSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ContractedHours), 0) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (ORDER BY v.UserTypologyGroupId), 0) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (), 0) AS ContractedTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(v.ContractedHoursRate), 0) as ContractedRate \\r\\n\\t\\t\\t                                from\\tSkillAnalyticsBurnRate v\\r\\n\\t                                where\\t1 = 1 \\r\\n\\t\\t\\t                                /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t                                group by v.UserTypologyGroupId\\r\\n                                )\\r\\n                                select\\t(utg.[Name]) as TypologyGroup ,\\r\\n\\t\\t                                v.*,\\r\\n\\t\\t                                pc.PlannedTime,\\r\\n\\t\\t                                pc.PlannedTimeRunningTotal,\\r\\n\\t\\t                                pc.PlannedGrandTotal,\\r\\n\\t\\t                                pc.PlannedSell,\\r\\n\\t\\t                                pc.PlannedSellRunningTotal,\\r\\n\\t\\t                                pc.PlannedSellGrandTotal,\\r\\n\\t\\t                                pc.ContractedTime,\\r\\n\\t\\t                                pc.ContractedTimeRunningTotal,\\r\\n\\t\\t                                pc.ContractedTimeGrandTotal,\\r\\n\\t\\t                                pc.ContractedRate\\r\\n                                from\\r\\n\\t\\t                                (\\r\\n\\t\\t\\t                                select\\tv.UserTypologyGroupId as TypologyGroupId,\\r\\n\\t\\t\\t\\t\\t                                concat(FORMAT(pym.[Month], '0#'), '/', pym.[Year]) as MonthYear,\\r\\n\\t\\t\\t\\t\\t                                pym.YearMonth as MonthYearNumber,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ActualHours), 0) as ActualTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (), 0) AS ActualTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tisnull(sum(sum(v.ActualHoursBillable)) OVER () ,0) AS ActualBillableGrandTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tisnull(sum(sum(v.ActualHoursNonBillable)) OVER () ,0) AS ActualNonBillableGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ActualHoursCost), 0) as ActualCost,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (), 0) AS ActualCostGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ActualHoursSell), 0) as ActualSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (), 0) AS ActualSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ForecastHours), 0) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (), 0) AS ForecastTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ForecastHoursSell), 0) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (), 0) AS ForecastSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(v.PlannedHours), 0) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(sum(v.PlannedHours)) OVER (PARTITION BY v.UserTypologyGroupId), 0) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.AllocatedHours), 0) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (), 0) AS AllocatedTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.AllocatedHoursSell), 0) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (), 0) AS AllocatedSellGrandTotal\\r\\n\\t\\t\\t                                from\\tProjectYearMonths pym\\r\\n\\t\\t\\t\\t\\t                                left outer join SkillAnalyticsBurnRate v on \\r\\n\\t\\t\\t\\t\\t                                (v.ProjectId = pym.ProjectId and \\r\\n\\t\\t\\t\\t\\t\\t                                (\\r\\n\\t\\t\\t\\t\\t\\t\\t                                v.[Year] is not null and\\r\\n\\t\\t\\t\\t\\t\\t\\t                                v.[Month] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t                                (v.[Year] = pym.[Year] and v.[Month] = pym.[Month])\\r\\n\\t\\t\\t\\t\\t\\t                                )\\r\\n\\t\\t\\t\\t\\t                                ),\\r\\n\\t\\t\\t\\t\\t                                Project p,\\r\\n\\t\\t\\t\\t\\t                                CommercialClient cc\\r\\n\\t\\t\\t                                where\\tpym.ProjectId = p.Oid and \\r\\n\\t\\t\\t\\t\\t                                p.Client = cc.Oid\\r\\n\\t\\t\\t\\t\\t                                /*[ProjectFilter]*/ and pym.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t\\t\\t                                group by v.UserTypologyGroupId, \\r\\n\\t\\t\\t\\t\\t                                pym.[Year],\\r\\n\\t\\t\\t\\t\\t                                pym.[Month],\\r\\n\\t\\t\\t\\t\\t                                pym.YearMonth\\r\\n\\t\\t                                ) v,\\r\\n\\t\\t                                PlannedAndContracted pc,\\r\\n\\t\\t                                UserTypologyGroup utg \\r\\n                                where\\tv.TypologyGroupId = utg.Oid and\\r\\n\\t\\t                                v.TypologyGroupId = pc.TypologyGroupId\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Burn_Rate_By_Project_Per_Typology_Group_Per_Year_Month/execute","Configuration":"{\n    \"size\": {\n        \"height\": 200\n    },\n    \"commonSeriesSettings\": {\n        \"ignoreEmptyPoints\": false,\n        \"argumentField\": \"MonthYear\",\n        \"valueField\": \"ActualTime\",\n        \"type\": \"line\",\n        \"point\": {\n            \"size\": 6\n        },\n        \"border\": {\n            \"visible\": true\n        }\n    },\n    \"commonAxisSettings\": {\n        \"grid\": {\n            \"visible\": true\n        },\n        \"discreteAxisDivisionMode\": \"crossLabels\"\n    },\n    \"commonPaneSettings\": {\n        \"border\": {\n            \"visible\": true\n        }\n    },\n    \"seriesTemplate\": {\n        \"nameField\": \"TypologyGroup\"\n    },\n    \"legend\": {\n        \"rowCount\": 1,\n        \"verticalAlignment\": \"bottom\",\n        \"horizontalAlignment\": \"center\"\n    }\n}","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda"},{"Id":"e88ca3fc-331b-4cbb-8388-b5ee96c19e32","Name":"Division Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":4,"Parameters":"[{\"WidgetSubTitle\":\"Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":31,\"WidgetRows\":15,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Actual (Billable)\",\"metricFieldValue\":\"DirectHoursGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual (Non Billable)\",\"metricFieldValue\":\"NewBusinessHoursGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select  v.*,\\r\\n                       sum(DirectHours) over (order by v.DivisionId) as DirectHoursRunningTotal,\\r\\n                       sum(DirectHours) over () as DirectHoursGrandTotal,\\r\\n                       sum(NewBusinessHours) over (order by v.DivisionId) as NewBusinessHoursRunningTotal,\\r\\n                       sum(NewBusinessHours) over () as NewBusinessHoursGrandTotal,\\r\\n                       sum(AdministrativeHours) over (order by v.DivisionId) as AdministrativeHoursRunningTotal,\\r\\n                       sum(AdministrativeHours) over () as AdministrativeHoursGrandTotal,\\r\\n                       sum(TimeOffHours) over (order by v.DivisionId) as TimeOffHoursRunningTotal,\\r\\n                       sum(TimeOffHours) over () as TimeOffHoursGrandTotal,\\r\\n                       sum(TotalHours) over () as GlobalTotalHours\\r\\n                    from\\r\\n                    (\\r\\n                       select t.DivisionId,\\r\\n                             t.Division as DivisionName,\\r\\n                             isnull(t.DirectHours, 0.0) as DirectHours,\\r\\n                             isnull(t.NewBusinessHours, 0.0) as NewBusinessHours,\\r\\n                             isnull(t.AdministrativeHours, 0.0) as AdministrativeHours,\\r\\n                             isnull(uv.TimeOffHours, 0.0) as TimeOffHours,\\r\\n                             isnull(t.[Hours], 0.0) + isnull(uv.TimeOffHours, 0.0) as TotalHours\\r\\n                       from\\r\\n                       (\\r\\n                          select di.Oid as DivisionId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name] as Division,\\r\\n                                sum(t.[Hours]) as [Hours],\\r\\n                                (sum(t.[Hours]) - (sum(t.NewBusinessHours) + sum(t.AdministrativeHours))) as DirectHours,\\r\\n                                sum(t.NewBusinessHours) as NewBusinessHours,\\r\\n                                sum(AdministrativeHours) as AdministrativeHours\\r\\n                          from   SkillAnalyticsTimeUtilization t, Department de, Division di\\r\\n                          where\\t 1 = 1 and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tt.DepartmentId = de.Oid and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tde.Division = di.Oid\\r\\n\\t\\t\\t\\t\\t\\t/*[ProjectFilter]*/ and t.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                          group by di.Oid,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name]\\r\\n                       ) t\\r\\n                       left outer join \\r\\n                       (\\r\\n                          select \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdi.Oid as DivisionId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name] as Division,\\r\\n                                sum(uv.[Hours]) as TimeOffHours\\r\\n                          from   SkillAnalyticsLeaves uv, Department de, Division di\\r\\n\\t                      where\\t 1 = 1 and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tuv.DepartmentId = de.Oid and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tde.Division = di.Oid\\r\\n                          group by di.Oid,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name]\\r\\n                       )\\r\\n                       uv on (uv.DivisionId = t.DivisionId)\\r\\n                    ) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Time_Utilization_Per_Department/execute","Configuration":"{\n    \"rotated\": true,\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"DivisionName\",\n        \"type\": \"bar\",\n        \"ignoreEmptyPoints\": true,\n        \"valueField\": \"DirectHours\"\n    },\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        }\n    },\n    \"seriesTemplate\": {\n        \"nameField\": \"DivisionName\"\n    },\n    \"size\": {\n        \"height\": 200\n    }\n}","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda"},{"Id":"0ff05471-9dde-4abd-8414-cfdf20738c46","Name":"User Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":7,"Parameters":"[{\"WidgetSubTitle\":\"Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":24,\"WidgetYPosition\":46,\"WidgetRows\":15,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Actual (Billable)\",\"metricFieldValue\":\"DirectHoursGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual (Non Billable)\",\"metricFieldValue\":\"NewBusinessHoursGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select [TOP_MACRO] v.*,\\r\\n                       sum(DirectHours) over (order by v.EmployeeId) as DirectHoursRunningTotal,\\r\\n                       sum(DirectHours) over () as DirectHoursGrandTotal,\\r\\n                       sum(NewBusinessHours) over (order by v.EmployeeId) as NewBusinessHoursRunningTotal,\\r\\n                       sum(NewBusinessHours) over () as NewBusinessHoursGrandTotal,\\r\\n                       sum(AdministrativeHours) over (order by v.EmployeeId) as AdministrativeHoursRunningTotal,\\r\\n                       sum(AdministrativeHours) over () as AdministrativeHoursGrandTotal,\\r\\n                       sum(TimeOffHours) over (order by v.EmployeeId) as TimeOffHoursRunningTotal,\\r\\n                       sum(TimeOffHours) over () as TimeOffHoursGrandTotal,\\r\\n                       sum(TotalHours) over () as GlobalTotalHours\\r\\n                    from\\r\\n                    (\\r\\n                       select t.[UserId] as EmployeeId,\\r\\n                             t.[User] as EmployeeName,\\r\\n                             isnull(t.DirectHours, 0.0) as DirectHours,\\r\\n                             isnull(t.NewBusinessHours, 0.0) as NewBusinessHours,\\r\\n                             isnull(t.AdministrativeHours, 0.0) as AdministrativeHours,\\r\\n                             isnull(uv.TimeOffHours, 0.0) as TimeOffHours,\\r\\n                             isnull(t.[Hours], 0.0) + isnull(uv.TimeOffHours, 0.0) as TotalHours\\r\\n                       from\\r\\n                       (\\r\\n                          select t.[UserId],\\r\\n                                t.[User],\\r\\n                                sum(t.[Hours]) as [Hours],\\r\\n                                (sum(t.[Hours]) - (sum(t.NewBusinessHours) + sum(t.AdministrativeHours))) as DirectHours,\\r\\n                                sum(t.NewBusinessHours) as NewBusinessHours,\\r\\n                                sum(AdministrativeHours) as AdministrativeHours\\r\\n                          from   SkillAnalyticsTimeUtilization t\\r\\n\\t                      where\\t 1 = 1\\r\\n                                /*[ProjectFilter]*/ and t.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                          group by t.[UserId],\\r\\n                                t.[User]\\r\\n                       ) t\\r\\n                       left outer join \\r\\n                       (\\r\\n                          select uv.[UserId],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tuv.[User],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tsum(uv.[Hours]) as TimeOffHours\\r\\n                          from   SkillAnalyticsLeaves uv\\r\\n\\t                      where\\t 1 = 1\\r\\n                        group by uv.[UserId],\\r\\n                                uv.[User]\\r\\n                       )\\r\\n                       uv on (uv.[UserId] = t.UserId)\\r\\n                    ) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Time_Utilization_Per_User/execute","Configuration":"{\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"EmployeeName\",\n        \"type\": \"bar\",\n        \"ignoreEmptyPoints\": true,\n        \"valueField\": \"DirectHours\"\n    },\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        }\n    },\n    \"seriesTemplate\": {\n        \"nameField\": \"EmployeeName\"\n    },\n    \"size\": {\n        \"height\": 200\n    },\n    \"palette\": [\n        \"#da5859\",\n        \"#f09777\",\n        \"#a5d7d0\",\n        \"#fbc987\",\n        \"#a5bdd7\",\n        \"#e97c82\",\n        \"#81d4fa\",\n        \"#c5e1a5\",\n        \"#ce93d8\",\n        \"#fff59d\"\n    ],\n    \"legend\": {\n        \"visible\": false\n    },\n    \"tooltip\": {\n        \"enabled\": true,\n        \"customizeTooltip\": \"function(e){  \\n\\t\\treturn {     \\n\\t\\t\\t'text': '<span style=\\\"font-size: 14px; color: #808080;\\\">' +  e.argumentText + '</span><br/><span style=\\\"color: '+ e.point.getColor() +'\\\">' +  Math.round(Math.abs(e.value)*100)/100 + '</span>'    \\n\\t\\t};   }\"\n    }\n}","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda"},{"Id":"10f0aaaf-98bd-4814-ac12-efd0b11a58db","Name":"Time Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":2,"Parameters":"[{\"WidgetSubTitle\":\"Contracted vs Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":15,\"WidgetRows\":16,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Contracted\",\"metricFieldValue\":\"ContractedTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual (Billable)\",\"metricFieldValue\":\"ActualBillableTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual (Non Billable)\",\"metricFieldValue\":\"ActualNonBillableTimeGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"With ProjectYearMonths As\\r\\n                                (\\r\\n\\t                                select @ProjectId as ProjectId, \\r\\n\\t                                ym.* \\r\\n\\t                                from YearsMonths(\\r\\n\\t                                (select p.BeginDate from Project p where p.Oid = @ProjectId), \\r\\n\\t                                (select p.EndDate from Project p where p.Oid = @ProjectId)) ym\\r\\n                                ),\\r\\n                                PlannedAndContracted AS\\r\\n                                (\\r\\n\\t                                select\\tv.[Year],\\r\\n\\t\\t\\t                                v.[Month],\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHours), 0) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (), 0) AS PlannedGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHoursSell), 0) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (), 0) AS PlannedSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ContractedHours), 0) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (), 0) AS ContractedTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(v.ContractedHoursRate), 0) as ContractedRate \\r\\n\\t\\t\\t                                from\\tSkillAnalyticsBurnRate v\\r\\n\\t                                where\\tv.[Year] is null and v.[Month] is null \\r\\n\\t\\t\\t                                /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t                                group by v.[Year],\\r\\n\\t\\t\\t                                v.[Month]\\r\\n                                )\\r\\n                                select\\tv.*,\\r\\n\\t\\t                                pc.PlannedTime,\\r\\n\\t\\t                                pc.PlannedTimeRunningTotal,\\r\\n\\t\\t                                pc.PlannedGrandTotal,\\r\\n\\t\\t                                pc.PlannedSell,\\r\\n\\t\\t                                pc.PlannedSellRunningTotal,\\r\\n\\t\\t                                pc.PlannedSellGrandTotal,\\r\\n\\t\\t                                pc.ContractedTime,\\r\\n\\t\\t                                pc.ContractedTimeRunningTotal,\\r\\n\\t\\t                                pc.ContractedTimeGrandTotal,\\r\\n\\t\\t                                pc.ContractedRate\\r\\n                                from\\r\\n\\t\\t                                (\\r\\n                                            select\\tconcat(FORMAT(pym.[Month], '0#'), '/', pym.[Year]) as MonthYear,\\r\\n\\t\\t                                                pym.YearMonth as MonthYearNumber,\\r\\n\\t\\t                                                isnull(sum(v.ActualHours), 0) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (ORDER BY pym.YearMonth), 0) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (), 0) AS ActualTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursCost), 0) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (), 0) AS ActualCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursSell), 0) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (), 0) AS ActualSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillable), 0) as ActualBillableTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillable)) OVER (), 0) AS ActualBillableTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillableCost), 0) as ActualBillableCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableCost)) OVER (), 0) AS ActualBillableCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillableSell), 0) as ActualBillableSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableSell)) OVER (), 0) AS ActualBillableSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillable), 0) as ActualNonBillableTime,\\r\\n                                                        isnull(sum(sum(v.ActualHoursNonBillable)) OVER (), 0) AS ActualNonBillableTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableTimeRunningTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillableCost), 0) as ActualNonBillableCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (), 0) AS ActualNonBillableCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillableSell), 0) as ActualNonBillableSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (), 0) AS ActualNonBillableSellGrandTotal,\\r\\n                                                        isnull(sum(v.ForecastHours), 0) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (), 0) AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ForecastHoursSell), 0) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (), 0) AS ForecastSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.AllocatedHours), 0) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (), 0) AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.AllocatedHoursSell), 0) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (), 0) AS AllocatedSellGrandTotal\\r\\n                                                from\\tProjectYearMonths pym\\r\\n\\t\\t\\t\\t\\t\\t                                left outer join SkillAnalyticsBurnRate v on \\r\\n\\t\\t\\t\\t\\t\\t\\t                                (v.ProjectId = pym.ProjectId and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                v.[Year] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                v.[Month] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                cast(concat(v.[Year], FORMAT(v.[Month], '0#')) as int) = pym.YearMonth),\\r\\n\\t\\t\\t\\t\\t\\t                                Project p,\\r\\n\\t\\t\\t\\t\\t\\t                                CommercialClient cc\\r\\n                                                where\\tpym.ProjectId = p.Oid and \\r\\n\\t\\t                                                p.Client = cc.Oid\\r\\n\\t\\t                                                /*[ProjectFilter]*/ and pym.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                group by pym.[Year],\\r\\n\\t\\t                                                pym.[Month],\\r\\n\\t\\t\\t\\t\\t\\t                                pym.YearMonth\\r\\n\\t                                ) v,\\r\\n\\t                                PlannedAndContracted pc\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Burn_Rate_By_Project_Per_Year_Month/execute","Configuration":"{\n    \"size\": {\n        \"height\": 250\n    },\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"MonthYear\",\n        \"ignoreEmptyPoints\": false\n    },\n    \"panes\": [\n        {\n            \"name\": \"accumulated\"\n        },\n        {\n            \"name\": \"monthly\"\n        }\n    ],\n    \"series\": [\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"bar\",\n            \"valueField\": \"ContractedTime\",\n            \"name\": \"Contracted Time\"\n        },\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualTime\",\n            \"name\": \"Actual Time\",\n            \"point\": {\n                \"size\": 6\n            }\n        },\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"bar\",\n            \"valueField\": \"ContractedTimeRunningTotal\",\n            \"name\": \"# Contracted Time\"\n        },\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualTimeRunningTotal\",\n            \"name\": \"# Actual Time\",\n            \"point\": {\n                \"size\": 6\n            }\n        }\n    ],\n    \"valueAxis\": [\n        {\n            \"name\": \"monthly\",\n            \"position\": \"left\"\n        },\n        {\n            \"name\": \"accumulated\",\n            \"position\": \"left\"\n        }\n    ],\n    \"legend\": {\n        \"rowCount\": 1,\n        \"verticalAlignment\": \"bottom\",\n        \"horizontalAlignment\": \"center\"\n    }\n}","DashboardDefinitionId":"f8fbeb8c-7c46-4829-9b05-ca7ee4520cda"}]}
