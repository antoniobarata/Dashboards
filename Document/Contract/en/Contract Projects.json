{
    "DashboardDefinitionRoles": [],
    "Id": "638ca763-5ded-4ad9-ae61-606def94869c",
    "Name": "Projects Dashboard",
    "Active": true,
    "Location": 1,
    "DocumentId": "c3814c67-0e7d-4d2a-9ffe-e0e932201a97",
    "DocumentName": "Contract",
    "DocumentsConfiguration": null,
    "Templates": [],
    "DashboardDefinitionComponents": [
        {
            "Id": "a95b13a1-f36b-4036-bc8b-07957469a7c9",
            "Name": "Typology Group Actual Time",
            "Active": true,
            "UseQuery": false,
            "Query": null,
            "Size": 4,
            "Order": 3,
            "Parameters": "[\n    {\n        \"WidgetSubTitle\": \"Actual Time\",\n        \"WidgetType\": \"pie\",\n        \"WidgetFilterField\": \"\",\n        \"WidgetColor\": \"#efefef\",\n        \"WidgetHeight\": \"\",\n        \"WidgetHeader\": {\n            \"showContextInfo\": false,\n            \"WidgetPeriodChooser\": {\n                \"type\": \"year\",\n                \"visible\": false\n            } ,\n            \"WidgetMetrics\": {\n                \"visible\": true,\n                \"Metrics\": [\n                    {\n                        \"visible\": true,\n                        \"metricName\": \"# Planned\",\n                        \"metricFieldValue\": \"PlannedTimeGrandTotal\"\n                    } ,\n                    {\n                        \"visible\": true,\n                        \"metricName\": \"# Actual\",\n                        \"metricFieldValue\": \"ActualTimeGrandTotal\"\n                    } \n                ]\n            } ,\n            \"showSubTitle\": true,\n            \"showTitle\": true\n        } ,\n        \"WidgetDataSources\": {\n            \"main\": {\n                \"type\": \"querytext\",\n                \"value\": \"select\\tv.*,\\r\\n\\t\\t                                    iif(v.ActualCostGrandTotal \u003e 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage,\\r\\n\\t\\t                                    (v.ForecastSell - v.ActualCost) as ForecastProfit,\\r\\n\\t\\t                                    (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ForecastSellGrandTotal \u003e 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage,\\r\\n\\t\\t                                    (v.PlannedSell - v.ActualCost) as PlannedProfit,\\r\\n\\t\\t                                    (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.PlannedSellGrandTotal \u003e 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage,\\r\\n\\t\\t                                    (v.ContractedSell - v.ActualCost) as ContractedProfit,\\r\\n\\t\\t                                    (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ContractedSellGrandTotal \u003e 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage\\r\\n                                    from\\r\\n                                    (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t    select\\ttg.Oid as TypologyGroupId, \\r\\n                                                tg.[Name] as TypologyGroup,\\r\\n\\t\\t                                        sum(v.ActualHours) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER (ORDER BY tg.[Oid]) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursCost) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER (ORDER BY tg.[Oid]) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursSell) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER (ORDER BY tg.[Oid]) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHours) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER (ORDER BY tg.[Oid]) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHoursSell) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER (ORDER BY tg.[Oid]) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHours) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER (ORDER BY tg.[Oid]) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHoursSell) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY tg.[Oid]) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHours) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER (ORDER BY tg.[Oid]) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHoursSell) as ContractedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER (ORDER BY tg.[Oid]) AS ContractedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal,\\r\\n\\t\\t                                        max(v.ContractedHoursRate) as ContractedRate, \\r\\n\\t\\t                                        sum(v.PlannedHours) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER (ORDER BY tg.[Oid]) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.PlannedHoursSell) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER (ORDER BY tg.[Oid]) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal,\\r\\n\\t\\t                                        max(v.PlannedHoursRate) as PlannedRate \\r\\n                                        from\\tSkillAnalyticsBurnRate v, \\r\\n\\t\\t                                        UserTypologyGroup tg,\\r\\n\\t\\t                                        Project p,\\r\\n\\t\\t                                        CommercialClient cc,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUserUsers_CompanyCompanies uucc\\r\\n                                        where\\tv.ProjectId = p.Oid and \\r\\n\\t\\t                                        p.Client = cc.Oid and\\r\\n                                    \\t        v.UserTypologyGroupId = tg.Oid and \\r\\n\\t\\t                                        v.ProjectId = p.Oid \\r\\n\\t\\t\\t\\t                                /*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/\\r\\n\\t\\t                                        /*[ClientFilter]*/ and cc.Oid = @ClientId /*[/ClientFilter]*/\\r\\n\\t\\t                                        /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tand uucc.Users = @CurrentUserId and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuucc.Companies = p.Company\\r\\n                                        group by tg.Oid,\\r\\n                                                tg.[Name]\\r\\n                                    ) v\"\n            } \n        } ,\n        \"Filters\": {} ,\n        \"QueryConfiguration\": {\n            \"RequiredFilters\": [\n                \"projectId\"\n            ]\n        } \n    } \n]",
            "DashboardComponentType": {
                "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            } ,
            "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_TypologyGroup/execute",
            "Configuration": "{\n  \"type\": \"doughnut\",\n  \"series\": {\n    \"argumentField\": \"TypologyGroup\",\n    \"valueField\": \"ActualTime\",\n    \"label\": {\n      \"visible\": false,\n      \"format\": \"fixedPoint\",\n      \"connector\": {\n        \"visible\": true,\n        \"width\": 1\n      } \n    } ,\n    \"smallValuesGrouping\": {\n        \"mode\": \"topN\",\n        \"topCount\": 10\n    } \n  } ,\n  \"size\": {\n    \"height\": 250\n  } ,\n  \"legend\": {\n    \"horizontalAlignment\": \"left\",\n    \"verticalAlignment\": \"middle\",\n    \"itemTextPosition\" : \"right\",\n    \"paddingLeftRight\" : 0,\n    \"font\":{\"size\":8} \n  } \n} ",
            "DashboardDefinitionId": "638ca763-5ded-4ad9-ae61-606def94869c"
        } ,
        {
            "Id": "ba961d47-26f5-4812-a1e4-364e776d2a39",
            "Name": "Projects",
            "Active": true,
            "UseQuery": false,
            "Query": null,
            "Size": 12,
            "Order": 1,
            "Parameters": "[{\"WidgetSubTitle\":\"All Projects\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"ProjectId\",\"WidgetColor\":\"\",\"WidgetHeight\":\"200\",\"WidgetHeader\":{\"showContextInfo\":false,\"showPeriodChooser\":false,\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Planned\",\"metricFieldValue\":\"PlannedTimeGrandTotal\"} ,{\"visible\":true,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"} ,{\"visible\":true,\"metricName\":\"# Revenue\",\"metricFieldValue\":\"PlannedSellGrandTotal\"} ,{\"visible\":true,\"metricName\":\"# Cost\",\"metricFieldValue\":\"ActualCostGrandTotal\"} ]} ,\"showSubTitle\":true,\"showTitle\":true} ,\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\tv.*,\\r\\n\\t\\t                                    iif(v.ActualCostGrandTotal \u003e 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage,\\r\\n\\t\\t                                    (v.ForecastSell - v.ActualCost) as ForecastProfit,\\r\\n\\t\\t                                    (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ForecastSellGrandTotal \u003e 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage,\\r\\n\\t\\t                                    (v.PlannedSell - v.ActualCost) as PlannedProfit,\\r\\n\\t\\t                                    (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.PlannedSellGrandTotal \u003e 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage,\\r\\n\\t\\t                                    (v.ContractedSell - v.ActualCost) as ContractedProfit,\\r\\n\\t\\t                                    (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ContractedSellGrandTotal \u003e 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage\\r\\n                                    from\\r\\n                                    (\\r\\n                                        select\\tp.Oid as ProjectId,\\r\\n                                                p.[Name] as Project,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ws.[Name] as Stage,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ws.[Color] as StageColor, \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pc.[Name] as Classification,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pn.[Name] as [Type],\\r\\n\\t\\t\\t\\t                                sum(v.ActualHours) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER (ORDER BY p.[Oid]) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursCost) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER (ORDER BY p.[Oid]) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursSell) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER (ORDER BY p.[Oid]) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHours) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER (ORDER BY p.[Oid]) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHoursSell) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER (ORDER BY p.[Oid]) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHours) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER (ORDER BY p.[Oid]) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHoursSell) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY p.[Oid]) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHours) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER (ORDER BY p.[Oid]) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHoursSell) as ContractedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER (ORDER BY p.[Oid]) AS ContractedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal,\\r\\n\\t\\t                                        max(v.ContractedHoursRate) as ContractedRate, \\r\\n\\t\\t                                        sum(v.PlannedHours) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER (ORDER BY p.[Oid]) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.PlannedHoursSell) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER (ORDER BY p.[Oid]) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal,\\r\\n\\t\\t                                        max(v.PlannedHoursRate) as PlannedRate \\r\\n                                        from\\tSkillAnalyticsBurnRate v, \\r\\n\\t\\t                                        Project p,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    WorkflowState ws,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ProjectClassification pc,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ProjectNature pn,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUserUsers_CompanyCompanies uucc\\r\\n                                        where\\tv.ProjectId = p.Oid and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ws.Oid = p.WorkflowState and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pc.Oid = p.Classification and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pn.Oid = p.ProjectNature\\r\\n\\t\\t\\t\\t                                --/*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/\\r\\n\\t\\t                                        --/*[ClientFilter]*/ and p.Client = @ClientId /*[/ClientFilter]*/\\r\\n\\t\\t                                        --/*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tand uucc.Users = @CurrentUserId and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuucc.Companies = p.Company\\r\\n                                        group by p.Oid,\\r\\n                                                p.[Name],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ws.[Name],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ws.[Color], \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pc.[Name],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pn.[Name]\\r\\n                                    ) v\"} } ,\"Filters\":{} ,\"QueryConfiguration\":{\"Sort\":{\"Type\":1,\"FieldName\":\"MonthYearNumber\"} } } ]",
            "DashboardComponentType": {
                "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            } ,
            "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_Project/execute",
            "Configuration": "{\n  \"selection\": {\n    \"mode\": \"single\"\n  } ,\n  \"height\": 250,\n  \"columnsAutoWidth\": true,\n  \"allowColumnResizing\": true,\n  \"columnResizingMode\": \"nextColumn\",\n  \"columnMinWidth\": 50,\n  \"scrolling\": {\n    \"mode\": \"virtual\"\n  } ,\n  \"columns\": [\n    \"Project\",\n    {\n      \"dataField\": \"ActualTime\",\n      \"caption\": \"Actual\",\n      \"format\": \"#,##0.00\"\n    } ,\n    {\n      \"dataField\": \"ActualCost\",\n      \"caption\": \"Cost\",\n      \"format\": {\n        \"type\": \"currency\",\n        \"precision\": 2\n      } \n    } ,\n    {\n      \"dataField\": \"PlannedTime\",\n      \"caption\": \"Planned\",\n      \"format\": \"#,##0.00\"\n    } ,\n    {\n      \"dataField\": \"PlannedSell\",\n      \"caption\": \"Planned Revenue\",\n      \"format\": {\n        \"type\": \"currency\",\n        \"precision\": 2\n      } \n    } ,\n    {\n      \"dataField\": \"PlannedProfitPercentage\",\n      \"caption\": \"Contribution Margin %\",\n  \"dataType\":\"number\",\n \"format\": \"0.00 \u0027%\u0027\"\n    } ,\n{\n      \"dataField\": \"ContractedTime\",\n      \"caption\": \"Contracted\",\n      \"format\": \"#,##0.00\"\n    } \n  ],\n  \"summary\": {\n    \"totalItems\": [\n      {\n        \"column\": \"Project\",\n        \"summaryType\": \"count\"\n      } ,\n      {\n        \"column\": \"ActualTime\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0.00\",\n        \"displayFormat\": \"{0} \"\n      } ,\n      {\n        \"column\": \"ActualCost\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": {\n          \"type\": \"currency\",\n          \"precision\": 2\n        } ,\n        \"displayFormat\": \"{0} \"\n      } ,\n      {\n        \"column\": \"PlannedTime\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0.00\",\n        \"displayFormat\": \"{0} \"\n      } ,\n      {\n        \"column\": \"PlannedSell\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": {\n          \"type\": \"currency\",\n          \"precision\": 2\n        } ,\n        \"displayFormat\": \"{0} \"\n      } ,\n      {\n        \"column\": \"ContractedTime\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0.00\",\n        \"displayFormat\": \"{0} \"\n      } \n    ]\n  } \n} ",
            "DashboardDefinitionId": "638ca763-5ded-4ad9-ae61-606def94869c"
        } ,
        {
            "Id": "f1313fab-ff48-4f84-a508-adfa84e75fd8",
            "Name": "Typology Group Contracted Time",
            "Active": true,
            "UseQuery": false,
            "Query": null,
            "Size": 4,
            "Order": 4,
            "Parameters": "[\n    {\n        \"WidgetSubTitle\": \"Contracted Time\",\n        \"WidgetType\": \"pie\",\n        \"WidgetFilterField\": \"\",\n        \"WidgetColor\": \"#efefef\",\n        \"WidgetHeight\": \"\",\n        \"WidgetHeader\": {\n            \"showContextInfo\": false,\n            \"WidgetPeriodChooser\": {\n                \"type\": \"year\",\n                \"visible\": false\n            } ,\n            \"WidgetMetrics\": {\n                \"visible\": true,\n                \"Metrics\": [\n                    {\n                        \"visible\": true,\n                        \"metricName\": \"# Contracted\",\n                        \"metricFieldValue\": \"ContractedTimeGrandTotal\"\n                    } ,\n                    {\n                        \"visible\": true,\n                        \"metricName\": \"# Planned\",\n                        \"metricFieldValue\": \"PlannedTimeGrandTotal\"\n                    } ,\n                    {\n                        \"visible\": true,\n                        \"metricName\": \"# Actual\",\n                        \"metricFieldValue\": \"ActualTimeGrandTotal\"\n                    } \n                ]\n            } ,\n            \"showSubTitle\": true,\n            \"showTitle\": true\n        } ,\n        \"WidgetDataSources\": {\n            \"main\": {\n                \"type\": \"querytext\",\n                \"value\": \"select\\tv.*,\\r\\n\\t\\t                                    iif(v.ActualCostGrandTotal \u003e 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage,\\r\\n\\t\\t                                    (v.ForecastSell - v.ActualCost) as ForecastProfit,\\r\\n\\t\\t                                    (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ForecastSellGrandTotal \u003e 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage,\\r\\n\\t\\t                                    (v.PlannedSell - v.ActualCost) as PlannedProfit,\\r\\n\\t\\t                                    (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.PlannedSellGrandTotal \u003e 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage,\\r\\n\\t\\t                                    (v.ContractedSell - v.ActualCost) as ContractedProfit,\\r\\n\\t\\t                                    (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ContractedSellGrandTotal \u003e 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage\\r\\n                                    from\\r\\n                                    (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t    select\\ttg.Oid as TypologyGroupId, \\r\\n                                                tg.[Name] as TypologyGroup,\\r\\n\\t\\t                                        sum(v.ActualHours) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER (ORDER BY tg.[Oid]) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursCost) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER (ORDER BY tg.[Oid]) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursSell) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER (ORDER BY tg.[Oid]) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHours) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER (ORDER BY tg.[Oid]) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHoursSell) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER (ORDER BY tg.[Oid]) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHours) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER (ORDER BY tg.[Oid]) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHoursSell) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY tg.[Oid]) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHours) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER (ORDER BY tg.[Oid]) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHoursSell) as ContractedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER (ORDER BY tg.[Oid]) AS ContractedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal,\\r\\n\\t\\t                                        max(v.ContractedHoursRate) as ContractedRate, \\r\\n\\t\\t                                        sum(v.PlannedHours) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER (ORDER BY tg.[Oid]) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.PlannedHoursSell) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER (ORDER BY tg.[Oid]) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal,\\r\\n\\t\\t                                        max(v.PlannedHoursRate) as PlannedRate \\r\\n                                        from\\tSkillAnalyticsBurnRate v, \\r\\n\\t\\t                                        UserTypologyGroup tg,\\r\\n\\t\\t                                        Project p,\\r\\n\\t\\t                                        CommercialClient cc,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUserUsers_CompanyCompanies uucc\\r\\n                                        where\\tv.ProjectId = p.Oid and \\r\\n\\t\\t                                        p.Client = cc.Oid and\\r\\n                                    \\t        v.UserTypologyGroupId = tg.Oid and \\r\\n\\t\\t                                        v.ProjectId = p.Oid \\r\\n\\t\\t\\t\\t                                /*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/\\r\\n\\t\\t                                        /*[ClientFilter]*/ and cc.Oid = @ClientId /*[/ClientFilter]*/\\r\\n\\t\\t                                        /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tand uucc.Users = @CurrentUserId and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuucc.Companies = p.Company\\r\\n                                        group by tg.Oid,\\r\\n                                                tg.[Name]\\r\\n                                    ) v\"\n            } \n        } ,\n        \"Filters\": {} ,\n        \"QueryConfiguration\": {\n            \"RequiredFilters\": [\n                \"projectId\"\n            ]\n        } \n    } \n]",
            "DashboardComponentType": {
                "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            } ,
            "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_TypologyGroup/execute",
            "Configuration": "{\n  \"type\": \"doughnut\",\n  \"series\": {\n    \"argumentField\": \"TypologyGroup\",\n    \"valueField\": \"ContractedTime\",\n    \"label\": {\n      \"visible\": false,\n      \"format\": \"fixedPoint\",\n      \"connector\": {\n        \"visible\": true,\n        \"width\": 1\n      } \n    } ,\n    \"smallValuesGrouping\": {\n        \"mode\": \"topN\",\n        \"topCount\": 10\n    } \n  } ,\n  \"size\": {\n    \"height\": 250\n  } ,\n  \"legend\": {\n    \"horizontalAlignment\": \"left\",\n    \"verticalAlignment\": \"middle\",\n    \"itemTextPosition\" : \"right\",\n    \"paddingLeftRight\" : 0,\n    \"font\":{\"size\":8} \n  } \n} ",
            "DashboardDefinitionId": "638ca763-5ded-4ad9-ae61-606def94869c"
        } ,
        {
            "Id": "c7b31452-7b01-40ce-bf6c-e9348a24a3b5",
            "Name": "Typology Group Planned Time",
            "Active": true,
            "UseQuery": false,
            "Query": null,
            "Size": 4,
            "Order": 2,
            "Parameters": "[\n    {\n        \"WidgetSubTitle\": \"Planned Time\",\n        \"WidgetType\": \"pie\",\n        \"WidgetFilterField\": \"\",\n        \"WidgetColor\": \"#efefef\",\n        \"WidgetHeight\": \"\",\n        \"WidgetHeader\": {\n            \"showContextInfo\": false,\n            \"WidgetPeriodChooser\": {\n                \"type\": \"year\",\n                \"visible\": false\n            } ,\n            \"WidgetMetrics\": {\n                \"visible\": true,\n                \"Metrics\": [\n                    {\n                        \"visible\": true,\n                        \"metricName\": \"# Planned\",\n                        \"metricFieldValue\": \"PlannedTimeGrandTotal\"\n                    } \n                ]\n            } ,\n            \"showSubTitle\": true,\n            \"showTitle\": true\n        } ,\n        \"WidgetDataSources\": {\n            \"main\": {\n                \"type\": \"querytext\",\n                \"value\": \"select\\tv.*,\\r\\n\\t\\t                                    iif(v.ActualCostGrandTotal \u003e 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage,\\r\\n\\t\\t                                    (v.ForecastSell - v.ActualCost) as ForecastProfit,\\r\\n\\t\\t                                    (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ForecastSellGrandTotal \u003e 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage,\\r\\n\\t\\t                                    (v.PlannedSell - v.ActualCost) as PlannedProfit,\\r\\n\\t\\t                                    (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.PlannedSellGrandTotal \u003e 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage,\\r\\n\\t\\t                                    (v.ContractedSell - v.ActualCost) as ContractedProfit,\\r\\n\\t\\t                                    (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) \u003e 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ContractedSellGrandTotal \u003e 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage\\r\\n                                    from\\r\\n                                    (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t    select\\ttg.Oid as TypologyGroupId, \\r\\n                                                tg.[Name] as TypologyGroup,\\r\\n\\t\\t                                        sum(v.ActualHours) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER (ORDER BY tg.[Oid]) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursCost) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER (ORDER BY tg.[Oid]) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursSell) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER (ORDER BY tg.[Oid]) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHours) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER (ORDER BY tg.[Oid]) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHoursSell) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER (ORDER BY tg.[Oid]) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHours) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER (ORDER BY tg.[Oid]) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHoursSell) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY tg.[Oid]) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHours) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER (ORDER BY tg.[Oid]) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHoursSell) as ContractedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER (ORDER BY tg.[Oid]) AS ContractedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal,\\r\\n\\t\\t                                        max(v.ContractedHoursRate) as ContractedRate, \\r\\n\\t\\t                                        sum(v.PlannedHours) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER (ORDER BY tg.[Oid]) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.PlannedHoursSell) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER (ORDER BY tg.[Oid]) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal,\\r\\n\\t\\t                                        max(v.PlannedHoursRate) as PlannedRate \\r\\n                                        from\\tSkillAnalyticsBurnRate v, \\r\\n\\t\\t                                        UserTypologyGroup tg,\\r\\n\\t\\t                                        Project p,\\r\\n\\t\\t                                        CommercialClient cc,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUserUsers_CompanyCompanies uucc\\r\\n                                        where\\tv.ProjectId = p.Oid and \\r\\n\\t\\t                                        p.Client = cc.Oid and\\r\\n                                    \\t        v.UserTypologyGroupId = tg.Oid and \\r\\n\\t\\t                                        v.ProjectId = p.Oid \\r\\n\\t\\t\\t\\t                                /*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/\\r\\n\\t\\t                                        /*[ClientFilter]*/ and cc.Oid = @ClientId /*[/ClientFilter]*/\\r\\n\\t\\t                                        /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tand uucc.Users = @CurrentUserId and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuucc.Companies = p.Company\\r\\n                                        group by tg.Oid,\\r\\n                                                tg.[Name]\\r\\n                                    ) v\"\n            } \n        } ,\n        \"Filters\": {} ,\n        \"QueryConfiguration\": {\n            \"RequiredFilters\": [\n                \"projectId\"\n            ]\n        } \n    } \n]",
            "DashboardComponentType": {
                "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            } ,
            "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_TypologyGroup/execute",
            "Configuration": "{\n  \"type\": \"doughnut\",\n  \"series\": {\n    \"argumentField\": \"TypologyGroup\",\n    \"valueField\": \"ForecastTime\",\n    \"label\": {\n      \"visible\": false,\n      \"format\": \"fixedPoint\",\n      \"connector\": {\n        \"visible\": true,\n        \"width\": 1\n      } \n    } ,\n    \"smallValuesGrouping\": {\n        \"mode\": \"topN\",\n        \"topCount\": 10\n    } \n  } ,\n  \"size\": {\n    \"height\": 250\n  } ,\n  \"legend\": {\n    \"horizontalAlignment\": \"left\",\n    \"verticalAlignment\": \"middle\",\n    \"itemTextPosition\" : \"right\",\n    \"paddingLeftRight\" : 0,\n    \"font\":{\"size\":8} \n  } \n} ",
            "DashboardDefinitionId": "638ca763-5ded-4ad9-ae61-606def94869c"
        } 
    ],
    "Version": 3,
    "Default": true,
    "Dependencies": {
        "DashboardSdk": "1.0.0",
        "Analytics": "1.0.0",
        "SkillsWorkflow": "1.0.0"
    } 
} 
