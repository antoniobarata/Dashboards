{"DashboardDefinitionRoles":[{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"adebf70c-0dab-41d1-8ee8-e78bcc9b09f7","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Account Profile"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","AccessRoleName":"Administrator"}],"Id":"19935c73-9f43-47b3-9cf4-a48c351e5ca2","Name":"Burn - Client","Active":true,"Location":1,"DocumentId":"41e148a1-25c9-4112-8c7e-de4f2087546d","DocumentName":"CommercialClient","DocumentsConfiguration":"{\"entity\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"patch\":{\"endpoint\":\"\",\"model\":[{\"field\":\"\",\"caption\":\"\",\"type\":\"\"}]},\"remove\":{\"endpoint\":\"\"},\"lookup\":{\"endpoint\":\"\"},\"lookupById\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{},\"patch\":{}},\"customDocument\":{\"useCustomStyle\":false,\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemName\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"dashboard\":false}}","Templates":[],"DashboardDefinitionComponents":[{"Id":"1134b65f-faca-4ec7-9266-06f0a859ba99","Name":"Typology Group Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":6,"Parameters":"[{\"WidgetSubTitle\":\"Contracted vs Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetHeight\":200,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Contracted\",\"metricFieldValue\":\"ContractedTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"With ProjectYearMonths As\\r\\n                                (\\r\\n\\t                                select @ProjectId as ProjectId, \\r\\n\\t                                ym.* \\r\\n\\t                                from YearsMonths(\\r\\n\\t                                (select p.BeginDate from Project p where p.Oid = @ProjectId), \\r\\n\\t                                (select p.EndDate from Project p where p.Oid = @ProjectId)) ym\\r\\n                                ),\\r\\n                                PlannedAndContracted AS\\r\\n                                (\\r\\n\\t                                select\\tv.UserTypologyGroupId as TypologyGroupId,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHours), 0) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (ORDER BY v.UserTypologyGroupId), 0) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (), 0) AS PlannedGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHoursSell), 0) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (ORDER BY v.UserTypologyGroupId), 0) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (), 0) AS PlannedSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ContractedHours), 0) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (ORDER BY v.UserTypologyGroupId), 0) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (), 0) AS ContractedTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(v.ContractedHoursRate), 0) as ContractedRate \\r\\n\\t\\t\\t                                from\\tSkillAnalyticsBurnRate v\\r\\n\\t                                where\\t1 = 1 \\r\\n\\t\\t\\t                                /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t                                group by v.UserTypologyGroupId\\r\\n                                )\\r\\n                                select\\t(utg.[Name]) as TypologyGroup ,\\r\\n\\t\\t                                v.*,\\r\\n\\t\\t                                pc.PlannedTime,\\r\\n\\t\\t                                pc.PlannedTimeRunningTotal,\\r\\n\\t\\t                                pc.PlannedGrandTotal,\\r\\n\\t\\t                                pc.PlannedSell,\\r\\n\\t\\t                                pc.PlannedSellRunningTotal,\\r\\n\\t\\t                                pc.PlannedSellGrandTotal,\\r\\n\\t\\t                                pc.ContractedTime,\\r\\n\\t\\t                                pc.ContractedTimeRunningTotal,\\r\\n\\t\\t                                pc.ContractedTimeGrandTotal,\\r\\n\\t\\t                                pc.ContractedRate\\r\\n                                from\\r\\n\\t\\t                                (\\r\\n\\t\\t\\t                                select\\tv.UserTypologyGroupId as TypologyGroupId,\\r\\n\\t\\t\\t\\t\\t                                concat(FORMAT(pym.[Month], '0#'), '/', pym.[Year]) as MonthYear,\\r\\n\\t\\t\\t\\t\\t                                pym.YearMonth as MonthYearNumber,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ActualHours), 0) as ActualTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (), 0) AS ActualTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ActualHoursCost), 0) as ActualCost,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (), 0) AS ActualCostGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ActualHoursSell), 0) as ActualSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (), 0) AS ActualSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ForecastHours), 0) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (), 0) AS ForecastTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ForecastHoursSell), 0) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (), 0) AS ForecastSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(v.PlannedHours), 0) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(sum(v.PlannedHours)) OVER (PARTITION BY v.UserTypologyGroupId), 0) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.AllocatedHours), 0) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (), 0) AS AllocatedTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.AllocatedHoursSell), 0) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (), 0) AS AllocatedSellGrandTotal\\r\\n\\t\\t\\t                                from\\tProjectYearMonths pym\\r\\n\\t\\t\\t\\t\\t                                left outer join SkillAnalyticsBurnRate v on \\r\\n\\t\\t\\t\\t\\t                                (v.ProjectId = pym.ProjectId and \\r\\n\\t\\t\\t\\t\\t\\t                                (\\r\\n\\t\\t\\t\\t\\t\\t\\t                                v.[Year] is not null and\\r\\n\\t\\t\\t\\t\\t\\t\\t                                v.[Month] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t                                (v.[Year] = pym.[Year] and v.[Month] = pym.[Month])\\r\\n\\t\\t\\t\\t\\t\\t                                )\\r\\n\\t\\t\\t\\t\\t                                ),\\r\\n\\t\\t\\t\\t\\t                                Project p,\\r\\n\\t\\t\\t\\t\\t                                CommercialClient cc\\r\\n\\t\\t\\t                                where\\tpym.ProjectId = p.Oid and \\r\\n\\t\\t\\t\\t\\t                                p.Client = cc.Oid\\r\\n\\t\\t\\t\\t\\t                                /*[ProjectFilter]*/ and pym.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t\\t\\t                                group by v.UserTypologyGroupId, \\r\\n\\t\\t\\t\\t\\t                                pym.[Year],\\r\\n\\t\\t\\t\\t\\t                                pym.[Month],\\r\\n\\t\\t\\t\\t\\t                                pym.YearMonth\\r\\n\\t\\t                                ) v,\\r\\n\\t\\t                                PlannedAndContracted pc,\\r\\n\\t\\t                                UserTypologyGroup utg \\r\\n                                where\\tv.TypologyGroupId = utg.Oid and\\r\\n\\t\\t                                v.TypologyGroupId = pc.TypologyGroupId\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Burn_Rate_By_Project_Per_Typology_Group_Per_Year_Month/execute","Configuration":"{\n    \"size\": {\n        \"height\": 200\n    },\n    \"commonSeriesSettings\": {\n        \"ignoreEmptyPoints\": false,\n        \"argumentField\": \"MonthYear\",\n        \"valueField\": \"ActualTime\",\n        \"type\": \"line\",\n        \"point\": {\n            \"size\": 6\n        },\n        \"border\": {\n            \"visible\": true\n        }\n    },\n    \"commonAxisSettings\": {\n        \"grid\": {\n            \"visible\": true\n        },\n        \"discreteAxisDivisionMode\": \"crossLabels\"\n    },\n    \"commonPaneSettings\": {\n        \"border\": {\n            \"visible\": true\n        }\n    },\n    \"seriesTemplate\": {\n        \"nameField\": \"TypologyGroup\"\n    },\n    \"legend\": {\n        \"rowCount\": 1,\n        \"verticalAlignment\": \"bottom\",\n        \"horizontalAlignment\": \"center\"\n    }\n}","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2"},{"Id":"d027cd5d-976b-4591-9bff-172fc6a98782","Name":"Revenue Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":3,"Parameters":"[{\"WidgetSubTitle\":\"Planned Revenue vs Actual Cost\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetHeight\":200,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Revenue\",\"metricFieldValue\":\"ForecastSellGrandTotal\"},{\"visible\":true,\"metricName\":\"# Cost\",\"metricFieldValue\":\"ActualCostGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"With ProjectYearMonths As\\r\\n(\\r\\n    select @ProjectId as ProjectId, \\r\\n    ym.* \\r\\n    from YearsMonths(\\r\\n    (select p.BeginDate from Project p where p.Oid = @ProjectId), \\r\\n    (select p.EndDate from Project p where p.Oid = @ProjectId)) ym\\r\\n),\\r\\nPlannedAndContracted AS\\r\\n(\\r\\n    select\\tv.[Year],\\r\\n            v.[Month],\\r\\n                    isnull(sum(v.PlannedHours), 0) as PlannedTime,\\r\\n                    isnull(sum(sum(v.PlannedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedTimeRunningTotal,\\r\\n                    isnull(sum(sum(v.PlannedHours)) OVER (), 0) AS PlannedGrandTotal,\\r\\n                    isnull(sum(v.PlannedHoursSell), 0) as PlannedSell,\\r\\n                    isnull(sum(sum(v.PlannedHoursSell)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedSellRunningTotal,\\r\\n                    isnull(sum(sum(v.PlannedHoursSell)) OVER (), 0) AS PlannedSellGrandTotal,\\r\\n                    isnull(sum(v.ContractedHours), 0) as ContractedTime,\\r\\n                    isnull(sum(sum(v.ContractedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS ContractedTimeRunningTotal,\\r\\n                    isnull(sum(sum(v.ContractedHours)) OVER (), 0) AS ContractedTimeGrandTotal,\\r\\n                    isnull(max(v.ContractedHoursRate), 0) as ContractedRate \\r\\n            from\\tSkillAnalyticsBurnRate v\\r\\n    where\\tv.[Year] is null and v.[Month] is null \\r\\n            /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n    group by v.[Year],\\r\\n            v.[Month]\\r\\n)\\r\\nselect\\r\\n    v.MonthYear,\\r\\n    IIF(n.RoleId is not null, v.ForecastSell, null) as ForecastSell,\\r\\n    IIF(n.RoleId is not null, v.ActualCost, null) as ActualCost,\\r\\n    IIF(n.RoleId is not null, v.ForecastSellRunningTotal, null) as ForecastSellRunningTotal,\\r\\n    IIF(n.RoleId is not null, v.ActualCostRunningTotal, null) as ActualCostRunningTotal,\\r\\n    IIF(n.RoleId is not null, v.ForecastSellGrandTotal, null) as ForecastSellGrandTotal,\\r\\n    IIF(n.RoleId is not null, v.ActualCostGrandTotal, null) as ActualCostGrandTotal\\r\\nfrom\\r\\n(\\r\\n    select\\tv.*,\\r\\n        pc.PlannedTime,\\r\\n        pc.PlannedTimeRunningTotal,\\r\\n        pc.PlannedGrandTotal,\\r\\n        pc.PlannedSell,\\r\\n        pc.PlannedSellRunningTotal,\\r\\n        pc.PlannedSellGrandTotal,\\r\\n        pc.ContractedTime,\\r\\n        pc.ContractedTimeRunningTotal,\\r\\n        pc.ContractedTimeGrandTotal,\\r\\n        pc.ContractedRate\\r\\n    from\\r\\n        (\\r\\n            select\\tconcat(FORMAT(pym.[Month], '0#'), '/', pym.[Year]) as MonthYear,\\r\\n                        pym.YearMonth as MonthYearNumber,\\r\\n                        isnull(sum(v.ActualHours), 0) as ActualTime,\\r\\n                        isnull(sum(sum(v.ActualHours)) OVER (ORDER BY pym.YearMonth), 0) AS ActualTimeRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHours)) OVER (), 0) AS ActualTimeGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursCost), 0) as ActualCost,\\r\\n                        isnull(sum(sum(v.ActualHoursCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualCostRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursCost)) OVER (), 0) AS ActualCostGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursSell), 0) as ActualSell,\\r\\n                        isnull(sum(sum(v.ActualHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualSellRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursSell)) OVER (), 0) AS ActualSellGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursBillable), 0) as ActualBillableTime,\\r\\n                        isnull(sum(sum(v.ActualHoursBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableTimeRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursBillable)) OVER (), 0) AS ActualBillableTimeGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursBillableCost), 0) as ActualBillableCost,\\r\\n                        isnull(sum(sum(v.ActualHoursBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableCostRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursBillableCost)) OVER (), 0) AS ActualBillableCostGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursBillableSell), 0) as ActualBillableSell,\\r\\n                        isnull(sum(sum(v.ActualHoursBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableSellRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursBillableSell)) OVER (), 0) AS ActualBillableSellGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursNonBillable), 0) as ActualNonBillableTime,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableTimeRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillable)) OVER (), 0) AS ActualNonBillableTimeGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursNonBillableCost), 0) as ActualNonBillableCost,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableCostRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (), 0) AS ActualNonBillableCostGrandTotal,\\r\\n                        isnull(sum(v.ActualHoursNonBillableSell), 0) as ActualNonBillableSell,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableSellRunningTotal,\\r\\n                        isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (), 0) AS ActualNonBillableSellGrandTotal,\\r\\n                        isnull(sum(v.ForecastHours), 0) as ForecastTime,\\r\\n                        isnull(sum(sum(v.ForecastHours)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastTimeRunningTotal,\\r\\n                        isnull(sum(sum(v.ForecastHours)) OVER (), 0) AS ForecastTimeGrandTotal,\\r\\n                        isnull(sum(v.ForecastHoursSell), 0) as ForecastSell,\\r\\n                        isnull(sum(sum(v.ForecastHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastSellRunningTotal,\\r\\n                        isnull(sum(sum(v.ForecastHoursSell)) OVER (), 0) AS ForecastSellGrandTotal,\\r\\n                        isnull(sum(v.AllocatedHours), 0) as AllocatedTime,\\r\\n                        isnull(sum(sum(v.AllocatedHours)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedTimeRunningTotal,\\r\\n                        isnull(sum(sum(v.AllocatedHours)) OVER (), 0) AS AllocatedTimeGrandTotal,\\r\\n                        isnull(sum(v.AllocatedHoursSell), 0) as AllocatedSell,\\r\\n                        isnull(sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedSellRunningTotal,\\r\\n                        isnull(sum(sum(v.AllocatedHoursSell)) OVER (), 0) AS AllocatedSellGrandTotal\\r\\n                from\\tProjectYearMonths pym\\r\\n                        left outer join SkillAnalyticsBurnRate v on \\r\\n                            (v.ProjectId = pym.ProjectId and \\r\\n                                v.[Year] is not null and \\r\\n                                v.[Month] is not null and \\r\\n                                cast(concat(v.[Year], FORMAT(v.[Month], '0#')) as int) = pym.YearMonth),\\r\\n                        Project p,\\r\\n                        CommercialClient cc\\r\\n                where\\tpym.ProjectId = p.Oid and \\r\\n                        p.Client = cc.Oid\\r\\n                        /*[ProjectFilter]*/ and pym.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                group by pym.[Year],\\r\\n                        pym.[Month],\\r\\n                        pym.YearMonth\\r\\n    ) v,\\r\\n    PlannedAndContracted pc\\r\\n) v\\r\\n    left outer join Analytics.[Authorization](@CurrentUserId) n ON (n.RoleName = 'RateCardRead')\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Burn_Rate_By_Project_Per_Year_Month/execute","Configuration":"{\n  \"size\": {\n    \"height\": 300\n  },\n  \"commonSeriesSettings\": {\n    \"argumentField\": \"MonthYear\",\n    \"ignoreEmptyPoints\": false\n  },\n  \"panes\": [\n    {\n      \"name\": \"accumulated\"\n    },\n    {\n      \"name\": \"monthly\"\n    }\n  ],\n  \"series\": [\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"type\": \"area\",\n      \"valueField\": \"ForecastSell\",\n      \"name\": \"Planned Revenue\"\n    },\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"type\": \"line\",\n      \"valueField\": \"ActualCost\",\n      \"name\": \"Actual Cost\",\n      \"point\": {\n        \"size\": 6\n      }\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"area\",\n      \"valueField\": \"ForecastSellRunningTotal\",\n      \"name\": \"# Planned Revenue\"\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"line\",\n      \"valueField\": \"ActualCostRunningTotal\",\n      \"name\": \"# Actual Cost\",\n      \"point\": {\n        \"size\": 6\n      }\n    }\n  ],\n  \"valueAxis\": [\n    {\n      \"name\": \"monthly\",\n      \"position\": \"left\"\n    },\n    {\n      \"name\": \"accumulated\",\n      \"position\": \"left\"\n    }\n  ],\n  \"legend\": {\n    \"rowCount\": 1,\n    \"verticalAlignment\": \"bottom\",\n    \"horizontalAlignment\": \"center\"\n  }\n}","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2"},{"Id":"0337f627-0e91-492a-8233-285248e2071c","Name":"Department Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":5,"Parameters":"[{\"WidgetSubTitle\":\"Actual Time (blue) vs Contracted (red)\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetHeight\":100,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"Actual\",\"metricFieldValue\":\"DirectHoursGrandTotal\"},{\"visible\":true,\"metricName\":\"Contracted\",\"metricFieldValue\":\"ContractedHoursGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select v.*,\\r\\n                       sum(DirectHours) over (order by v.DepartmentId) as DirectHoursRunningTotal,\\r\\n                       sum(DirectHours) over () as DirectHoursGrandTotal,\\r\\n                       sum(ContractedTime) over () as ContractedHoursGrandTotal,\\r\\n                       sum(NewBusinessHours) over (order by v.DepartmentId) as NewBusinessHoursRunningTotal,\\r\\n                       sum(NewBusinessHours) over () as NewBusinessHoursGrandTotal,\\r\\n                       sum(AdministrativeHours) over (order by v.DepartmentId) as AdministrativeHoursRunningTotal,\\r\\n                       sum(AdministrativeHours) over () as AdministrativeHoursGrandTotal,\\r\\n                       sum(TimeOffHours) over (order by v.DepartmentId) as TimeOffHoursRunningTotal,\\r\\n                       sum(TimeOffHours) over () as TimeOffHoursGrandTotal,\\r\\n                       sum(TotalHours) over () as GlobalTotalHours\\r\\n                    from\\r\\n                    (\\r\\n                       select t.[DepartmentId],\\r\\n                             t.[Department] as DepartmentName,\\r\\n                             isnull(t.DirectHours, 0.0) as DirectHours,\\r\\n                             isnull(t.NewBusinessHours, 0.0) as NewBusinessHours,\\r\\n                             isnull(t.AdministrativeHours, 0.0) as AdministrativeHours,\\r\\n                             isnull(uv.TimeOffHours, 0.0) as TimeOffHours,\\r\\n                             isnull(t.[Hours], 0.0) + isnull(uv.TimeOffHours, 0.0) as TotalHours,\\r\\n\\t\\t\\t\\t\\t\\t\\t isnull(ph.ContractedTime, 0.0) as ContractedTime\\r\\n                       from\\r\\n                       (\\r\\n                          select t.[DepartmentId],\\r\\n                                t.[Department],\\r\\n                                sum(t.[Hours]) as [Hours],\\r\\n                                (sum(t.[Hours]) - (sum(t.NewBusinessHours) + sum(t.AdministrativeHours))) as DirectHours,\\r\\n                                sum(t.NewBusinessHours) as NewBusinessHours,\\r\\n                                sum(AdministrativeHours) as AdministrativeHours\\r\\n                          from   SkillAnalyticsTimeUtilization t\\r\\n                          where\\t 1 = 1\\r\\n\\t\\t\\t\\t\\t\\t/*[ProjectFilter]*/ and t.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                          group by t.[DepartmentId],\\r\\n                                t.[Department]\\r\\n                       ) t\\r\\n                       left outer join \\r\\n                       (\\r\\n                          select uv.[DepartmentId],\\r\\n                                uv.[Department],\\r\\n                                sum(uv.[Hours]) as TimeOffHours\\r\\n                          from   SkillAnalyticsLeaves uv\\r\\n\\t                      where\\t 1 = 1\\r\\n                          group by uv.[DepartmentId],\\r\\n                                uv.[Department]\\r\\n                       )\\r\\n                       uv on (uv.[DepartmentId] = t.DepartmentId)\\r\\n\\t\\t\\t\\t\\t   left outer join \\r\\n\\t\\t\\t\\t\\t   (\\r\\n\\t\\t\\t\\t\\t\\t\\tselect dp.Oid as DepartmentId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdp.[Name] as DepartmentName,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(sum(pht.ContractedMinutes) / 60.0) as ContractedTime\\r\\n\\t\\t\\t\\t\\t\\t\\tfrom\\tPlannedHoursTotal pht \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tleft outer join Deliverable d on d.Project = pht.Project\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tleft outer join Department dp on d.Department = dp.Oid\\r\\n\\t\\t\\t\\t\\t\\t\\twhere\\t 1 = 1\\r\\n\\t\\t\\t\\t\\t\\t/*[ProjectFilter]*/ and pht.Project = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t\\t\\t\\t\\t\\t\\tgroup by dp.Oid,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdp.[Name]\\r\\n\\t\\t\\t\\t\\t   )\\r\\n\\t\\t\\t\\t\\t   ph on (ph.DepartmentId = t.DepartmentId)\\r\\n                    ) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Time_Utilization_Per_Department/execute","Configuration":"{\n    \"rotated\": true,\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"DepartmentName\",\n        \"type\": \"stackedBar\",\n        \"ignoreEmptyPoints\": true\n    },\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        }\n    },\n    \"series\": [\n        {\n            \"valueField\": \"DirectHours\",\n            \"name\": \"Actual\"\n        },\n        {\n            \"valueField\": \"ContractedTime\",\n            \"name\": \"Contracted\"\n        }\n    ],\n    \"size\": {\n        \"height\": 200\n    }\n}","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2"},{"Id":"743b3135-8eed-435a-b783-38c45b9e80e5","Name":"Projects","Active":true,"UseQuery":false,"Query":"","Size":12,"Order":1,"Parameters":"[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"ProjectId\",\"WidgetColor\":\"\",\"WidgetHeight\":200,\"WidgetHeader\":{\"showTitle\":true,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"WITH ContractEstimateRates As\\r\\n(\\r\\n\\tselect \\r\\n\\t\\teid.Department, eid.UserTypologyGroup, eid.[User], Max(eid.UnitPriceIncome) as UnitPriceIncome\\r\\n\\tfrom\\r\\n\\t\\tdbo.Estimate e\\r\\n\\t\\tINNER JOIN dbo.EstimateItem ei on (ei.Estimate = e.Oid)\\r\\n\\t\\tINNER JOIN dbo.EstimateItemDetail eid on (eid.EstimateItem = ei.Oid AND eid.[Type] = 2)\\r\\n\\twhere \\r\\n\\t\\te.GCRecord is null \\r\\n\\t\\tand (e.Client = @ClientId)\\r\\n\\t\\tand cast(getdate() as Date) between e.[Date] and e.Expiration\\r\\n\\tgroup by \\r\\n\\t\\teid.Department, \\r\\n\\t\\teid.UserTypologyGroup, \\r\\n\\t\\teid.[User]\\r\\n)\\r\\nSELECT\\r\\n\\tv.ProjectId,\\r\\n\\tv.ProjectName,\\r\\n\\tv.ProjectType,\\r\\n\\tv.ProjectBeginDate,\\r\\n\\tv.ProjectEndDate,\\r\\n    v.[ActualHours],\\r\\n    IIF(n.RoleId is not null, v.ActualHoursCost, null) as ActualHoursCost,\\r\\n    IIF(n.RoleId is not null, v.ActualHoursIncome, null) as ActualHoursIncome,\\r\\n    v.NonBillableHours,\\r\\n    v.BillableHours,\\r\\n    IIF(n.RoleId is not null, v.BillableHoursIncome, null) as BillableHoursIncome,\\r\\n    v.ContractedHours,\\r\\n    IIF(n.RoleId is not null, v.ContractedHoursIncome, null) as ContractedHoursIncome,\\r\\n    v.PlannedHours,\\r\\n    IIF(n.RoleId is not null, v.PlannedHoursIncome, null) as PlannedHoursIncome,\\r\\n    IIF(n.RoleId is not null, v.ContractedActualIncomeVariation, null) as ContractedActualIncomeVariation,\\r\\n    v.ActualContractedPercentage,\\r\\n\\tIIF(n.RoleId is not null, v.ActualContractedIncome, null) as ActualContractedIncome,\\r\\n    v.ActualPlannedPercentage,\\r\\n    v.PlannedContractedPercentage,\\r\\n    v.BillableHoursGrandTotal,\\r\\n    v.PlannedHoursGrandTotal,\\r\\n    v.ContractedHoursGrandTotal,\\r\\n    v.ActualContractedPercentageGrandTotal,\\r\\n    v.ForecastHours,\\r\\n\\tIIF(n.RoleId is not null, v.ForecastHoursIncome, null) as ForecastHoursIncome,\\r\\n\\tIIF(n.RoleId is not null, v.ActualHoursIncome + v.ForecastHoursIncome, null) as ActualPlusForecastHoursIncome,\\r\\n    v.ActualPlusForecast,\\r\\n    v.ActualPlusForecastBurn,\\r\\n    v.ActualPlusForecastBurnIncome\\r\\nFROM\\r\\n(\\r\\n    SELECT\\r\\n        v.ProjectId,\\r\\n\\t\\tp.[Name] as ProjectName,\\r\\n\\t\\tdt.[Name] as ProjectType,\\r\\n\\t\\tp.BeginDate as ProjectBeginDate,\\r\\n\\t\\tp.EndDate as ProjectEndDate,\\r\\n        sum(v.[ActualHours]) as [ActualHours],\\r\\n        sum(v.ActualHoursCost) as ActualHoursCost,\\r\\n        sum(v.ActualHoursIncome) as ActualHoursIncome,\\r\\n        sum(v.NonBillableHours) as NonBillableHours,\\r\\n        sum(v.[BillableHours]) as BillableHours,\\r\\n        sum(v.BillableHoursIncome) as BillableHoursIncome,\\r\\n        sum(v.ContractedHours) as ContractedHours,\\r\\n        sum(v.ContractedHoursIncome) as ContractedHoursIncome,\\r\\n        sum(v.PlannedHours) as PlannedHours,\\r\\n        sum(v.PlannedHoursIncome) as PlannedHoursIncome,\\r\\n        (sum(v.ContractedHoursIncome) - sum(v.ActualHoursCost)) as ContractedActualIncomeVariation,\\r\\n        IIF(sum(v.ContractedHours) > 0, sum(v.BillableHours) / sum(v.ContractedHours), 0.0) as ActualContractedPercentage,\\r\\n        IIF(sum(v.ContractedHours) > 0, sum(v.PlannedHours) / sum(v.ContractedHours), 0.0) as PlannedContractedPercentage,\\r\\n\\t\\tIIF(sum(v.ContractedHoursIncome) > 0, sum(v.ActualHoursIncome) / sum(v.ContractedHoursIncome), 0.0) as ActualContractedIncome,\\r\\n        IIF(sum(v.PlannedHours) > 0, sum(v.BillableHours) / sum(v.PlannedHours), 0.0) as ActualPlannedPercentage,\\r\\n        sum(sum(v.[BillableHours])) OVER () as BillableHoursGrandTotal,\\r\\n        sum(sum(v.[PlannedHours])) OVER () as PlannedHoursGrandTotal,\\r\\n        sum(sum(v.[ContractedHours])) OVER () as ContractedHoursGrandTotal,\\r\\n        IIF(sum(sum(v.[ContractedHours])) OVER () > 0, sum(sum(v.[BillableHours])) OVER () / sum(sum(v.[ContractedHours])) OVER (), 0.0) * 100 as ActualContractedPercentageGrandTotal,\\r\\n        sum(v.ForecastHours) as ForecastHours,\\r\\n\\t\\tsum(v.ForecastHoursIncome) as ForecastHoursIncome,\\r\\n        (sum(v.ActualHours) + sum(v.ForecastHours)) as ActualPlusForecast,\\r\\n        IIF(sum(v.ContractedHours) > 0, (sum(v.ActualHours) + sum(v.ForecastHours)) / sum(v.ContractedHours), 0.0) as ActualPlusForecastBurn,\\r\\n\\t\\tIIF(sum(v.ContractedHoursIncome) > 0, (sum(v.ActualHoursIncome) + sum(v.ForecastHoursIncome)) / sum(v.ContractedHoursIncome), 0.0) as ActualPlusForecastBurnIncome\\r\\n    FROM  \\r\\n    (\\r\\n        SELECT\\r\\n\\t\\t\\te.Project as ProjectId,\\r\\n            0 as [ActualHours],\\r\\n            0 as ActualHoursCost,\\r\\n            0 as ActualHoursIncome,\\r\\n            0 as NonBillableHours,\\r\\n            0 as BillableHours,\\r\\n            0 as BillableHoursIncome,\\r\\n            sum(eid.[Hours] * ei.retainer) as ContractedHours,\\r\\n            sum(eid.[Hours] * ISNULL(eid.UnitPriceIncome, 0)) as ContractedHoursIncome,\\r\\n            0 as PlannedHours,\\r\\n            0 as PlannedHoursIncome,\\r\\n            0 as ForecastHours,\\r\\n\\t\\t\\t0 as ForecastHoursIncome\\r\\n        FROM   \\r\\n            dbo.Estimate e,\\r\\n            dbo.EstimateItem ei,\\r\\n            dbo.EstimateItemDetail eid,\\r\\n            dbo.Department dp,\\r\\n            dbo.UserTypologyGroup utg\\r\\n        WHERE\\r\\n            e.Client = @ClientId AND \\r\\n            ei.Estimate = e.Oid\\r\\n            AND eid.EstimateItem = ei.Oid AND eid.[Type] = 2\\r\\n            AND dp.Oid = eid.Department\\r\\n            AND utg.Oid = eid.UserTypologyGroup\\r\\n        GROUP BY \\r\\n            e.Project\\r\\n        UNION ALL\\r\\n        SELECT\\r\\n            t.ProjectId,\\r\\n            sum(t.[Hours]) as [ActualHours],\\r\\n            sum(ISNULL(t.TotalUserCost, 0)) as ActualHoursCost,\\r\\n            sum(t.[Hours] * ISNULL(t.UnitPriceIncome, 0)) as ActualHoursIncome,\\r\\n            sum((t.NewBusinessHours + t.AdministrativeHours)) as NonBillableHours,\\r\\n            sum((t.[Hours] - (t.NewBusinessHours + t.AdministrativeHours))) as BillableHours,\\r\\n            sum((t.[Hours] - (t.NewBusinessHours + t.AdministrativeHours)) * ISNULL(t.UnitPriceIncome, 0)) as BillableHoursIncome,\\r\\n            0 as ContractedHours,\\r\\n            0 as ContractedHoursIncome,\\r\\n            0 as PlannedHours,\\r\\n            0 as PlannedHoursIncome,\\r\\n            0 as ForecastHours,\\r\\n\\t\\t\\t0 as ForecastHoursIncome\\r\\n            from (\\r\\n                    select\\r\\n\\t\\t\\t\\t\\t\\tt.ProjectId as ProjectId,\\r\\n                        ISNULL(eidu.UnitPriceIncome, ISNULL(eidt.UnitPriceIncome, 0)) as UnitPriceIncome,\\r\\n                        iif(t.IsAdministrative = 1, (t.[Hours] / 60.0), 0) as AdministrativeHours,\\r\\n                        IIF(\\r\\n                            (\\r\\n                                case \\r\\n                                    when t.IsAdministrative = 0 and \\r\\n                                    (\\r\\n                                        isnull(jc.Billable, 0) = 0 and \\r\\n                                        isnull(pc.Billable, 0) = 0\\r\\n                                    )\\r\\n                                    then 1 \\r\\n                                    else 0 \\r\\n                                end\\r\\n                            ) = 1, (t.[Hours] / 60.0), 0\\r\\n                        ) as NewBusinessHours,\\r\\n                        IIF(\\r\\n                        (\\r\\n                            case \\r\\n                                when t.IsAdministrative = 0 and \\r\\n                                (\\r\\n                                    (pc.Billable = 1 and isnull(jc.Billable, 0) = 0)\\r\\n                                ) \\r\\n                                then (t.[Hours] / 60.0) \\r\\n                                else 0 \\r\\n                            end\\r\\n                            ) = 1, (t.[Hours] / 60.0), 0\\r\\n                        ) as InternalWorkHours,\\r\\n                        IIF(\\r\\n                        (\\r\\n                            case\\r\\n                                when t.IsAdministrative = 0 and \\r\\n                                (\\r\\n                                    (pc.Billable = 1 or jc.Billable = 1)\\r\\n                                )\\r\\n                                then (t.[Hours] / 60.0) \\r\\n                                else 0 \\r\\n                            end\\r\\n                            ) = 1, (t.[Hours] / 60.0), 0\\r\\n                        ) as BillableHours,\\r\\n                        (t.[Hours] / 60.0) as [Hours],\\r\\n                        t.TotalUserCost\\r\\n                    from\\tdbo.SkillTimesheetExpanded t\\r\\n                            inner join Project p ON (p.Oid = t.ProjectId AND p.Client = @ClientId)\\r\\n                            left outer join ProjectClassification pc on (pc.Oid = p.Classification)\\r\\n                            left outer join Deliverable d on (d.Oid = t.DeliverableId)\\r\\n                            left outer join JobClassification jc on (jc.Oid = d.Classification)\\r\\n                            left outer join UserTypology tp on (tp.Oid = t.UserTypologyId)\\r\\n                            left outer join UserTypologyGroup utg on (utg.Oid = tp.UserTypologyGroup)\\r\\n                            left outer join ContractEstimateRates eidu on (eidu.Department = t.UserDepartmentId AND eidu.UserTypologyGroup = utg.Oid AND eidu.[User] = t.CreatedBy)\\r\\n                            left outer join ContractEstimateRates eidt on (eidt.Department = t.UserDepartmentId AND eidt.UserTypologyGroup = utg.Oid AND eidt.[User] is null)\\r\\n        ) t\\r\\n        group by\\r\\n                t.ProjectId\\r\\n        UNION ALL\\r\\n        SELECT\\r\\n\\t\\t\\tpht.Project as ProjectId,\\r\\n            0 as [ActualHours],\\r\\n            0 as ActualHoursCost,\\r\\n            0 as ActualHoursIncome,\\r\\n            0 as NonBillableHours,\\r\\n            0 as BillableHours,\\r\\n            0 as BillableHoursIncome,\\r\\n            0 as ContractedHours,\\r\\n            0 as ContractedHoursIncome,\\r\\n            SUM((ISNULL(pht.PlannedMinutes, 0) / 60.0)) as PlannedHours,\\r\\n            SUM((ISNULL(pht.PlannedMinutes, 0) / 60.0) * ISNULL(eidu.UnitPriceIncome, ISNULL(eidt.UnitPriceIncome, 0))) as PlannedHoursIncome,\\r\\n            0 as ForecastHours,\\r\\n\\t\\t\\t0 as ForecastHoursIncome\\r\\n        FROM   \\r\\n            dbo.PlannedHoursTotal pht\\r\\n            LEFT OUTER JOIN [User] u ON (u.Oid = pht.[User])\\r\\n            LEFT OUTER JOIN [UserTypology] ut ON (ut.Oid = u.Typology)\\r\\n            LEFT OUTER JOIN [UserTypologyGroup] utg ON (utg.Oid = ut.UserTypologyGroup)\\r\\n            LEFT OUTER JOIN [UserTypologyGroup] utgp ON (utgp.Oid = pht.UserTypologyGroup)\\r\\n            LEFT OUTER JOIN [Department] utdp ON (utdp.Oid = ut.Department)\\r\\n            LEFT OUTER JOIN \\r\\n            (\\r\\n                SELECT \\r\\n                    utgdp.UserTypologyGroup,\\r\\n                    Max(utgdp.Department) as Department \\r\\n                FROM \\r\\n                    [UserTypologyGroupDepartment] utgdp \\r\\n                GROUP BY\\r\\n                    utgdp.UserTypologyGroup\\r\\n            ) utgpdp ON (utgpdp.UserTypologyGroup = utgp.Oid)\\r\\n            LEFT OUTER JOIN Department utgdp ON (utgdp.Oid = utgpdp.Department)\\r\\n            left outer join ContractEstimateRates eidu on (eidu.Department = utdp.Oid AND eidu.UserTypologyGroup = utgdp.Oid AND eidu.[User] = u.Oid)\\r\\n            left outer join ContractEstimateRates eidt on (eidt.Department = utdp.Oid AND eidt.UserTypologyGroup = utgdp.Oid AND eidt.[User] is null),\\r\\n            dbo.Project p\\r\\n        WHERE\\r\\n            pht.GCRecord is null\\r\\n            AND p.Oid = pht.Project\\r\\n            /*[/ContractFilter]*/ and p.Client = @ClientId /*[/ContractFilter]*/\\r\\n        GROUP BY \\r\\n            pht.Project\\r\\n        UNION ALL\\r\\n        SELECT\\r\\n\\t\\t\\tpht.ProjectId,\\r\\n            0 as [ActualHours],\\r\\n            0 as ActualHoursCost,\\r\\n            0 as ActualHoursIncome,\\r\\n            0 as NonBillableHours,\\r\\n            0 as BillableHours,\\r\\n            0 as BillableHoursIncome,\\r\\n            0 as ContractedHours,\\r\\n            0 as ContractedHoursIncome,\\r\\n            0 as PlannedHours,\\r\\n            0 as PlannedHoursIncome,\\r\\n            SUM((ISNULL(pht.[Hours], 0) / 60.0)) as ForecastHours,\\r\\n\\t\\t\\tSUM((ISNULL(pht.[Hours], 0) / 60.0) * ISNULL(eidu.UnitPriceIncome, ISNULL(eidt.UnitPriceIncome, 0))) as ForecastHoursIncome\\r\\n        FROM   \\r\\n            Analytics.DatamartPlannedHours pht\\r\\n                left outer join [User] u on u.Oid = pht.UserId\\r\\n                left outer join Department d on d.Oid = u.Department\\r\\n                left outer join Estimate e on e.Oid = pht.EstimateId\\r\\n\\t\\t\\t\\tLEFT OUTER JOIN \\r\\n            (\\r\\n                SELECT \\r\\n                    utgdp.UserTypologyGroup,\\r\\n                    Max(utgdp.Department) as Department \\r\\n                FROM \\r\\n                    [UserTypologyGroupDepartment] utgdp \\r\\n                GROUP BY\\r\\n                    utgdp.UserTypologyGroup\\r\\n            ) utgpdp ON (utgpdp.UserTypologyGroup = d.Oid)\\r\\n            LEFT OUTER JOIN Department utgdp ON (utgdp.Oid = utgpdp.Department)\\r\\n            left outer join ContractEstimateRates eidu on (eidu.Department = d.Oid AND eidu.UserTypologyGroup = utgdp.Oid AND eidu.[User] = u.Oid)\\r\\n            left outer join ContractEstimateRates eidt on (eidt.Department = d.Oid AND eidt.UserTypologyGroup = utgdp.Oid AND eidt.[User] is null)\\r\\n        WHERE \\r\\n            e.Client = @ClientId\\r\\n        GROUP BY \\r\\n            pht.ProjectId\\r\\n    ) v \\r\\n        left outer join Project p on p.Oid = v.ProjectId\\r\\n\\t\\tleft outer join DocumentType dt on p.DocumentType = dt.Oid\\r\\n    GROUP BY\\r\\n\\t\\tv.ProjectId,\\r\\n\\t\\tp.[Name],\\r\\n\\t\\tdt.[Name],\\r\\n\\t\\tp.BeginDate,\\r\\n\\t\\tp.EndDate\\r\\n) v\\r\\n    left outer join Analytics.[Authorization](@CurrentUserId) n ON (n.RoleName = 'RateCardRead')\\r\\nwhere v.ProjectName is not null\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[\"clientId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"","Configuration":"{\r\n    \"selection\": {\r\n        \"mode\": \"single\"\r\n    },\r\n    \"filterRow\": {\r\n        \"visible\": true\r\n    },\r\n    \"height\": \"300\",\r\n    \"columnsAutoWidth\": true,\r\n    \"allowColumnResizing\": false,\r\n    \"columnResizingMode\": \"nextColumn\",\r\n    \"columnMinWidth\": \"100\",\r\n    \"filterPanel\": {\r\n        \"visible\": false\r\n    },\r\n    \"groupPanel\": {\r\n        \"visible\": false\r\n    },\r\n    \"scrolling\": {\r\n        \"mode\": \"virtual\"\r\n    },\r\n    \"columns\": [\r\n        {\r\n            \"dataField\": \"ProjectName\",\r\n            \"caption\": \"Project\",\r\n            \"width\": 250,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ProjectType\",\r\n            \"caption\": \"Project Type\",\r\n            \"width\": 125,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ProjectBeginDate\",\r\n            \"caption\": \"Start Date\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"date\",\r\n            \"format\": \"d MMM\",\r\n            \"allowGrouping\": false,\r\n            \"width\": 100,\r\n            \"visibleIndex\": 1,\r\n            \"visible\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ProjectEndDate\",\r\n            \"caption\": \"End Date\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"date\",\r\n            \"format\": \"d MMM\",\r\n            \"allowGrouping\": false,\r\n            \"width\": 100,\r\n            \"visibleIndex\": 2,\r\n            \"visible\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedHours\",\r\n            \"caption\": \"Contracted\",\r\n            \"format\": \"#,##0.00\",\r\n            \"width\": 125,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedHoursIncome\",\r\n            \"caption\": \"Contracted $\",\r\n            \"dataType\": \"number\",\r\n            \"format\": {\r\n                \"type\": \"currency\",\r\n                \"precision\": 2\r\n            },\r\n            \"displayFormat\": \"{0}\",\r\n            \"allowGrouping\": false,\r\n            \"width\": 125\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedActualIncomeVariation\",\r\n            \"caption\": \"Contracted - Actual\",\r\n            \"dataType\": \"number\",\r\n            \"format\": {\r\n                \"type\": \"currency\",\r\n                \"precision\": 2\r\n            },\r\n            \"displayFormat\": \"{0}\",\r\n            \"allowGrouping\": false,\r\n            \"visible\": false,\r\n            \"width\": 125\r\n        },\r\n        {\r\n            \"dataField\": \"ForecastHours\",\r\n            \"caption\": \"Forecasted\",\r\n            \"format\": \"#,##0.00\",\r\n            \"alignment\": \"right\",\r\n            \"width\": 125,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ForecastHoursIncome\",\r\n            \"caption\": \"Forecast $\",\r\n            \"dataType\": \"number\",\r\n            \"format\": {\r\n                \"type\": \"currency\",\r\n                \"precision\": 2\r\n            },\r\n            \"displayFormat\": \"{0}\",\r\n            \"allowGrouping\": false,\r\n            \"width\": 125\r\n        },\r\n        {\r\n            \"dataField\": \"PlannedHours\",\r\n            \"caption\": \"Planned\",\r\n            \"format\": \"#,##0.00\",\r\n            \"width\": 100,\r\n            \"allowGrouping\": false,\r\n            \"visible\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ActualHours\",\r\n            \"caption\": \"Actual\",\r\n            \"alignment\": \"center\",\r\n            \"columns\": [\r\n                {\r\n                    \"dataField\": \"BillableHours\",\r\n                    \"caption\": \"Billable\",\r\n                    \"format\": \"#,##0.00\",\r\n                    \"width\": 125,\r\n                    \"allowGrouping\": false,\r\n                    \"alignment\": \"right\"\r\n                },\r\n                {\r\n                    \"dataField\": \"BillableHoursIncome\",\r\n                    \"caption\": \"Billable $\",\r\n                    \"dataType\": \"number\",\r\n                    \"format\": {\r\n                        \"type\": \"currency\",\r\n                        \"precision\": 2\r\n                    },\r\n                    \"displayFormat\": \"{0}\",\r\n                    \"allowGrouping\": false,\r\n                    \"width\": 125\r\n                },\r\n                {\r\n                    \"dataField\": \"NonBillableHours\",\r\n                    \"caption\": \"Non Billable\",\r\n                    \"format\": \"#,##0.00\",\r\n                    \"width\": 125,\r\n                    \"allowGrouping\": false,\r\n                    \"alignment\": \"right\",\r\n                    \"visible\": false\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"dataField\": \"ActualPlusForecast\",\r\n            \"caption\": \"Actual + Forecast\",\r\n            \"format\": \"#,##0.00\",\r\n            \"width\": 125,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ActualPlusForecastHoursIncome\",\r\n            \"caption\": \"Actual + Forecast $\",\r\n            \"dataType\": \"number\",\r\n            \"format\": {\r\n                \"type\": \"currency\",\r\n                \"precision\": 2\r\n            },\r\n            \"displayFormat\": \"{0}\",\r\n            \"allowGrouping\": false,\r\n            \"width\": 125\r\n        },\r\n        {\r\n            \"dataField\": \"ActualContractedPercentage\",\r\n            \"caption\": \"Actual Burn %\",\r\n            \"dataType\": \"number\",\r\n            \"format\": \"percent\",\r\n            \"width\": 125,\r\n            \"allowGrouping\": false,\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"ActualContractedIncome\",\r\n            \"caption\": \"Actual Burn $\",\r\n            \"dataType\": \"number\",\r\n            \"format\": {\r\n                \"type\": \"currency\",\r\n                \"precision\": 2\r\n            },\r\n            \"displayFormat\": \"{0}\",\r\n            \"allowGrouping\": false,\r\n            \"width\": 125\r\n        },\r\n        {\r\n            \"dataField\": \"ActualPlusForecastBurn\",\r\n            \"caption\": \"Actual + Forecast Burn %\",\r\n            \"dataType\": \"number\",\r\n            \"format\": \"percent\",\r\n            \"width\": 175,\r\n            \"allowGrouping\": false,\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); }\",\r\n            \"visible\": true\r\n        },\r\n        {\r\n            \"dataField\": \"PlannedContractedPercentage\",\r\n            \"caption\": \"Planned Burn %\",\r\n            \"dataType\": \"number\",\r\n            \"format\": \"percent\",\r\n            \"width\": 150,\r\n            \"allowGrouping\": false,\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); }\",\r\n            \"visible\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ActualPlusForecastBurnIncome\",\r\n            \"caption\": \"Actual + Forecast Burn $\",\r\n            \"dataType\": \"number\",\r\n            \"format\": {\r\n                \"type\": \"currency\",\r\n                \"precision\": 2\r\n            },\r\n            \"displayFormat\": \"{0}\",\r\n            \"allowGrouping\": false,\r\n            \"width\": 175\r\n        }\r\n    ],\r\n    \"summary\": {\r\n        \"calculateCustomSummary\": \"function (options) {            if (options.name === 'ActualBurn') {                switch(options.summaryProcess) {                    case 'start':                    options.totalValue = [0,0];                    break;                    case 'calculate':                    options.totalValue[0] = options.totalValue[0] + options.value.ActualHours;                    options.totalValue[1] = options.totalValue[1] + options.value.ContractedHours;                    break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                    options.totalValue = (options.totalValue[0] / options.totalValue[1]);                    else                            options.totalValue = 0;                                                break;                }            }                                           if (options.name === 'ActualPlusForecastBurn') {                                               switch(options.summaryProcess) {                                                   case 'start':                                                   options.totalValue = [0,0];                                                   break;                                                   case 'calculate':                                                   options.totalValue[0] = options.totalValue[0] + options.value.ActualPlusForecast;                                                   options.totalValue[1] = options.totalValue[1] + options.value.ContractedHours;                                                   break;                    case 'finalize':                                                   if(Number(options.totalValue[1]) > 0)                                                   options.totalValue = (options.totalValue[0] / options.totalValue[1]);                                                   else                            options.totalValue = 0;                                                   break;                }            }            if (options.name === 'PlannedBurn') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.PlannedHours;                        options.totalValue[1] = options.totalValue[1] + options.value.ContractedHours;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }            }        }\",\r\n        \"totalItems\": [\r\n            {\r\n                \"name\": \"PlannedBurn\",\r\n                \"showInColumn\": \"Planned Burn %\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"ActualPlusForecastBurn\",\r\n                \"showInColumn\": \"Actual + Forecast Burn %\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"ActualBurn\",\r\n                \"showInColumn\": \"Actual Burn %\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"ProjectName\",\r\n                \"summaryType\": \"count\",\r\n                \"displayFormat\": \"All Projects\"\r\n            },\r\n            {\r\n                \"column\": \"ActualTime\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.00\",\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Billable\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.00\",\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Planned\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.00\",\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Non Billable\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.00\",\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Forecasted\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.00\",\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Actual + Forecast\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.00\",\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"ActualCost\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"currency\",\r\n                    \"precision\": 2\r\n                },\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"PlannedTime\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.00\",\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"ContractedRevenue\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"currency\",\r\n                    \"precision\": 2\r\n                },\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Contracted\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.00\",\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"ContractedHoursIncome\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"currency\",\r\n                    \"precision\": 2\r\n                },\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"ContractedActualIncomeVariation\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"currency\",\r\n                    \"precision\": 2\r\n                },\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Billable $\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"currency\",\r\n                    \"precision\": 2\r\n                },\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Forecast $\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"currency\",\r\n                    \"precision\": 2\r\n                },\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Actual + Forecast $\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"currency\",\r\n                    \"precision\": 2\r\n                },\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Actual Burn $\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"currency\",\r\n                    \"precision\": 2\r\n                },\r\n                \"displayFormat\": \"{0}\"\r\n            },\r\n            {\r\n                \"column\": \"Actual + Forecast Burn $\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"currency\",\r\n                    \"precision\": 2\r\n                },\r\n                \"displayFormat\": \"{0}\"\r\n            }\r\n        ]\r\n    },\r\n    \"columnChooser\": {\r\n        \"enabled\": \"true\"\r\n    },\r\n    \"stateStoring\": {\r\n        \"enabled\": false\r\n    }\r\n}","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2"},{"Id":"9a6b22ef-6192-45c2-ada6-4f073862ea67","Name":"User Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":7,"Parameters":"[{\"WidgetSubTitle\":\"Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetHeight\":200,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"Total\",\"metricFieldValue\":\"DirectHoursGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select v.*,\\r\\n                       sum(DirectHours) over (order by v.EmployeeId) as DirectHoursRunningTotal,\\r\\n                       sum(DirectHours) over () as DirectHoursGrandTotal,\\r\\n                       sum(NewBusinessHours) over (order by v.EmployeeId) as NewBusinessHoursRunningTotal,\\r\\n                       sum(NewBusinessHours) over () as NewBusinessHoursGrandTotal,\\r\\n                       sum(AdministrativeHours) over (order by v.EmployeeId) as AdministrativeHoursRunningTotal,\\r\\n                       sum(AdministrativeHours) over () as AdministrativeHoursGrandTotal,\\r\\n                       sum(TimeOffHours) over (order by v.EmployeeId) as TimeOffHoursRunningTotal,\\r\\n                       sum(TimeOffHours) over () as TimeOffHoursGrandTotal,\\r\\n                       sum(TotalHours) over () as GlobalTotalHours\\r\\n                    from\\r\\n                    (\\r\\n                       select t.[UserId] as EmployeeId,\\r\\n                             t.[User] as EmployeeName,\\r\\n                             isnull(t.DirectHours, 0.0) as DirectHours,\\r\\n                             isnull(t.NewBusinessHours, 0.0) as NewBusinessHours,\\r\\n                             isnull(t.AdministrativeHours, 0.0) as AdministrativeHours,\\r\\n                             isnull(uv.TimeOffHours, 0.0) as TimeOffHours,\\r\\n                             isnull(t.[Hours], 0.0) + isnull(uv.TimeOffHours, 0.0) as TotalHours\\r\\n                       from\\r\\n                       (\\r\\n                          select t.[UserId],\\r\\n                                t.[User],\\r\\n                                sum(t.[Hours]) as [Hours],\\r\\n                                (sum(t.[Hours]) - (sum(t.NewBusinessHours) + sum(t.AdministrativeHours))) as DirectHours,\\r\\n                                sum(t.NewBusinessHours) as NewBusinessHours,\\r\\n                                sum(AdministrativeHours) as AdministrativeHours\\r\\n                          from   SkillAnalyticsTimeUtilization t\\r\\n\\t                      where\\t 1 = 1\\r\\n                                /*[ProjectFilter]*/ and t.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                          group by t.[UserId],\\r\\n                                t.[User]\\r\\n                       ) t\\r\\n                       left outer join \\r\\n                       (\\r\\n                          select uv.[UserId],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tuv.[User],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tsum(uv.[Hours]) as TimeOffHours\\r\\n                          from   SkillAnalyticsLeaves uv\\r\\n\\t                      where\\t 1 = 1\\r\\n                        group by uv.[UserId],\\r\\n                                uv.[User]\\r\\n                       )\\r\\n                       uv on (uv.[UserId] = t.UserId)\\r\\n                    ) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Time_Utilization_Per_User/execute","Configuration":"{\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"EmployeeName\",\n        \"type\": \"bar\",\n        \"ignoreEmptyPoints\": true,\n        \"valueField\": \"DirectHours\"\n    },\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        }\n    },\n    \"seriesTemplate\": {\n        \"nameField\": \"EmployeeName\"\n    },\n    \"size\": {\n        \"height\": 200\n    },\n    \"palette\": [\n        \"#da5859\",\n        \"#f09777\",\n        \"#a5d7d0\",\n        \"#fbc987\",\n        \"#a5bdd7\",\n        \"#e97c82\",\n        \"#81d4fa\",\n        \"#c5e1a5\",\n        \"#ce93d8\",\n        \"#fff59d\"\n    ],\n    \"legend\": {\n        \"visible\": false\n    },\n    \"tooltip\": {\n        \"enabled\": true,\n        \"customizeTooltip\": \"function(e){ \n            debugger;\n            return { \n                'text': '<span style=\\\"font-size: 14px; color: #808080;\\\">' +  e.argumentText + '</span><br/><span style=\\\"color: '+ e.point.getColor() +'\\\">' +  Math.round(Math.abs(e.value)*100)/100 + '</span>'    \\n\\t\\t};   }\"\n        }\n    }","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2"},{"Id":"535727f3-00b0-40a4-9cfa-bd4964279392","Name":"Time Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":2,"Parameters":"[{\"WidgetSubTitle\":\"Forecast vs Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetHeight\":200,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Forecast\",\"metricFieldValue\":\"ForecastTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"With ProjectYearMonths As\\r\\n                                (\\r\\n\\t                                select @ProjectId as ProjectId, \\r\\n\\t                                ym.* \\r\\n\\t                                from YearsMonths(\\r\\n\\t                                (select p.BeginDate from Project p where p.Oid = @ProjectId), \\r\\n\\t                                (select p.EndDate from Project p where p.Oid = @ProjectId)) ym\\r\\n                                ),\\r\\n                                PlannedAndContracted AS\\r\\n                                (\\r\\n\\t                                select\\tv.[Year],\\r\\n\\t\\t\\t                                v.[Month],\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHours), 0) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (), 0) AS PlannedGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHoursSell), 0) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (), 0) AS PlannedSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ContractedHours), 0) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (), 0) AS ContractedTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(v.ContractedHoursRate), 0) as ContractedRate \\r\\n\\t\\t\\t                                from\\tSkillAnalyticsBurnRate v\\r\\n\\t                                where\\tv.[Year] is null and v.[Month] is null \\r\\n\\t\\t\\t                                /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t                                group by v.[Year],\\r\\n\\t\\t\\t                                v.[Month]\\r\\n                                )\\r\\n                                select\\tv.*,\\r\\n\\t\\t                                pc.PlannedTime,\\r\\n\\t\\t                                pc.PlannedTimeRunningTotal,\\r\\n\\t\\t                                pc.PlannedGrandTotal,\\r\\n\\t\\t                                pc.PlannedSell,\\r\\n\\t\\t                                pc.PlannedSellRunningTotal,\\r\\n\\t\\t                                pc.PlannedSellGrandTotal,\\r\\n\\t\\t                                pc.ContractedTime,\\r\\n\\t\\t                                pc.ContractedTimeRunningTotal,\\r\\n\\t\\t                                pc.ContractedTimeGrandTotal,\\r\\n\\t\\t                                pc.ContractedRate\\r\\n                                from\\r\\n\\t\\t                                (\\r\\n                                            select\\tconcat(FORMAT(pym.[Month], '0#'), '/', pym.[Year]) as MonthYear,\\r\\n\\t\\t                                                pym.YearMonth as MonthYearNumber,\\r\\n\\t\\t                                                isnull(sum(v.ActualHours), 0) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (ORDER BY pym.YearMonth), 0) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (), 0) AS ActualTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursCost), 0) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (), 0) AS ActualCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursSell), 0) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (), 0) AS ActualSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillable), 0) as ActualBillableTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillable)) OVER (), 0) AS ActualBillableTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillableCost), 0) as ActualBillableCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableCost)) OVER (), 0) AS ActualBillableCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillableSell), 0) as ActualBillableSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableSell)) OVER (), 0) AS ActualBillableSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillable), 0) as ActualNonBillableTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillable)) OVER (), 0) AS ActualNonBillableTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillableCost), 0) as ActualNonBillableCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (), 0) AS ActualNonBillableCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillableSell), 0) as ActualNonBillableSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (), 0) AS ActualNonBillableSellGrandTotal,\\r\\n                                                        isnull(sum(v.ForecastHours), 0) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (), 0) AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ForecastHoursSell), 0) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (), 0) AS ForecastSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.AllocatedHours), 0) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (), 0) AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.AllocatedHoursSell), 0) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (), 0) AS AllocatedSellGrandTotal\\r\\n                                                from\\tProjectYearMonths pym\\r\\n\\t\\t\\t\\t\\t\\t                                left outer join SkillAnalyticsBurnRate v on \\r\\n\\t\\t\\t\\t\\t\\t\\t                                (v.ProjectId = pym.ProjectId and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                v.[Year] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                v.[Month] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                cast(concat(v.[Year], FORMAT(v.[Month], '0#')) as int) = pym.YearMonth),\\r\\n\\t\\t\\t\\t\\t\\t                                Project p,\\r\\n\\t\\t\\t\\t\\t\\t                                CommercialClient cc\\r\\n                                                where\\tpym.ProjectId = p.Oid and \\r\\n\\t\\t                                                p.Client = cc.Oid\\r\\n\\t\\t                                                /*[ProjectFilter]*/ and pym.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                group by pym.[Year],\\r\\n\\t\\t                                                pym.[Month],\\r\\n\\t\\t\\t\\t\\t\\t                                pym.YearMonth\\r\\n\\t                                ) v,\\r\\n\\t                                PlannedAndContracted pc\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Burn_Rate_By_Project_Per_Year_Month/execute","Configuration":"{\n  \"size\": {\n    \"height\": 300\n  },\n  \"commonSeriesSettings\": {\n    \"argumentField\": \"MonthYear\",\n    \"ignoreEmptyPoints\": false\n  },\n  \"panes\": [\n    {\n      \"name\": \"accumulated\"\n    },\n    {\n      \"name\": \"monthly\"\n    }\n  ],\n  \"series\": [\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"type\": \"bar\",\n      \"valueField\": \"ForecastTime\",\n      \"name\": \"Forecast Time\"\n    },\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"type\": \"line\",\n      \"valueField\": \"ActualTime\",\n      \"name\": \"Actual Time\",\n      \"point\": {\n        \"size\": 6\n      }\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"bar\",\n      \"valueField\": \"ForecastTimeRunningTotal\",\n      \"name\": \"# Forecast Time\"\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"line\",\n      \"valueField\": \"ActualTimeRunningTotal\",\n      \"name\": \"# Actual Time\",\n      \"point\": {\n        \"size\": 6\n      }\n    }\n  ],\n  \"valueAxis\": [\n    {\n      \"name\": \"monthly\",\n      \"position\": \"left\"\n    },\n    {\n      \"name\": \"accumulated\",\n      \"position\": \"left\"\n    }\n  ],\n  \"legend\": {\n    \"rowCount\": 1,\n    \"verticalAlignment\": \"bottom\",\n    \"horizontalAlignment\": \"center\"\n  }\n}","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2"},{"Id":"d9a6273a-b9f1-4f6b-95e9-dd7d160e136e","Name":"Division Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":4,"Parameters":"[{\"WidgetSubTitle\":\"Actual Time (blue) vs Contracted (red)\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetHeight\":100,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"Actual\",\"metricFieldValue\":\"DirectHoursGrandTotal\"},{\"visible\":true,\"metricName\":\"Contracted\",\"metricFieldValue\":\"ContractedHoursGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select v.*,\\r\\n                       sum(DirectHours) over (order by v.DivisionId) as DirectHoursRunningTotal,\\r\\n                       sum(DirectHours) over () as DirectHoursGrandTotal,\\r\\n                       sum(ContractedTime) over() ContractedHoursGrandTotal,\\r\\n                       sum(NewBusinessHours) over (order by v.DivisionId) as NewBusinessHoursRunningTotal,\\r\\n                       sum(NewBusinessHours) over () as NewBusinessHoursGrandTotal,\\r\\n                       sum(AdministrativeHours) over (order by v.DivisionId) as AdministrativeHoursRunningTotal,\\r\\n                       sum(AdministrativeHours) over () as AdministrativeHoursGrandTotal,\\r\\n                       sum(TimeOffHours) over (order by v.DivisionId) as TimeOffHoursRunningTotal,\\r\\n                       sum(TimeOffHours) over () as TimeOffHoursGrandTotal,\\r\\n                       sum(TotalHours) over () as GlobalTotalHours\\r\\n                    from\\r\\n                    (\\r\\n                       select t.DivisionId as DivisionId,\\r\\n                             t.DivisionName as DivisionName,\\r\\n                             isnull(t.DirectHours, 0.0) as DirectHours,\\r\\n                             isnull(t.NewBusinessHours, 0.0) as NewBusinessHours,\\r\\n                             isnull(t.AdministrativeHours, 0.0) as AdministrativeHours,\\r\\n                             isnull(uv.TimeOffHours, 0.0) as TimeOffHours,\\r\\n                             isnull(t.[Hours], 0.0) + isnull(uv.TimeOffHours, 0.0) as TotalHours,\\r\\n\\t\\t\\t\\t\\t\\t\\t isnull(ph.ContractedTime, 0.0) as ContractedTime\\r\\n                       from\\r\\n                       (\\r\\n                          select di.Oid as DivisionId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name] as DivisionName,\\r\\n                                sum(t.[Hours]) as [Hours],\\r\\n                                (sum(t.[Hours]) - (sum(t.NewBusinessHours) + sum(t.AdministrativeHours))) as DirectHours,\\r\\n                                sum(t.NewBusinessHours) as NewBusinessHours,\\r\\n                                sum(AdministrativeHours) as AdministrativeHours\\r\\n                          from   SkillAnalyticsTimeUtilization t\\tleft outer join Department de on de.Oid = t.DepartmentId\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tleft outer join Division di on di.Oid = de.Division\\r\\n                          where\\t 1 = 1\\r\\n\\t\\t\\t\\t\\t\\t/*[ProjectFilter]*/ and t.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                          group by di.Oid,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name]\\r\\n                       ) t\\r\\n\\t\\t\\t\\t\\t\\tleft outer join \\r\\n\\t\\t\\t\\t\\t\\t   (\\r\\n\\t\\t\\t\\t\\t\\t\\t  select di.Oid as DivisionId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name] as DivisionName,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsum(uv.[Hours]) as TimeOffHours\\r\\n\\t\\t\\t\\t\\t\\t\\t  from   SkillAnalyticsLeaves uv\\tleft outer join Department de on de.Oid = uv.DepartmentId\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tleft outer join Division di on di.Oid = de.Division\\r\\n\\t\\t\\t\\t\\t\\t\\t  where\\t 1 = 1\\r\\n\\t\\t\\t\\t\\t\\t\\t  group by di.Oid,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name]\\r\\n\\t\\t\\t\\t\\t\\t   )\\r\\n\\t\\t\\t\\t\\t\\t   uv on (uv.DivisionId = t.DivisionId)\\r\\n\\t\\t\\t\\t\\t\\t   left outer join \\r\\n\\t\\t\\t\\t\\t\\t   (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tselect dp.DivisionId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdp.Division as DivisionName,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tsum(dp.ContractedHours) as ContractedTime\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfrom\\tAnalytics.DatamartPlannedHoursTotal dp\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgroup by dp.DivisionId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdp.Division\\r\\n\\t\\t\\t\\t\\t\\t   )\\r\\n\\t\\t\\t\\t\\t\\t   ph on (ph.DivisionId = t.DivisionId)\\r\\n\\t\\t\\t\\t\\t\\t) v \"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Time_Utilization_Per_Department/execute","Configuration":"{\n    \"rotated\": true,\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"DivisionName\",\n        \"type\": \"stackedBar\",\n        \"ignoreEmptyPoints\": true\n    },\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        }\n    },\n    \"series\": [\n        {\n            \"valueField\": \"DirectHours\",\n            \"name\": \"Actual\"\n        },\n        {\n            \"valueField\": \"ContractedTime\",\n            \"name\": \"Contracted\"\n        }\n    ],\n    \"size\": {\n        \"height\": 200\n    }\n}","DashboardDefinitionId":"19935c73-9f43-47b3-9cf4-a48c351e5ca2"}]}
