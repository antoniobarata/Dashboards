{"DashboardDefinitionRoles":[{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d","AccessRoleName":"Administrator"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d","AccessRoleName":"Administrator"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d","AccessRoleName":"Administrator"}],"Id":"6aaca829-16b7-495e-814a-b41e806e943d","Name":"Burn - Client","Active":true,"Location":1,"DocumentId":"41e148a1-25c9-4112-8c7e-de4f2087546d","DocumentName":"CommercialClient","DocumentsConfiguration":"{\"entity\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"patch\":{\"endpoint\":\"\",\"model\":[{\"field\":\"\",\"caption\":\"\",\"type\":\"\"}]},\"remove\":{\"endpoint\":\"\"},\"lookup\":{\"endpoint\":\"\"},\"lookupById\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{},\"patch\":{}},\"customDocument\":{\"useCustomStyle\":false,\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemName\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"dashboard\":false}}","Templates":[],"DashboardDefinitionComponents":[{"Id":"a4a4c9c5-477a-4ad9-b9e2-17d1c54bbef5","Name":"Time Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":2,"Parameters":"[{\"WidgetSubTitle\":\"Forecast vs Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":13,\"WidgetRows\":17,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Forecast\",\"metricFieldValue\":\"ForecastTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"With ProjectYearMonths As\\r\\n                                (\\r\\n\\t                                select @ProjectId as ProjectId, \\r\\n\\t                                ym.* \\r\\n\\t                                from YearsMonths(\\r\\n\\t                                (select p.BeginDate from Project p where p.Oid = @ProjectId), \\r\\n\\t                                (select p.EndDate from Project p where p.Oid = @ProjectId)) ym\\r\\n                                ),\\r\\n                                PlannedAndContracted AS\\r\\n                                (\\r\\n\\t                                select\\tv.[Year],\\r\\n\\t\\t\\t                                v.[Month],\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHours), 0) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (), 0) AS PlannedGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHoursSell), 0) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (), 0) AS PlannedSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ContractedHours), 0) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (), 0) AS ContractedTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(v.ContractedHoursRate), 0) as ContractedRate \\r\\n\\t\\t\\t                                from\\tSkillAnalyticsBurnRate v\\r\\n\\t                                where\\tv.[Year] is null and v.[Month] is null \\r\\n\\t\\t\\t                                /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t                                group by v.[Year],\\r\\n\\t\\t\\t                                v.[Month]\\r\\n                                )\\r\\n                                select\\tv.*,\\r\\n\\t\\t                                pc.PlannedTime,\\r\\n\\t\\t                                pc.PlannedTimeRunningTotal,\\r\\n\\t\\t                                pc.PlannedGrandTotal,\\r\\n\\t\\t                                pc.PlannedSell,\\r\\n\\t\\t                                pc.PlannedSellRunningTotal,\\r\\n\\t\\t                                pc.PlannedSellGrandTotal,\\r\\n\\t\\t                                pc.ContractedTime,\\r\\n\\t\\t                                pc.ContractedTimeRunningTotal,\\r\\n\\t\\t                                pc.ContractedTimeGrandTotal,\\r\\n\\t\\t                                pc.ContractedRate\\r\\n                                from\\r\\n\\t\\t                                (\\r\\n                                            select\\tconcat(FORMAT(pym.[Month], '0#'), '/', pym.[Year]) as MonthYear,\\r\\n\\t\\t                                                pym.YearMonth as MonthYearNumber,\\r\\n\\t\\t                                                isnull(sum(v.ActualHours), 0) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (ORDER BY pym.YearMonth), 0) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (), 0) AS ActualTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursCost), 0) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (), 0) AS ActualCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursSell), 0) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (), 0) AS ActualSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillable), 0) as ActualBillableTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillable)) OVER (), 0) AS ActualBillableTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillableCost), 0) as ActualBillableCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableCost)) OVER (), 0) AS ActualBillableCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillableSell), 0) as ActualBillableSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableSell)) OVER (), 0) AS ActualBillableSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillable), 0) as ActualNonBillableTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillable)) OVER (), 0) AS ActualNonBillableTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillableCost), 0) as ActualNonBillableCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (), 0) AS ActualNonBillableCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillableSell), 0) as ActualNonBillableSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (), 0) AS ActualNonBillableSellGrandTotal,\\r\\n                                                        isnull(sum(v.ForecastHours), 0) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (), 0) AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ForecastHoursSell), 0) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (), 0) AS ForecastSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.AllocatedHours), 0) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (), 0) AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.AllocatedHoursSell), 0) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (), 0) AS AllocatedSellGrandTotal\\r\\n                                                from\\tProjectYearMonths pym\\r\\n\\t\\t\\t\\t\\t\\t                                left outer join SkillAnalyticsBurnRate v on \\r\\n\\t\\t\\t\\t\\t\\t\\t                                (v.ProjectId = pym.ProjectId and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                v.[Year] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                v.[Month] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                cast(concat(v.[Year], FORMAT(v.[Month], '0#')) as int) = pym.YearMonth),\\r\\n\\t\\t\\t\\t\\t\\t                                Project p,\\r\\n\\t\\t\\t\\t\\t\\t                                CommercialClient cc\\r\\n                                                where\\tpym.ProjectId = p.Oid and \\r\\n\\t\\t                                                p.Client = cc.Oid\\r\\n\\t\\t                                                /*[ProjectFilter]*/ and pym.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                group by pym.[Year],\\r\\n\\t\\t                                                pym.[Month],\\r\\n\\t\\t\\t\\t\\t\\t                                pym.YearMonth\\r\\n\\t                                ) v,\\r\\n\\t                                PlannedAndContracted pc\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Burn_Rate_By_Project_Per_Year_Month/execute","Configuration":"{\n  \"size\": {\n    \"height\": 300\n  },\n  \"commonSeriesSettings\": {\n    \"argumentField\": \"MonthYear\",\n    \"ignoreEmptyPoints\": false\n  },\n  \"panes\": [\n    {\n      \"name\": \"accumulated\"\n    },\n    {\n      \"name\": \"monthly\"\n    }\n  ],\n  \"series\": [\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"type\": \"bar\",\n      \"valueField\": \"ForecastTime\",\n      \"name\": \"Forecast Time\"\n    },\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"type\": \"line\",\n      \"valueField\": \"ActualTime\",\n      \"name\": \"Actual Time\",\n      \"point\": {\n        \"size\": 6\n      }\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"bar\",\n      \"valueField\": \"ForecastTimeRunningTotal\",\n      \"name\": \"# Forecast Time\"\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"line\",\n      \"valueField\": \"ActualTimeRunningTotal\",\n      \"name\": \"# Actual Time\",\n      \"point\": {\n        \"size\": 6\n      }\n    }\n  ],\n  \"valueAxis\": [\n    {\n      \"name\": \"monthly\",\n      \"position\": \"left\"\n    },\n    {\n      \"name\": \"accumulated\",\n      \"position\": \"left\"\n    }\n  ],\n  \"legend\": {\n    \"rowCount\": 1,\n    \"verticalAlignment\": \"bottom\",\n    \"horizontalAlignment\": \"center\"\n  }\n}","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d"},{"Id":"9fdfc7af-b7e7-4716-a7c2-1e548cf2b9ed","Name":"Typology Group Burn","Active":true,"UseQuery":false,"Query":null,"Size":4,"Order":4,"Parameters":"[\r\n    {\r\n        \"WidgetSubTitle\": \"Contracted vs Actual Time\",\r\n        \"WidgetType\": \"chart\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"#efefef\",\r\n        \"WidgetHeight\": \"\",\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            },\r\n            \"WidgetMetrics\": {\r\n                \"visible\": true,\r\n                \"Metrics\": [\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"# Contracted\",\r\n                        \"metricFieldValue\": \"ContractedTimeGrandTotal\"\r\n                    },\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"# Actual\",\r\n                        \"metricFieldValue\": \"ActualTimeGrandTotal\"\r\n                    }\r\n                ]\r\n            },\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        },\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"querytext\",\r\n                \"value\": \"With ProjectYearMonths As\\r\\n                                (\\r\\n\\t                                select @ProjectId as ProjectId, \\r\\n\\t                                ym.* \\r\\n\\t                                from YearsMonths(\\r\\n\\t                                (select p.BeginDate from Project p where p.Oid = @ProjectId), \\r\\n\\t                                (select p.EndDate from Project p where p.Oid = @ProjectId)) ym\\r\\n                                ),\\r\\n                                PlannedAndContracted AS\\r\\n                                (\\r\\n\\t                                select\\tv.UserTypologyGroupId as TypologyGroupId,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHours), 0) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (ORDER BY v.UserTypologyGroupId), 0) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (), 0) AS PlannedGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHoursSell), 0) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (ORDER BY v.UserTypologyGroupId), 0) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (), 0) AS PlannedSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ContractedHours), 0) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (ORDER BY v.UserTypologyGroupId), 0) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (), 0) AS ContractedTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(v.ContractedHoursRate), 0) as ContractedRate \\r\\n\\t\\t\\t                                from\\tSkillAnalyticsBurnRate v\\r\\n\\t                                where\\t1 = 1 \\r\\n\\t\\t\\t                                /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t                                group by v.UserTypologyGroupId\\r\\n                                )\\r\\n                                select\\t(utg.[Name]) as TypologyGroup ,\\r\\n\\t\\t                                v.*,\\r\\n\\t\\t                                pc.PlannedTime,\\r\\n\\t\\t                                pc.PlannedTimeRunningTotal,\\r\\n\\t\\t                                pc.PlannedGrandTotal,\\r\\n\\t\\t                                pc.PlannedSell,\\r\\n\\t\\t                                pc.PlannedSellRunningTotal,\\r\\n\\t\\t                                pc.PlannedSellGrandTotal,\\r\\n\\t\\t                                pc.ContractedTime,\\r\\n\\t\\t                                pc.ContractedTimeRunningTotal,\\r\\n\\t\\t                                pc.ContractedTimeGrandTotal,\\r\\n\\t\\t                                pc.ContractedRate\\r\\n                                from\\r\\n\\t\\t                                (\\r\\n\\t\\t\\t                                select\\tv.UserTypologyGroupId as TypologyGroupId,\\r\\n\\t\\t\\t\\t\\t                                concat(FORMAT(pym.[Month], '0#'), '/', pym.[Year]) as MonthYear,\\r\\n\\t\\t\\t\\t\\t                                pym.YearMonth as MonthYearNumber,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ActualHours), 0) as ActualTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (), 0) AS ActualTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ActualHoursCost), 0) as ActualCost,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (), 0) AS ActualCostGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ActualHoursSell), 0) as ActualSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (), 0) AS ActualSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ForecastHours), 0) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (), 0) AS ForecastTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ForecastHoursSell), 0) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (ORDER BY v.UserTypologyGroupId, pym.YearMonth), 0) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (), 0) AS ForecastSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(v.PlannedHours), 0) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(sum(v.PlannedHours)) OVER (PARTITION BY v.UserTypologyGroupId), 0) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.AllocatedHours), 0) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (), 0) AS AllocatedTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.AllocatedHoursSell), 0) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (), 0) AS AllocatedSellGrandTotal\\r\\n\\t\\t\\t                                from\\tProjectYearMonths pym\\r\\n\\t\\t\\t\\t\\t                                left outer join SkillAnalyticsBurnRate v on \\r\\n\\t\\t\\t\\t\\t                                (v.ProjectId = pym.ProjectId and \\r\\n\\t\\t\\t\\t\\t\\t                                (\\r\\n\\t\\t\\t\\t\\t\\t\\t                                v.[Year] is not null and\\r\\n\\t\\t\\t\\t\\t\\t\\t                                v.[Month] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t                                (v.[Year] = pym.[Year] and v.[Month] = pym.[Month])\\r\\n\\t\\t\\t\\t\\t\\t                                )\\r\\n\\t\\t\\t\\t\\t                                ),\\r\\n\\t\\t\\t\\t\\t                                Project p,\\r\\n\\t\\t\\t\\t\\t                                CommercialClient cc\\r\\n\\t\\t\\t                                where\\tpym.ProjectId = p.Oid and \\r\\n\\t\\t\\t\\t\\t                                p.Client = cc.Oid\\r\\n\\t\\t\\t\\t\\t                                /*[ProjectFilter]*/ and pym.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t\\t\\t                                group by v.UserTypologyGroupId, \\r\\n\\t\\t\\t\\t\\t                                pym.[Year],\\r\\n\\t\\t\\t\\t\\t                                pym.[Month],\\r\\n\\t\\t\\t\\t\\t                                pym.YearMonth\\r\\n\\t\\t                                ) v,\\r\\n\\t\\t                                PlannedAndContracted pc,\\r\\n\\t\\t                                UserTypologyGroup utg \\r\\n                                where\\tv.TypologyGroupId = utg.Oid and\\r\\n\\t\\t                                v.TypologyGroupId = pc.TypologyGroupId\"\r\n            }\r\n        },\r\n        \"Filters\": {},\r\n        \"QueryConfiguration\": {\r\n            \"RequiredFilters\": [\r\n                \"projectId\"\r\n            ]\r\n        }\r\n    }\r\n]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Burn_Rate_By_Project_Per_Typology_Group_Per_Year_Month/execute","Configuration":"{\n  \"size\": {\n    \"height\": 250\n  },\n  \"commonSeriesSettings\": {\n    \"ignoreEmptyPoints\": false,\n    \"argumentField\": \"MonthYear\",\n    \"valueField\": \"ActualTime\",\n    \"type\": \"line\",\n    \"point\": {\n      \"size\": 6\n    },\n    \"border\": {\n      \"visible\": true\n    }\n  },\n  \"commonAxisSettings\": {\n    \"grid\": {\n      \"visible\": true\n    },\n    \"discreteAxisDivisionMode\": \"crossLabels\"\n  },\n  \"commonPaneSettings\": {\n    \"border\": {\n      \"visible\": true\n    }\n  },\n  \"seriesTemplate\": {\n    \"nameField\": \"TypologyGroup\"\n  },\n  \"legend\": {\n    \"rowCount\": 1,\n    \"verticalAlignment\": \"bottom\",\n    \"horizontalAlignment\": \"center\"\n  }\n}","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d"},{"Id":"55db9f3e-f3e6-4da7-90d0-22037093e067","Name":"User Burn","Active":true,"UseQuery":false,"Query":null,"Size":4,"Order":6,"Parameters":"[\r\n    {\r\n        \"WidgetSubTitle\": \"Actual Time\",\r\n        \"WidgetType\": \"chart\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"#efefef\",\r\n        \"WidgetHeight\": \"\",\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            },\r\n            \"WidgetMetrics\": {\r\n                \"visible\": true,\r\n                \"Metrics\": [\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"Total\",\r\n                        \"metricFieldValue\": \"DirectHoursGrandTotal\"\r\n                    }\r\n                ]\r\n            },\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        },\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"querytext\",\r\n                \"value\": \"select v.*,\\r\\n                       sum(DirectHours) over (order by v.EmployeeId) as DirectHoursRunningTotal,\\r\\n                       sum(DirectHours) over () as DirectHoursGrandTotal,\\r\\n                       sum(NewBusinessHours) over (order by v.EmployeeId) as NewBusinessHoursRunningTotal,\\r\\n                       sum(NewBusinessHours) over () as NewBusinessHoursGrandTotal,\\r\\n                       sum(AdministrativeHours) over (order by v.EmployeeId) as AdministrativeHoursRunningTotal,\\r\\n                       sum(AdministrativeHours) over () as AdministrativeHoursGrandTotal,\\r\\n                       sum(TimeOffHours) over (order by v.EmployeeId) as TimeOffHoursRunningTotal,\\r\\n                       sum(TimeOffHours) over () as TimeOffHoursGrandTotal,\\r\\n                       sum(TotalHours) over () as GlobalTotalHours\\r\\n                    from\\r\\n                    (\\r\\n                       select t.[UserId] as EmployeeId,\\r\\n                             t.[User] as EmployeeName,\\r\\n                             isnull(t.DirectHours, 0.0) as DirectHours,\\r\\n                             isnull(t.NewBusinessHours, 0.0) as NewBusinessHours,\\r\\n                             isnull(t.AdministrativeHours, 0.0) as AdministrativeHours,\\r\\n                             isnull(uv.TimeOffHours, 0.0) as TimeOffHours,\\r\\n                             isnull(t.[Hours], 0.0) + isnull(uv.TimeOffHours, 0.0) as TotalHours\\r\\n                       from\\r\\n                       (\\r\\n                          select t.[UserId],\\r\\n                                t.[User],\\r\\n                                sum(t.[Hours]) as [Hours],\\r\\n                                (sum(t.[Hours]) - (sum(t.NewBusinessHours) + sum(t.AdministrativeHours))) as DirectHours,\\r\\n                                sum(t.NewBusinessHours) as NewBusinessHours,\\r\\n                                sum(AdministrativeHours) as AdministrativeHours\\r\\n                          from   SkillAnalyticsTimeUtilization t\\r\\n\\t                      where\\t 1 = 1\\r\\n                                /*[ProjectFilter]*/ and t.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                          group by t.[UserId],\\r\\n                                t.[User]\\r\\n                       ) t\\r\\n                       left outer join \\r\\n                       (\\r\\n                          select uv.[UserId],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tuv.[User],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tsum(uv.[Hours]) as TimeOffHours\\r\\n                          from   SkillAnalyticsLeaves uv\\r\\n\\t                      where\\t 1 = 1\\r\\n                        group by uv.[UserId],\\r\\n                                uv.[User]\\r\\n                       )\\r\\n                       uv on (uv.[UserId] = t.UserId)\\r\\n                    ) v\"\r\n            }\r\n        },\r\n        \"Filters\": {},\r\n        \"QueryConfiguration\": {\r\n            \"PreviousPeriod\": {\r\n                \"Show\": false,\r\n                \"KeyFieldName\": \"\",\r\n                \"Type\": 0\r\n            },\r\n            \"RequiredFilters\": [\r\n                \"projectId\"\r\n            ]\r\n        }\r\n    }\r\n]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Time_Utilization_Per_User/execute","Configuration":"{\n  \"commonSeriesSettings\": {\n    \"argumentField\": \"EmployeeName\",\n    \"type\": \"bar\",\n    \"ignoreEmptyPoints\": true,\n    \"valueField\": \"DirectHours\"\n  },\n  \"argumentAxis\": {\n    \"label\": {\n      \"visible\": true\n    }\n  },\n  \"seriesTemplate\": {\n    \"nameField\": \"EmployeeName\"\n  },\n\"size\": {\n\"height\": 250\n},\n  \"palette\": [\n    \"#da5859\",\n    \"#f09777\",\n    \"#a5d7d0\",\n    \"#fbc987\",\n    \"#a5bdd7\",\n    \"#e97c82\",\n    \"#81d4fa\",\n    \"#c5e1a5\",\n    \"#ce93d8\",\n    \"#fff59d\"\n  ],\n  \"legend\": {\n    \"visible\": false\n  },\n  \"tooltip\": {\n    \"enabled\": true,\n \"customizeTooltip\": \"function(e){  \\n\\t\\treturn {     \\n\\t\\t\\t'text': '<span style=\\\"font-size: 14px; color: #808080;\\\">' +  e.argumentText + '</span><br/><span style=\\\"color: '+ e.point.getColor() +'\\\">' +  Math.round(Math.abs(e.valueText)*100)/100 + '</span>'    \\n\\t\\t};   }\"\n  }\n}","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d"},{"Id":"17eac46c-ffff-4b07-a338-6cae9df4cc67","Name":"Projects","Active":true,"UseQuery":false,"Query":"","Size":12,"Order":1,"Parameters":"[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"ProjectId\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":13,\"WidgetColumns\":48,\"WidgetHeader\":{\"showTitle\":true,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"SELECT \\r\\n\\tv.ProjectId,\\r\\n\\tv.ProjectName,\\r\\n\\tjt.[Name] as FeeType,\\r\\n\\tdp.ProjectBeginDate,\\r\\n\\tdp.ProjectEndDate,\\r\\n\\tSUM(v.ActualTime) as ActualTime,\\r\\n\\tSUM(v.BillableTime) as BillableTime,\\r\\n\\t(SUM(v.ActualTime) + SUM(v.BillableTime)) as NonBillable,\\r\\n\\tSUM(v.PlannedTime) as PlannedTime,\\r\\n\\tSUM(v.ContractedTime) as ContractedTime,\\r\\n\\tSUM(v.ContractedRevenue) as ContractedRevenue,\\r\\n\\tIIF(SUM(v.PlannedTime) > 0, (SUM(v.ActualTime) / SUM(v.PlannedTime)), 0) as PlannedBurnPercentage,\\r\\n\\tIIF(SUM(v.ContractedTime) > 0, (SUM(v.ActualTime) / SUM(v.ContractedTime)), 0) as ActualBurnPercentage,\\r\\n\\tSUM(v.ForecastTime) as ForecastTime,\\r\\n\\t(SUM(v.ActualTime) + SUM(v.ForecastTime)) as ActualPlusForecast,\\r\\n\\tIIF(SUM(v.ContractedTime) > 0, (SUM(v.ActualTime) + SUM(v.ForecastTime)) / SUM(v.ContractedTime), 0) as ActualPlusForecastBurnPercentage\\r\\nFROM\\r\\n(\\r\\n\\tSELECT \\r\\n\\t\\tv.ProjectId,\\r\\n\\t\\tv.Project as ProjectName,\\r\\n\\t\\tSUM(v.ActualTime) as ActualTime,\\r\\n\\t\\tSUM(v.BillableTime) as BillableTime,\\r\\n\\t\\t0.0 as PlannedTime,\\r\\n\\t\\t0.0 as ContractedTime,\\r\\n\\t\\t0.0 as ContractedRevenue,\\r\\n\\t\\t0.0 as ForecastTime\\r\\n\\tFROM\\r\\n\\t\\tAnalytics.Timesheet(@CurrentUserId) v\\r\\n\\tWHERE\\r\\n\\t\\tv.ClientId = @ClientId\\r\\n\\tGROUP BY\\r\\n\\t\\tv.ProjectId,\\r\\n\\t\\tv.Project\\r\\n\\tUNION ALL\\r\\n\\tSELECT \\r\\n\\t\\tv.ProjectId,\\r\\n\\t\\tv.Project as ProjectName,\\r\\n\\t\\t0.0 as ActualTime,\\r\\n\\t\\t0.0 as BillableTime,\\r\\n\\t\\tSUM(v.[Hours]) as PlannedTime,\\r\\n\\t\\t0.0 as ContractedTime,\\r\\n\\t\\t0.0 as ContractedRevenue,\\r\\n\\t\\t0.0 as ForecastTime\\r\\n\\tFROM\\r\\n\\t\\tAnalytics.PlannedHoursTotal(@CurrentUserId) v\\r\\n\\tWHERE\\r\\n\\t\\tv.ClientId = @ClientId\\r\\n\\tGROUP BY\\r\\n\\t\\tv.ProjectId,\\r\\n\\t\\tv.Project\\r\\n\\tUNION ALL\\r\\n\\tSELECT \\r\\n\\t\\tv.ProjectId,\\r\\n\\t\\tv.Project as ProjectName,\\r\\n\\t\\t0.0 as ActualTime,\\r\\n\\t\\t0.0 as BillableTime,\\r\\n\\t\\t0.0 as PlannedTime,\\r\\n\\t\\tSUM(v.[ContractedHours]) as ContractedTime,\\r\\n\\t\\tSUM(v.[ContractedHours] * v.Rate) as ContractedRevenue,\\r\\n\\t\\t0.0 as ForecastTime\\r\\n\\tFROM\\r\\n\\t\\tAnalytics.PlannedHoursTotal(@CurrentUserId) v\\r\\n    WHERE\\r\\n\\t\\tv.ClientId = @ClientId\\r\\n\\t\\tAND v.JobId is null\\r\\n\\tGROUP BY\\r\\n\\t\\tv.ProjectId,\\r\\n\\t\\tv.Project\\r\\n\\tUNION ALL\\r\\n\\tSELECT \\r\\n\\t\\tv.ProjectId,\\r\\n\\t\\tv.Project as ProjectName,\\r\\n\\t\\t0.0 as ActualTime,\\r\\n\\t\\t0.0 as BillableTime,\\r\\n\\t\\t0.0 as PlannedTime,\\r\\n\\t\\t0.0 as ContractedTime,\\r\\n\\t\\t0.0 as ContractedRevenue,\\r\\n\\t\\tSUM(v.[Hours]) as ForecastTime\\r\\n\\tFROM\\r\\n\\t\\tAnalytics.PlannedHours(@CurrentUserId) v\\r\\n\\tWHERE \\r\\n\\t\\tv.ClientId = @ClientId\\r\\n\\tGROUP BY\\r\\n\\t\\tv.ProjectId,\\r\\n\\t\\tv.Project\\r\\n) v \\r\\n\\tleft outer join Analytics.DatamartProject dp on dp.Oid = v.ProjectId\\r\\n\\tleft outer join [Contract] c on dp.ContractId = c.Oid\\r\\n\\tleft outer join JobType jt on jt.Oid = c.JobType\\r\\nGROUP BY\\r\\n\\tv.ProjectId,\\r\\n\\tv.ProjectName,\\r\\n\\tjt.[Name],\\r\\n\\tdp.ProjectBeginDate,\\r\\n\\tdp.ProjectEndDate\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[\"clientId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"","Configuration":"{\r\n    \"selection\": {\r\n        \"mode\": \"single\"\r\n    },\r\n    \"filterRow\": {\r\n        \"visible\": true\r\n    },\r\n    \"height\": \"300\",\r\n    \"columnsAutoWidth\": true,\r\n    \"allowColumnResizing\": false,\r\n    \"columnResizingMode\": \"nextColumn\",\r\n    \"columnMinWidth\": \"100\",\r\n    \"filterPanel\": {\r\n        \"visible\": false\r\n    },\r\n    \"groupPanel\": {\r\n        \"visible\": false\r\n    },\r\n    \"scrolling\": {\r\n        \"mode\": \"virtual\"\r\n    },\r\n    \"columns\": [\r\n        {\r\n            \"dataField\": \"ProjectName\",\r\n            \"caption\": \"Project\",\r\n            \"width\": 200,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"FeeType\",\r\n            \"caption\": \"Fee\",\r\n            \"width\": 100,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ProjectBeginDate\",\r\n            \"caption\": \"Start Date\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"date\",\r\n            \"format\": \"d MMM\",\r\n            \"allowGrouping\": false,\r\n            \"width\": 100,\r\n            \"visibleIndex\": 1\r\n        },\r\n        {\r\n            \"dataField\": \"ProjectEndDate\",\r\n            \"caption\": \"End Date\",\r\n            \"alignment\": \"center\",\r\n            \"dataType\": \"date\",\r\n            \"format\": \"d MMM\",\r\n            \"allowGrouping\": false,\r\n            \"width\": 100,\r\n            \"visibleIndex\": 2\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedTime\",\r\n            \"caption\": \"Contracted\",\r\n            \"format\": \"#,##0.00\",\r\n            \"width\": 100,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ForecastTime\",\r\n            \"caption\": \"Forecasted\",\r\n            \"format\": \"#,##0.00\",\r\n            \"width\": 100,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"PlannedTime\",\r\n            \"caption\": \"Planned\",\r\n            \"format\": \"#,##0.00\",\r\n            \"width\": 100,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ActualTime\",\r\n            \"caption\": \"Actual\",\r\n            \"format\": \"#,##0.00\",\r\n            \"width\": 100,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ActualPlusForecast\",\r\n            \"caption\": \"Actual + Forecast\",\r\n            \"format\": \"#,##0.00\",\r\n            \"width\": 150,\r\n            \"allowGrouping\": false\r\n        },\r\n        {\r\n            \"dataField\": \"ActualBurnPercentage\",\r\n            \"caption\": \"Actual Burn %\",\r\n            \"dataType\": \"number\",\r\n            \"format\": \"percent\",\r\n            \"width\": 150,\r\n            \"allowGrouping\": false,\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"ActualPlusForecastBurnPercentage\",\r\n            \"caption\": \"Actual + Forecast Burn %\",\r\n            \"dataType\": \"number\",\r\n            \"format\": \"percent\",\r\n            \"width\": 175,\r\n            \"allowGrouping\": false,\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"PlannedBurnPercentage\",\r\n            \"caption\": \"Planned Burn %\",\r\n            \"dataType\": \"number\",\r\n            \"format\": \"percent\",\r\n            \"width\": 150,\r\n            \"allowGrouping\": false,\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedRevenue\",\r\n            \"caption\": \"Contracted Revenue\",\r\n            \"width\": 150,\r\n            \"format\": {\r\n                \"type\": \"currency\",\r\n                \"precision\": 2\r\n            },\r\n            \"allowGrouping\": false\r\n        }\r\n    ],\r\n    \"summary\": {\r\n        \"calculateCustomSummary\": \"function (options) {\r\n            if (options.name === 'ActualBurn') {\r\n                switch(options.summaryProcess) {\r\n                    case 'start':\r\n                        options.totalValue = [\r\n                    0,\r\n                    0\r\n                ];\r\n                        break;\r\n                    case 'calculate':\r\n                        options.totalValue[\r\n                    0\r\n                ] = options.totalValue[\r\n                    0\r\n                ] + options.value.ActualTime;\r\n                        options.totalValue[\r\n                    1\r\n                ] = options.totalValue[\r\n                    1\r\n                ] + options.value.ContractedTime;\r\n                        break;\r\n                    case 'finalize':\r\n                        if(Number(options.totalValue[\r\n                    1\r\n                ]) > 0)\r\n                            options.totalValue = (options.totalValue[\r\n                    0\r\n                ] / options.totalValue[\r\n                    1\r\n                ]);\r\n                        else\r\n                            options.totalValue = 0;\r\n                            break;\r\n            }\r\n        }\r\n            if (options.name === 'ActualPlusForecastBurn') {\r\n                switch(options.summaryProcess) {\r\n                    case 'start':\r\n                        options.totalValue = [\r\n                    0,\r\n                    0\r\n                ];\r\n                        break;\r\n                    case 'calculate':\r\n                        options.totalValue[\r\n                    0\r\n                ] = options.totalValue[\r\n                    0\r\n                ] + options.value.ActualPlusForecast;\r\n                        options.totalValue[\r\n                    1\r\n                ] = options.totalValue[\r\n                    1\r\n                ] + options.value.ContractedTime;\r\n                        break;\r\n                    case 'finalize':\r\n                        if(Number(options.totalValue[\r\n                    1\r\n                ]) > 0)\r\n                            options.totalValue = (options.totalValue[\r\n                    0\r\n                ] / options.totalValue[\r\n                    1\r\n                ]);\r\n                        else\r\n                            options.totalValue = 0;\r\n                            break;\r\n            }\r\n        }\r\n            if (options.name === 'PlannedBurn') {\r\n                switch(options.summaryProcess) {\r\n                    case 'start':\r\n                        options.totalValue = [\r\n                    0,\r\n                    0\r\n                ];\r\n                        break;\r\n                    case 'calculate':\r\n                        options.totalValue[\r\n                    0\r\n                ] = options.totalValue[\r\n                    0\r\n                ] + options.value.ActualTime;\r\n                        options.totalValue[\r\n                    1\r\n                ] = options.totalValue[\r\n                    1\r\n                ] + options.value.PlannedTime;\r\n                        break;\r\n                    case 'finalize':\r\n                        if(Number(options.totalValue[\r\n                    1\r\n                ]) > 0)\r\n                            options.totalValue = (options.totalValue[\r\n                    0\r\n                ] / options.totalValue[\r\n                    1\r\n                ]);\r\n                        else\r\n                            options.totalValue = 0;\r\n                            break;\r\n            }\r\n        }\r\n    }\",\r\n        \"totalItems\": [\r\n        {\r\n            \"name\": \"PlannedBurn\",\r\n            \"showInColumn\": \"Planned Burn %\",\r\n            \"displayFormat\": \"{0}\",\r\n            \"valueFormat\": {\r\n                \"type\": \"percent\",\r\n                \"precision\": 1\r\n            },\r\n            \"summaryType\": \"custom\",\r\n            \"alignment\": \"right\"\r\n        },\r\n        {\r\n            \"name\": \"ActualPlusForecastBurn\",\r\n            \"showInColumn\": \"Actual + Forecast Burn %\",\r\n            \"displayFormat\": \"{0}\",\r\n            \"valueFormat\": {\r\n                \"type\": \"percent\",\r\n                \"precision\": 1\r\n            },\r\n            \"summaryType\": \"custom\",\r\n            \"alignment\": \"right\"\r\n        },\r\n        {\r\n            \"name\": \"ActualBurn\",\r\n            \"showInColumn\": \"Actual Burn %\",\r\n            \"displayFormat\": \"{0}\",\r\n            \"valueFormat\": {\r\n                \"type\": \"percent\",\r\n                \"precision\": 1\r\n            },\r\n            \"summaryType\": \"custom\",\r\n            \"alignment\": \"right\"\r\n        },\r\n        {\r\n            \"column\": \"ProjectName\",\r\n            \"summaryType\": \"count\",\r\n            \"displayFormat\": \"All Projects\"\r\n        },\r\n        {\r\n            \"column\": \"ActualTime\",\r\n            \"summaryType\": \"sum\",\r\n            \"valueFormat\": \"#,##0.00\",\r\n            \"displayFormat\": \"{0}\"\r\n        },\r\n        {\r\n            \"column\": \"Forecasted\",\r\n            \"summaryType\": \"sum\",\r\n            \"valueFormat\": \"#,##0.00\",\r\n            \"displayFormat\": \"{0}\"\r\n        },\r\n        {\r\n            \"column\": \"Actual + Forecast\",\r\n            \"summaryType\": \"sum\",\r\n            \"valueFormat\": \"#,##0.00\",\r\n            \"displayFormat\": \"{0}\"\r\n        },\r\n        {\r\n            \"column\": \"ActualCost\",\r\n            \"summaryType\": \"sum\",\r\n            \"valueFormat\": {\r\n                \"type\": \"currency\",\r\n                \"precision\": 2\r\n            },\r\n            \"displayFormat\": \"{0}\"\r\n        },\r\n        {\r\n            \"column\": \"PlannedTime\",\r\n            \"summaryType\": \"sum\",\r\n            \"valueFormat\": \"#,##0.00\",\r\n            \"displayFormat\": \"{0}\"\r\n        },\r\n        {\r\n            \"column\": \"ContractedRevenue\",\r\n            \"summaryType\": \"sum\",\r\n            \"valueFormat\": {\r\n                \"type\": \"currency\",\r\n                \"precision\": 2\r\n            },\r\n            \"displayFormat\": \"{0}\"\r\n        },\r\n        {\r\n            \"column\": \"ContractedTime\",\r\n            \"summaryType\": \"sum\",\r\n            \"valueFormat\": \"#,##0.00\",\r\n            \"displayFormat\": \"{0}\"\r\n        }\r\n    ]\r\n}\r\n}","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d"},{"Id":"187eb81d-0fb2-4922-9334-70523fc20248","Name":"Revenue Burn","Active":true,"UseQuery":false,"Query":null,"Size":6,"Order":3,"Parameters":"[{\"WidgetSubTitle\":\"Planned Revenue vs Actual Cost\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":24,\"WidgetYPosition\":13,\"WidgetRows\":17,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Revenue\",\"metricFieldValue\":\"ForecastSellGrandTotal\"},{\"visible\":true,\"metricName\":\"# Cost\",\"metricFieldValue\":\"ActualCostGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"With ProjectYearMonths As\\r\\n                                (\\r\\n\\t                                select @ProjectId as ProjectId, \\r\\n\\t                                ym.* \\r\\n\\t                                from YearsMonths(\\r\\n\\t                                (select p.BeginDate from Project p where p.Oid = @ProjectId), \\r\\n\\t                                (select p.EndDate from Project p where p.Oid = @ProjectId)) ym\\r\\n                                ),\\r\\n                                PlannedAndContracted AS\\r\\n                                (\\r\\n\\t                                select\\tv.[Year],\\r\\n\\t\\t\\t                                v.[Month],\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHours), 0) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHours)) OVER (), 0) AS PlannedGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.PlannedHoursSell), 0) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.PlannedHoursSell)) OVER (), 0) AS PlannedSellGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(v.ContractedHours), 0) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (ORDER BY v.[Year], v.[Month]), 0) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ContractedHours)) OVER (), 0) AS ContractedTimeGrandTotal,\\r\\n\\t\\t\\t\\t\\t                                isnull(max(v.ContractedHoursRate), 0) as ContractedRate \\r\\n\\t\\t\\t                                from\\tSkillAnalyticsBurnRate v\\r\\n\\t                                where\\tv.[Year] is null and v.[Month] is null \\r\\n\\t\\t\\t                                /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t                                group by v.[Year],\\r\\n\\t\\t\\t                                v.[Month]\\r\\n                                )\\r\\n                                select\\tv.*,\\r\\n\\t\\t                                pc.PlannedTime,\\r\\n\\t\\t                                pc.PlannedTimeRunningTotal,\\r\\n\\t\\t                                pc.PlannedGrandTotal,\\r\\n\\t\\t                                pc.PlannedSell,\\r\\n\\t\\t                                pc.PlannedSellRunningTotal,\\r\\n\\t\\t                                pc.PlannedSellGrandTotal,\\r\\n\\t\\t                                pc.ContractedTime,\\r\\n\\t\\t                                pc.ContractedTimeRunningTotal,\\r\\n\\t\\t                                pc.ContractedTimeGrandTotal,\\r\\n\\t\\t                                pc.ContractedRate\\r\\n                                from\\r\\n\\t\\t                                (\\r\\n                                            select\\tconcat(FORMAT(pym.[Month], '0#'), '/', pym.[Year]) as MonthYear,\\r\\n\\t\\t                                                pym.YearMonth as MonthYearNumber,\\r\\n\\t\\t                                                isnull(sum(v.ActualHours), 0) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (ORDER BY pym.YearMonth), 0) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHours)) OVER (), 0) AS ActualTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursCost), 0) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursCost)) OVER (), 0) AS ActualCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursSell), 0) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursSell)) OVER (), 0) AS ActualSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillable), 0) as ActualBillableTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillable)) OVER (), 0) AS ActualBillableTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillableCost), 0) as ActualBillableCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableCost)) OVER (), 0) AS ActualBillableCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursBillableSell), 0) as ActualBillableSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualBillableSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursBillableSell)) OVER (), 0) AS ActualBillableSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillable), 0) as ActualNonBillableTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillable)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillable)) OVER (), 0) AS ActualNonBillableTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillableCost), 0) as ActualNonBillableCost,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableCost)) OVER (), 0) AS ActualNonBillableCostGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ActualHoursNonBillableSell), 0) as ActualNonBillableSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (ORDER BY pym.YearMonth), 0) AS ActualNonBillableSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ActualHoursNonBillableSell)) OVER (), 0) AS ActualNonBillableSellGrandTotal,\\r\\n                                                        isnull(sum(v.ForecastHours), 0) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHours)) OVER (), 0) AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.ForecastHoursSell), 0) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.ForecastHoursSell)) OVER (), 0) AS ForecastSellGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.AllocatedHours), 0) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHours)) OVER (), 0) AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                                isnull(sum(v.AllocatedHoursSell), 0) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY pym.YearMonth), 0) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t                                isnull(sum(sum(v.AllocatedHoursSell)) OVER (), 0) AS AllocatedSellGrandTotal\\r\\n                                                from\\tProjectYearMonths pym\\r\\n\\t\\t\\t\\t\\t\\t                                left outer join SkillAnalyticsBurnRate v on \\r\\n\\t\\t\\t\\t\\t\\t\\t                                (v.ProjectId = pym.ProjectId and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                v.[Year] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                v.[Month] is not null and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t                                cast(concat(v.[Year], FORMAT(v.[Month], '0#')) as int) = pym.YearMonth),\\r\\n\\t\\t\\t\\t\\t\\t                                Project p,\\r\\n\\t\\t\\t\\t\\t\\t                                CommercialClient cc\\r\\n                                                where\\tpym.ProjectId = p.Oid and \\r\\n\\t\\t                                                p.Client = cc.Oid\\r\\n\\t\\t                                                /*[ProjectFilter]*/ and pym.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                group by pym.[Year],\\r\\n\\t\\t                                                pym.[Month],\\r\\n\\t\\t\\t\\t\\t\\t                                pym.YearMonth\\r\\n\\t                                ) v,\\r\\n\\t                                PlannedAndContracted pc\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Burn_Rate_By_Project_Per_Year_Month/execute","Configuration":"{\n  \"size\": {\n    \"height\": 300\n  },\n  \"commonSeriesSettings\": {\n    \"argumentField\": \"MonthYear\",\n    \"ignoreEmptyPoints\": false\n  },\n  \"panes\": [\n    {\n      \"name\": \"accumulated\"\n    },\n    {\n      \"name\": \"monthly\"\n    }\n  ],\n  \"series\": [\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"type\": \"area\",\n      \"valueField\": \"ForecastSell\",\n      \"name\": \"Planned Revenue\"\n    },\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"type\": \"line\",\n      \"valueField\": \"ActualCost\",\n      \"name\": \"Actual Cost\",\n      \"point\": {\n        \"size\": 6\n      }\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"area\",\n      \"valueField\": \"ForecastSellRunningTotal\",\n      \"name\": \"# Planned Revenue\"\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"line\",\n      \"valueField\": \"ActualCostRunningTotal\",\n      \"name\": \"# Actual Cost\",\n      \"point\": {\n        \"size\": 6\n      }\n    }\n  ],\n  \"valueAxis\": [\n    {\n      \"name\": \"monthly\",\n      \"position\": \"left\"\n    },\n    {\n      \"name\": \"accumulated\",\n      \"position\": \"left\"\n    }\n  ],\n  \"legend\": {\n    \"rowCount\": 1,\n    \"verticalAlignment\": \"bottom\",\n    \"horizontalAlignment\": \"center\"\n  }\n}","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d"},{"Id":"9cf53c91-0e56-4037-b521-9484673e42fe","Name":"Division Burn","Active":true,"UseQuery":false,"Query":null,"Size":4,"Order":5,"Parameters":"[\r\n    {\r\n        \"WidgetSubTitle\": \"Actual Time (blue) vs Contracted (red)\",\r\n        \"WidgetType\": \"chart\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"#efefef\",\r\n        \"WidgetHeight\": \"\",\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            },\r\n            \"WidgetMetrics\": {\r\n                \"visible\": true,\r\n                \"Metrics\": [\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"Actual\",\r\n                        \"metricFieldValue\": \"DirectHoursGrandTotal\"\r\n                    },\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"Contracted\",\r\n                        \"metricFieldValue\": \"ContractedHoursGrandTotal\"\r\n                    }\r\n                ]\r\n            },\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        },\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"querytext\",\r\n                \"value\": \"select v.*,\\r\\n                       sum(DirectHours) over (order by v.DivisionId) as DirectHoursRunningTotal,\\r\\n                       sum(DirectHours) over () as DirectHoursGrandTotal,\\r\\n                       sum(ContractedTime) over() ContractedHoursGrandTotal,\\r\\n                       sum(NewBusinessHours) over (order by v.DivisionId) as NewBusinessHoursRunningTotal,\\r\\n                       sum(NewBusinessHours) over () as NewBusinessHoursGrandTotal,\\r\\n                       sum(AdministrativeHours) over (order by v.DivisionId) as AdministrativeHoursRunningTotal,\\r\\n                       sum(AdministrativeHours) over () as AdministrativeHoursGrandTotal,\\r\\n                       sum(TimeOffHours) over (order by v.DivisionId) as TimeOffHoursRunningTotal,\\r\\n                       sum(TimeOffHours) over () as TimeOffHoursGrandTotal,\\r\\n                       sum(TotalHours) over () as GlobalTotalHours\\r\\n                    from\\r\\n                    (\\r\\n                       select t.DivisionId as DivisionId,\\r\\n                             t.DivisionName as DivisionName,\\r\\n                             isnull(t.DirectHours, 0.0) as DirectHours,\\r\\n                             isnull(t.NewBusinessHours, 0.0) as NewBusinessHours,\\r\\n                             isnull(t.AdministrativeHours, 0.0) as AdministrativeHours,\\r\\n                             isnull(uv.TimeOffHours, 0.0) as TimeOffHours,\\r\\n                             isnull(t.[Hours], 0.0) + isnull(uv.TimeOffHours, 0.0) as TotalHours,\\r\\n\\t\\t\\t\\t\\t\\t\\t isnull(ph.ContractedTime, 0.0) as ContractedTime\\r\\n                       from\\r\\n                       (\\r\\n                          select di.Oid as DivisionId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name] as DivisionName,\\r\\n                                sum(t.[Hours]) as [Hours],\\r\\n                                (sum(t.[Hours]) - (sum(t.NewBusinessHours) + sum(t.AdministrativeHours))) as DirectHours,\\r\\n                                sum(t.NewBusinessHours) as NewBusinessHours,\\r\\n                                sum(AdministrativeHours) as AdministrativeHours\\r\\n                          from   SkillAnalyticsTimeUtilization t\\tleft outer join Department de on de.Oid = t.DepartmentId\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tleft outer join Division di on di.Oid = de.Division\\r\\n                          where\\t 1 = 1\\r\\n\\t\\t\\t\\t\\t\\t/*[ProjectFilter]*/ and t.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                          group by di.Oid,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name]\\r\\n                       ) t\\r\\n\\t\\t\\t\\t\\t\\tleft outer join \\r\\n\\t\\t\\t\\t\\t\\t   (\\r\\n\\t\\t\\t\\t\\t\\t\\t  select di.Oid as DivisionId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name] as DivisionName,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsum(uv.[Hours]) as TimeOffHours\\r\\n\\t\\t\\t\\t\\t\\t\\t  from   SkillAnalyticsLeaves uv\\tleft outer join Department de on de.Oid = uv.DepartmentId\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tleft outer join Division di on di.Oid = de.Division\\r\\n\\t\\t\\t\\t\\t\\t\\t  where\\t 1 = 1\\r\\n\\t\\t\\t\\t\\t\\t\\t  group by di.Oid,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdi.[Name]\\r\\n\\t\\t\\t\\t\\t\\t   )\\r\\n\\t\\t\\t\\t\\t\\t   uv on (uv.DivisionId = t.DivisionId)\\r\\n\\t\\t\\t\\t\\t\\t   left outer join \\r\\n\\t\\t\\t\\t\\t\\t   (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tselect dp.DivisionId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdp.Division as DivisionName,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tsum(dp.ContractedHours) as ContractedTime\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfrom\\tAnalytics.DatamartPlannedHoursTotal dp\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgroup by dp.DivisionId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdp.Division\\r\\n\\t\\t\\t\\t\\t\\t   )\\r\\n\\t\\t\\t\\t\\t\\t   ph on (ph.DivisionId = t.DivisionId)\\r\\n\\t\\t\\t\\t\\t\\t) v \"\r\n            }\r\n        },\r\n        \"Filters\": {},\r\n        \"QueryConfiguration\": {\r\n            \"PreviousPeriod\": {\r\n                \"Show\": false,\r\n                \"KeyFieldName\": \"\",\r\n                \"Type\": 0\r\n            },\r\n            \"RequiredFilters\": [\r\n                \"projectId\"\r\n            ]\r\n        }\r\n    }\r\n]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Time_Utilization_Per_Department/execute","Configuration":"{\n    \"rotated\": true,\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"DivisionName\",\n        \"type\": \"stackedBar\",\n        \"ignoreEmptyPoints\": true\n    },\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        }\n    },\n    \"series\": [\n        {\n            \"valueField\": \"DirectHours\",\n            \"name\": \"Actual\"\n        },\n        {\n            \"valueField\": \"ContractedTime\",\n            \"name\": \"Contracted\"\n        }\n    ],\n    \"size\": {\n        \"height\": 250\n    }\n}","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d"},{"Id":"c6d1d8ee-f9ce-4bd8-84a3-fe6f6e3cf6d8","Name":"Department Burn","Active":true,"UseQuery":false,"Query":null,"Size":4,"Order":5,"Parameters":"[\r\n    {\r\n        \"WidgetSubTitle\": \"Actual Time (blue) vs Contracted (red)\",\r\n        \"WidgetType\": \"chart\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"#efefef\",\r\n        \"WidgetHeight\": \"\",\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            },\r\n            \"WidgetMetrics\": {\r\n                \"visible\": true,\r\n                \"Metrics\": [\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"Actual\",\r\n                        \"metricFieldValue\": \"DirectHoursGrandTotal\"\r\n                    },\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"Contracted\",\r\n                        \"metricFieldValue\": \"ContractedHoursGrandTotal\"\r\n                    }\r\n                ]\r\n            },\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        },\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"querytext\",\r\n                \"value\": \"select v.*,\\r\\n                       sum(DirectHours) over (order by v.DepartmentId) as DirectHoursRunningTotal,\\r\\n                       sum(DirectHours) over () as DirectHoursGrandTotal,\\r\\n                       sum(ContractedTime) over () as ContractedHoursGrandTotal,\\r\\n                       sum(NewBusinessHours) over (order by v.DepartmentId) as NewBusinessHoursRunningTotal,\\r\\n                       sum(NewBusinessHours) over () as NewBusinessHoursGrandTotal,\\r\\n                       sum(AdministrativeHours) over (order by v.DepartmentId) as AdministrativeHoursRunningTotal,\\r\\n                       sum(AdministrativeHours) over () as AdministrativeHoursGrandTotal,\\r\\n                       sum(TimeOffHours) over (order by v.DepartmentId) as TimeOffHoursRunningTotal,\\r\\n                       sum(TimeOffHours) over () as TimeOffHoursGrandTotal,\\r\\n                       sum(TotalHours) over () as GlobalTotalHours\\r\\n                    from\\r\\n                    (\\r\\n                       select t.[DepartmentId],\\r\\n                             t.[Department] as DepartmentName,\\r\\n                             isnull(t.DirectHours, 0.0) as DirectHours,\\r\\n                             isnull(t.NewBusinessHours, 0.0) as NewBusinessHours,\\r\\n                             isnull(t.AdministrativeHours, 0.0) as AdministrativeHours,\\r\\n                             isnull(uv.TimeOffHours, 0.0) as TimeOffHours,\\r\\n                             isnull(t.[Hours], 0.0) + isnull(uv.TimeOffHours, 0.0) as TotalHours,\\r\\n\\t\\t\\t\\t\\t\\t\\t isnull(ph.ContractedTime, 0.0) as ContractedTime\\r\\n                       from\\r\\n                       (\\r\\n                          select t.[DepartmentId],\\r\\n                                t.[Department],\\r\\n                                sum(t.[Hours]) as [Hours],\\r\\n                                (sum(t.[Hours]) - (sum(t.NewBusinessHours) + sum(t.AdministrativeHours))) as DirectHours,\\r\\n                                sum(t.NewBusinessHours) as NewBusinessHours,\\r\\n                                sum(AdministrativeHours) as AdministrativeHours\\r\\n                          from   SkillAnalyticsTimeUtilization t\\r\\n                          where\\t 1 = 1\\r\\n\\t\\t\\t\\t\\t\\t/*[ProjectFilter]*/ and t.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                          group by t.[DepartmentId],\\r\\n                                t.[Department]\\r\\n                       ) t\\r\\n                       left outer join \\r\\n                       (\\r\\n                          select uv.[DepartmentId],\\r\\n                                uv.[Department],\\r\\n                                sum(uv.[Hours]) as TimeOffHours\\r\\n                          from   SkillAnalyticsLeaves uv\\r\\n\\t                      where\\t 1 = 1\\r\\n                          group by uv.[DepartmentId],\\r\\n                                uv.[Department]\\r\\n                       )\\r\\n                       uv on (uv.[DepartmentId] = t.DepartmentId)\\r\\n\\t\\t\\t\\t\\t   left outer join \\r\\n\\t\\t\\t\\t\\t   (\\r\\n\\t\\t\\t\\t\\t\\t\\tselect dp.Oid as DepartmentId,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdp.[Name] as DepartmentName,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(sum(pht.ContractedMinutes) / 60.0) as ContractedTime\\r\\n\\t\\t\\t\\t\\t\\t\\tfrom\\tPlannedHoursTotal pht \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tleft outer join Deliverable d on d.Project = pht.Project\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tleft outer join Department dp on d.Department = dp.Oid\\r\\n\\t\\t\\t\\t\\t\\t\\twhere\\t 1 = 1\\r\\n\\t\\t\\t\\t\\t\\t/*[ProjectFilter]*/ and pht.Project = @ProjectId /*[/ProjectFilter]*/\\r\\n\\t\\t\\t\\t\\t\\t\\tgroup by dp.Oid,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdp.[Name]\\r\\n\\t\\t\\t\\t\\t   )\\r\\n\\t\\t\\t\\t\\t   ph on (ph.DepartmentId = t.DepartmentId)\\r\\n                    ) v\"\r\n            }\r\n        },\r\n        \"Filters\": {},\r\n        \"QueryConfiguration\": {\r\n            \"PreviousPeriod\": {\r\n                \"Show\": false,\r\n                \"KeyFieldName\": \"\",\r\n                \"Type\": 0\r\n            },\r\n            \"RequiredFilters\": [\r\n                \"projectId\"\r\n            ]\r\n        }\r\n    }\r\n]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Time_Utilization_Per_Department/execute","Configuration":"{\n    \"rotated\": true,\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"DepartmentName\",\n        \"type\": \"stackedBar\",\n        \"ignoreEmptyPoints\": true\n    },\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        }\n    },\n    \"series\": [\n        {\n            \"valueField\": \"DirectHours\",\n            \"name\": \"Actual\"\n        },\n        {\n            \"valueField\": \"ContractedTime\",\n            \"name\": \"Contracted\"\n        }\n    ],\n    \"size\": {\n        \"height\": 250\n    }\n}","DashboardDefinitionId":"6aaca829-16b7-495e-814a-b41e806e943d"}]}
