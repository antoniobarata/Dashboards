{
  "DashboardDefinitionRoles": [
    {
      "AccessRoleId": "02f354ae-dbdc-4f27-be5d-8ad944e62ba6",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2",
      "AccessRoleName": "Department Lead Profile"
    } ,
    {
      "AccessRoleId": "c97bd32b-79cc-434f-8f24-d7356fde3c18",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2",
      "AccessRoleName": "Support Profile"
    } ,
    {
      "AccessRoleId": "ba424738-30fc-4359-9b1e-d5a1d6a0a989",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2",
      "AccessRoleName": "Group Account Director Profile"
    } ,
    {
      "AccessRoleId": "adebf70c-0dab-41d1-8ee8-e78bcc9b09f7",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2",
      "AccessRoleName": "Account Profile"
    } ,
    {
      "AccessRoleId": "4a6dc5d0-7bc1-4501-9cf3-e49288a8e5f1",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2",
      "AccessRoleName": "Finance Confidential Profile"
    } ,
    {
      "AccessRoleId": "e217ad1e-2d75-4f54-ba5d-c560ec6b4301",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2",
      "AccessRoleName": "HR Profile"
    } 
  ],
  "Id": "19935c73-9f43-47b3-9cf4-a48c351e5ca2",
  "Name": "Burn - Client",
  "Active": true,
  "Location": 1,
  "DocumentId": "41e148a1-25c9-4112-8c7e-de4f2087546d",
  "DocumentName": "CommercialClient",
  "DocumentTypeName": null,
  "DocumentsConfiguration": "{\"entity\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"} ,\"update\":{\"endpoint\":\"\",\"model\":{} } ,\"create\":{\"endpoint\":\"\",\"model\":{} } ,\"patch\":{\"endpoint\":\"\",\"model\":[{\"field\":\"\",\"caption\":\"\",\"type\":\"\"} ]} ,\"remove\":{\"endpoint\":\"\"} ,\"lookup\":{\"endpoint\":\"\"} ,\"lookupById\":{\"endpoint\":\"\"} } ,\"layout\":{\"create\":{} ,\"read\":{} ,\"patch\":{} } ,\"customDocument\":{\"useCustomStyle\":false,\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemName\":\"\"} ,\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"dashboard\":false} } ",
  "Templates": [],
  "DashboardDefinitionComponents": [
    {
      "Id": "38828edc-2116-43b8-b553-0f10d6e42fbb",
      "Name": "User Burn",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 6,
      "Order": 7,
      "Parameters": "[{\"WidgetSubTitle\":\"Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{} ,\"WidgetXPosition\":24,\"WidgetYPosition\":47,\"WidgetRows\":14,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false} ,\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"Total\",\"metricFieldValue\":\"ActualTimeGrandTotal\"} ]} ,\"showSubTitle\":true,\"showTitle\":true} ,\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select \\r\\n\\tv.UserId,\\r\\n\\tv.[User],\\r\\n\\tsum(v.ActualTime) as ActualTime,\\r\\n\\tsum(sum(v.ActualTime)) over () ActualTimeGrandTotal\\r\\nfrom \\r\\n\\tAnalytics.Timesheet(@CurrentUserId) v\\r\\nwhere \\r\\n\\tv.ProjectId = @ProjectId\\r\\ngroup by\\r\\n\\tv.UserId,\\r\\n\\tv.[User]\"} } ,\"Filters\":{} ,\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0} ,\"RequiredFilters\":[\"projectId\"]} } ]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      } ,
      "AnalyticsApiUrl": "globalQuery/Analytics_Time_Utilization_Per_User/execute",
      "Configuration": "{\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"User\",\n        \"type\": \"bar\",\n        \"ignoreEmptyPoints\": true,\n        \"valueField\": \"ActualTime\"\n    } ,\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        } \n    } ,\n    \"seriesTemplate\": {\n        \"nameField\": \"User\"\n    } ,\n    \"size\": {\n        \"height\": 200\n    } ,\n    \"palette\": [\n        \"#da5859\",\n        \"#f09777\",\n        \"#a5d7d0\",\n        \"#fbc987\",\n        \"#a5bdd7\",\n        \"#e97c82\",\n        \"#81d4fa\",\n        \"#c5e1a5\",\n        \"#ce93d8\",\n        \"#fff59d\"\n    ],\n    \"legend\": {\n        \"visible\": false\n    } ,\n    \"tooltip\": {\n        \"enabled\": true,\n        \"customizeTooltip\": \"function(e){ \n            debugger;\n            return { \n                'text': '<span style=\\\"font-size: 14px; color: #808080;\\\">' +  e.argumentText + '</span><br/><span style=\\\"color: '+ e.point.getColor() +'\\\">' +  Math.round(Math.abs(e.value)*100)/100 + '</span>'    \\n\\t\\t} ;   } \"\n        } \n    } ",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2"
    } ,
    {
      "Id": "61c75817-4107-4f28-9f35-9c784e70409c",
      "Name": "Projects",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 1,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"ProjectId\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{} ,\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":17,\"WidgetColumns\":48,\"WidgetHeader\":{\"showTitle\":true,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]} ,\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null} } ,\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"with GetRate as (\\r\\n\\tselect \\r\\n\\t\\tpht.Project,\\r\\n\\t\\tpht.UserTypologyGroup,\\r\\n\\t\\tpht.[User],\\r\\n\\t\\tMax(pht.SellRate) as Rate\\r\\n\\tfrom\\r\\n\\t\\tPlannedHoursTotal pht\\r\\n\\tgroup by\\r\\n\\t\\tpht.Project,\\r\\n\\t\\tpht.UserTypologyGroup,\\r\\n\\t\\tpht.[User]\\r\\n)\\r\\nselect \\r\\n\\tv.ProjectId,\\r\\n\\tv.ProjectName,\\r\\n\\tv.ProjectType,\\r\\n\\tv.ContractedHours,\\r\\n\\tIIF(n.RoleId is not null, v.ContractedHoursIncome, null) as ContractedHoursIncome,\\r\\n\\tv.PlannedHours,\\r\\n\\tIIF(n.RoleId is not null, v.PlannedHoursIncome, null) as PlannedHoursIncome,\\r\\n\\tv.ForecastHours,\\r\\n\\tIIF(n.RoleId is not null, v.ForecastHoursIncome, null) as ForecastHoursIncome,\\r\\n\\tv.ActualHours,\\r\\n\\tIIF(n.RoleId is not null, v.ActualHoursIncome, null) as ActualHoursIncome,\\r\\n\\tv.BillableHours,\\r\\n\\tIIF(n.RoleId is not null, v.BillableHoursIncome, null) as BillableHoursIncome,\\r\\n\\tv.NonBillableHours,\\r\\n\\tIIF(n.RoleId is not null, v.NonBillableHoursIncome, null) as NonBillableHoursIncome,\\r\\n\\tv.ActualPlusForecastHours,\\r\\n\\tIIF(n.RoleId is not null, v.ActualPlusForecastIncome, null) as ActualPlusForecastIncome,\\r\\n\\tv.ActualBurnPercentageHours,\\r\\n\\tIIF(n.RoleId is not null, v.ActualBurnPercentageIncome, null) as ActualBurnPercentageIncome,\\r\\n\\tv.ActualPlusForecastBurnPercentage,\\r\\n\\tIIF(n.RoleId is not null, v.ActualPlusForecastBurnIncome, null) as ActualPlusForecastBurnIncome\\r\\nfrom (\\r\\n\\tselect\\r\\n\\t\\t\\tv.ProjectId as ProjectId,\\r\\n\\t\\t\\tp.[Name] as ProjectName,\\r\\n\\t\\t\\tpn.[Name] as ProjectType,\\r\\n\\t\\t\\tsum(v.ContractedHours) as ContractedHours,\\r\\n\\t\\t\\tsum(v.ContractedHoursIncome) as ContractedHoursIncome,\\r\\n\\t\\t\\tsum(v.PlannedHours) as PlannedHours,\\r\\n\\t\\t\\tsum(v.PlannedHoursIncome) as PlannedHoursIncome,\\r\\n\\t\\t\\tsum(v.ForecastHours) as ForecastHours,\\r\\n\\t\\t\\tsum(v.ForecastHoursIncome) as ForecastHoursIncome,\\r\\n\\t\\t\\tsum(v.ActualHours) as ActualHours,\\r\\n\\t\\t\\tsum(v.ActualHoursIncome) as ActualHoursIncome,\\r\\n\\t\\t\\tsum(v.BillableHours) as BillableHours,\\r\\n\\t\\t\\tsum(v.BillableHoursIncome) as BillableHoursIncome,\\r\\n\\t\\t\\tsum(v.NonBillableHours) as NonBillableHours,\\r\\n\\t\\t\\tsum(v.NonBillableHoursIncome) as NonBillableHoursIncome,\\r\\n\\t\\t\\tsum(v.ActualHours) + sum(v.ForecastHours) as ActualPlusForecastHours,\\r\\n\\t\\t\\tsum(v.ActualHoursIncome) + sum(v.ForecastHoursIncome) as ActualPlusForecastIncome,\\r\\n\\t\\t\\tIIF(sum(v.ContractedHours) > 0, sum(v.ActualHours) / sum(v.ContractedHours), 0) as ActualBurnPercentageHours,\\r\\n\\t\\t\\tIIF(sum(v.ContractedHoursIncome) > 0, sum(v.ActualHoursIncome) / sum(v.ContractedHoursIncome), 0) as ActualBurnPercentageIncome,\\r\\n\\t\\t\\tIIF(sum(v.ContractedHours) > 0, (sum(v.ActualHours) + sum(v.ForecastHours)) / sum(v.ContractedHours), 0) as ActualPlusForecastBurnPercentage,\\r\\n\\t\\t\\tIIF(sum(v.ContractedHoursIncome) > 0, (sum(v.ActualHoursIncome) + sum(v.ForecastHoursIncome)) / sum(v.ContractedHoursIncome), 0) as ActualPlusForecastBurnIncome\\r\\n\\t\\tfrom (\\r\\n\\t\\t\\tselect\\r\\n\\t\\t\\t\\tv.ProjectId,\\r\\n\\t\\t\\t\\tv.UserTypologyGroupId,\\r\\n\\t\\t\\t\\tv.[UserId],\\r\\n\\t\\t\\t\\tsum(v.ContractedHours) as ContractedHours,\\r\\n\\t\\t\\t\\tsum(v.ContractedHoursIncome) as ContractedHoursIncome,\\r\\n\\t\\t\\t\\tsum(v.PlannedHours) as PlannedHours,\\r\\n\\t\\t\\t\\tsum(v.PlannedHoursIncome) as PlannedHoursIncome,\\r\\n\\t\\t\\t\\tsum(v.ForecastHours) as ForecastHours,\\r\\n\\t\\t\\t\\tsum(v.ForecastHoursIncome) as ForecastHoursIncome,\\r\\n\\t\\t\\t\\tsum(v.ActualHours) as ActualHours,\\r\\n\\t\\t\\t\\tsum(v.ActualHoursIncome) as ActualHoursIncome,\\r\\n\\t\\t\\t\\tsum(v.BillableHours) as BillableHours,\\r\\n\\t\\t\\t\\tsum(v.BillableHoursIncome) as BillableHoursIncome,\\r\\n\\t\\t\\t\\tsum(v.NonBillableHours) as NonBillableHours,\\r\\n\\t\\t\\t\\tsum(v.NonBillableHoursIncome) as NonBillableHoursIncome\\r\\n\\t\\t\\tfrom (\\r\\n\\t\\t\\t\\t\\tselect \\r\\n\\t\\t\\t\\t\\t\\tpht.Project as ProjectId,\\r\\n\\t\\t\\t\\t\\t\\tpht.UserTypologyGroup as UserTypologyGroupId,\\r\\n\\t\\t\\t\\t\\t\\tpht.[User] as UserId,\\r\\n\\t\\t\\t\\t\\t\\tsum(isnull(pht.ContractedMinutes, 0)) / 60.0 as ContractedHours,\\r\\n\\t\\t\\t\\t\\t\\t(sum(isnull(pht.ContractedMinutes, 0)) / 60.0) * IsNull(gru.Rate, IsNull(grut.Rate, 0)) as ContractedHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\tsum(isnull(pht.PlannedMinutes, 0)) / 60.0 as PlannedHours,\\r\\n\\t\\t\\t\\t\\t\\t(sum(isnull(pht.PlannedMinutes, 0)) / 60.0) * IsNull(gru.Rate, IsNull(grut.Rate, 0)) as PlannedHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\t0 as ForecastHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as ForecastHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\t0 as ActualHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as ActualHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\t0 as BillableHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as BillableHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\t0 as NonBillableHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as NonBillableHoursIncome\\r\\n\\t\\t\\t\\t\\tfrom \\r\\n\\t\\t\\t\\t\\t\\tPlannedHoursTotal pht\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join Project p on p.Oid = pht.Project\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join GetRate gru on (gru.Project = pht.Project and gru.[User] = pht.[User])\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join GetRate grut on (grut.Project = pht.Project and grut.[UserTypologyGroup] = pht.UserTypologyGroup)\\r\\n\\t\\t\\t\\t\\twhere\\r\\n\\t\\t\\t\\t\\t\\tpht.GCRecord is null and\\r\\n\\t\\t\\t\\t\\t\\tp.Client = @ClientId\\r\\n\\t\\t\\t\\t\\tgroup by\\r\\n\\t\\t\\t\\t\\t\\tpht.Project,\\r\\n\\t\\t\\t\\t\\t\\tpht.UserTypologyGroup,\\r\\n\\t\\t\\t\\t\\t\\tpht.[User],\\r\\n\\t\\t\\t\\t\\t\\tgru.Rate,\\r\\n\\t\\t\\t\\t\\t\\tgrut.Rate\\r\\n\\t\\t\\t\\t\\tunion all\\r\\n\\t\\t\\t\\t\\tselect\\r\\n\\t\\t\\t\\t\\t\\tpha.ProjectId,\\r\\n\\t\\t\\t\\t\\t\\tpha.UserTypologyGroupId,\\r\\n\\t\\t\\t\\t\\t\\tpha.[UserId],\\r\\n\\t\\t\\t\\t\\t\\t0 as ContractedHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as ContractedHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\t0 as PlannedHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as PlannedHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\tsum(isnull(pha.[Hours], 0)) as ForecastHours,\\r\\n\\t\\t\\t\\t\\t\\tsum(isnull(pha.[Hours], 0)) * IsNull(gru.Rate, IsNull(grut.Rate, 0)) as ForecastHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\t0 as ActualHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as ActualHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\t0 as BillableHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as BillableHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\t0 as NonBillableHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as NonBillableHoursIncome\\r\\n\\t\\t\\t\\t\\tfrom\\r\\n\\t\\t\\t\\t\\t\\tAnalytics.DatamartPlannedHours pha\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join Project p on p.Oid = pha.ProjectId\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join GetRate gru on (gru.Project = pha.ProjectId and gru.[User] = pha.[UserId])\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join GetRate grut on (grut.Project = pha.ProjectId and grut.[UserTypologyGroup] = pha.UserTypologyGroupId)\\r\\n\\t\\t\\t\\t\\twhere\\r\\n\\t\\t\\t\\t\\t\\tpha.[Year] >= Year(CURRENT_TIMESTAMP) and\\r\\n\\t\\t\\t\\t\\t\\tpha.[Month] >= Month(CURRENT_TIMESTAMP) and\\r\\n\\t\\t\\t\\t\\t\\tp.Client = @ClientId\\r\\n\\t\\t\\t\\t\\tgroup by\\r\\n\\t\\t\\t\\t\\t\\tpha.ProjectId,\\r\\n\\t\\t\\t\\t\\t\\tpha.UserTypologyGroupId,\\r\\n\\t\\t\\t\\t\\t\\tpha.[UserId],\\r\\n\\t\\t\\t\\t\\t\\tgru.Rate,\\r\\n\\t\\t\\t\\t\\t\\tgrut.Rate\\r\\n\\t\\t\\t\\t\\tunion all\\r\\n\\t\\t\\t\\t\\tselect\\r\\n\\t\\t\\t\\t\\t\\tv.ProjectId,\\r\\n\\t\\t\\t\\t\\t\\tv.UserTypologyGroupId,\\r\\n\\t\\t\\t\\t\\t\\tv.[UserId],\\r\\n\\t\\t\\t\\t\\t\\t0 as ContractedHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as ContractedHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\t0 as PlannedHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as PlannedHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\t0 as ForecastHours,\\r\\n\\t\\t\\t\\t\\t\\t0 as ForecastHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\tsum(v.ActualTime) as ActualHours,\\r\\n\\t\\t\\t\\t\\t\\tsum(v.ActualTime) * IsNull(gru.Rate, IsNull(grut.Rate, 0)) as ActualHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\tsum(v.BillableTime) as BillableHours,\\r\\n\\t\\t\\t\\t\\t\\tsum(v.BillableTime) * IsNull(gru.Rate, IsNull(grut.Rate, 0)) as BillableHoursIncome,\\r\\n\\t\\t\\t\\t\\t\\tsum(v.NewBusinessTime) as NonBillableHours,\\r\\n\\t\\t\\t\\t\\t\\tsum(v.NewBusinessTime) * IsNull(gru.Rate, IsNull(grut.Rate, 0)) as NonBillableHoursIncome\\r\\n\\t\\t\\t\\t\\tfrom \\r\\n\\t\\t\\t\\t\\t\\tAnalytics.DatamartTimesheet v\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join GetRate gru on (gru.Project = v.ProjectId and gru.[User] = v.[UserId])\\r\\n\\t\\t\\t\\t\\t\\t\\tleft outer join GetRate grut on (grut.Project = v.ProjectId and grut.[UserTypologyGroup] = v.UserTypologyGroupId)\\r\\n\\t\\t\\t\\t\\twhere \\r\\n\\t\\t\\t\\t\\t\\tv.ClientId = @ClientId\\r\\n\\t\\t\\t\\t\\tgroup by\\r\\n\\t\\t\\t\\t\\t\\tv.ProjectId,\\r\\n\\t\\t\\t\\t\\t\\tv.UserTypologyGroupId,\\r\\n\\t\\t\\t\\t\\t\\tv.[UserId],\\r\\n\\t\\t\\t\\t\\t\\tgru.Rate,\\r\\n\\t\\t\\t\\t\\t\\tgrut.Rate\\r\\n\\t\\t\\t) v\\r\\n\\t\\t\\tgroup by\\r\\n\\t\\t\\t\\tv.ProjectId,\\r\\n\\t\\t\\t\\tv.UserTypologyGroupId,\\r\\n\\t\\t\\t\\tv.[UserId]\\r\\n\\t\\t) v\\r\\n\\t\\t\\tleft outer join Project p on p.Oid = v.ProjectId\\r\\n\\t\\t\\tleft outer join ProjectNature pn on pn.Oid = p.ProjectNature\\r\\n\\t\\twhere \\r\\n\\t\\t\\tp.Client = @ClientId\\r\\n\\t\\tgroup by \\r\\n\\t\\t\\tv.ProjectId,\\r\\n\\t\\t\\tp.[Name],\\r\\n\\t\\t\\tpn.[Name]\\r\\n) v\\r\\nleft outer join Analytics.[Authorization](@CurrentUserId) n ON (n.RoleName = 'DeliverablesSellRead')\",\"mapping\":\"\"} } ,\"Filters\":{} ,\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0} ,\"RequiredFilters\":[\"clientId\"]} } ]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      } ,
      "AnalyticsApiUrl": "",
      "Configuration": "{\"selection\":{\"mode\":\"single\"} ,\"filterRow\":{\"visible\":true} ,\"height\":\"400\",\"columnsAutoWidth\":true,\"allowColumnResizing\":false,\"columnResizingMode\":\"nextColumn\",\"columnMinWidth\":\"100\",\"filterPanel\":{\"visible\":false} ,\"groupPanel\":{\"visible\":false} ,\"scrolling\":{\"mode\":\"virtual\"} ,\"columns\":[{\"dataField\":\"ProjectName\",\"caption\":\"Project\",\"width\":250,\"allowGrouping\":false} ,{\"dataField\":\"ProjectId\",\"caption\":\"ProjectId\",\"width\":400,\"allowGrouping\":false,\"visible\":false} ,{\"dataField\":\"ProjectType\",\"caption\":\"Project Type\",\"width\":125,\"allowGrouping\":false} ,{\"dataField\":\"ProjectBeginDate\",\"caption\":\"Start Date\",\"alignment\":\"center\",\"dataType\":\"date\",\"format\":\"d MMM\",\"allowGrouping\":false,\"width\":100,\"visibleIndex\":1,\"visible\":false} ,{\"dataField\":\"ProjectEndDate\",\"caption\":\"End Date\",\"alignment\":\"center\",\"dataType\":\"date\",\"format\":\"d MMM\",\"allowGrouping\":false,\"width\":100,\"visibleIndex\":2,\"visible\":false} ,{\"dataField\":\"ContractedHours\",\"caption\":\"Contracted\",\"format\":\"#,##0.00\",\"width\":125,\"allowGrouping\":false} ,{\"dataField\":\"ContractedHoursIncome\",\"caption\":\"Contracted $\",\"dataType\":\"number\",\"format\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \",\"allowGrouping\":false,\"width\":125} ,{\"dataField\":\"ForecastHours\",\"caption\":\"Forecasted\",\"format\":\"#,##0.00\",\"alignment\":\"right\",\"width\":125,\"allowGrouping\":false,\"visible\":false} ,{\"dataField\":\"ForecastHoursIncome\",\"caption\":\"Forecast $\",\"dataType\":\"number\",\"format\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \",\"allowGrouping\":false,\"width\":125,\"visible\":false} ,{\"dataField\":\"PlannedHours\",\"caption\":\"Planned\",\"format\":\"#,##0.00\",\"width\":100,\"allowGrouping\":false,\"visible\":false} ,{\"dataField\":\"ActualHours\",\"caption\":\"Actual\",\"alignment\":\"center\",\"columns\":[{\"dataField\":\"BillableHours\",\"caption\":\"Billable\",\"format\":\"#,##0.00\",\"width\":125,\"allowGrouping\":false,\"alignment\":\"right\"} ,{\"dataField\":\"BillableHoursIncome\",\"caption\":\"Billable $\",\"dataType\":\"number\",\"format\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \",\"allowGrouping\":false,\"width\":125} ,{\"dataField\":\"NonBillableHours\",\"caption\":\"Non Billable\",\"format\":\"#,##0.00\",\"width\":125,\"allowGrouping\":false,\"alignment\":\"right\"} ]} ,{\"dataField\":\"ActualHoursIncome\",\"caption\":\"Actual $\",\"dataType\":\"number\",\"format\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \",\"allowGrouping\":false,\"visible\":false,\"width\":125} ,{\"dataField\":\"ActualPlusForecastHours\",\"caption\":\"Actual + Forecast\",\"format\":\"#,##0.00\",\"width\":125,\"allowGrouping\":false} ,{\"dataField\":\"ActualPlusForecastIncome\",\"caption\":\"Actual + Forecast $\",\"dataType\":\"number\",\"format\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \",\"allowGrouping\":false,\"width\":125} ,{\"dataField\":\"ActualBurnPercentageHours\",\"caption\":\"Actual Burn % (Hours)\",\"dataType\":\"number\",\"format\":\"percent\",\"width\":150,\"allowGrouping\":false,\"cellTemplate\":\"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); } \"} ,{\"dataField\":\"ActualBurnPercentageIncome\",\"caption\":\"Actual Burn % ($)\",\"dataType\":\"number\",\"format\":\"percent\",\"width\":150,\"allowGrouping\":false,\"cellTemplate\":\"function(e, i) {                if(i.data.ActualBurnPercentageIncome != null) {                    SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true);                }             } \"} ,{\"dataField\":\"ActualPlusForecastBurnPercentage\",\"caption\":\"Actual + Forecast Burn % (Hours)\",\"dataType\":\"number\",\"format\":\"percent\",\"width\":200,\"allowGrouping\":false,\"cellTemplate\":\"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); } \",\"visible\":true} ,{\"dataField\":\"PlannedContractedPercentage\",\"caption\":\"Planned Burn %\",\"dataType\":\"number\",\"format\":\"percent\",\"width\":150,\"allowGrouping\":false,\"cellTemplate\":\"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true); } \",\"visible\":false} ,{\"dataField\":\"ActualPlusForecastBurnIncome\",\"caption\":\"Actual + Forecast Burn % ($)\",\"dataType\":\"number\",\"format\":\"percent\",\"width\":200,\"allowGrouping\":false,\"cellTemplate\":\"function(e, i) {                 if(i.data.ActualPlusForecastBurnIncome != null) {                    SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 0.9, i.value < 0.9 && i.value >= 0.5, i.value < 0.5, true);                 }                    } \",\"visible\":true} ],\"summary\":{\"calculateCustomSummary\":\"function (options) {            if (options.name === 'ActualBurnHours') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                    options.totalValue[0] = options.totalValue[0] + options.value.ActualHours;                    options.totalValue[1] = options.totalValue[1] + options.value.ContractedHours;                        break;                    case 'finalize':                    if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                    else                            options.totalValue = 0;                            break;                }             }                     if (options.name === 'ActualPlusForecastBurnHours') {                switch(options.summaryProcess) {                    case 'start':                    options.totalValue = [0,0];                        break;                    case 'calculate':                    options.totalValue[0] = options.totalValue[0] + options.value.ActualPlusForecastHours;                    options.totalValue[1] = options.totalValue[1] + options.value.ContractedHours;                        break;                    case 'finalize':                    if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                    options.totalValue = 0;                            break;                }             }             if (options.name === 'PlannedBurn') {                        switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                        case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.PlannedHours;                        options.totalValue[1] = options.totalValue[1] + options.value.ContractedHours;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }             }                         if (options.name === 'ActualPlusForecastBurnIncome') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.ActualPlusForecastIncome;                        options.totalValue[1] = options.totalValue[1] + options.value.ContractedIncome;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }             }             if (options.name === 'ActualBurnIncome') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.ActualIncome;                        options.totalValue[1] = options.totalValue[1] + options.value.ContractedIncome;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }             }         } \",\"totalItems\":[{\"name\":\"ActualBurnIncome\",\"showInColumn\":\"Actual Burn % ($)\",\"displayFormat\":\"{0} \",\"valueFormat\":{\"type\":\"percent\",\"precision\":1} ,\"summaryType\":\"custom\",\"alignment\":\"right\"} ,{\"name\":\"ActualPlusForecastBurnIncome\",\"showInColumn\":\"Actual + Forecast Burn % ($)\",\"displayFormat\":\"{0} \",\"valueFormat\":{\"type\":\"percent\",\"precision\":1} ,\"summaryType\":\"custom\",\"alignment\":\"right\"} ,{\"name\":\"PlannedBurn\",\"showInColumn\":\"Planned Burn %\",\"displayFormat\":\"{0} \",\"valueFormat\":{\"type\":\"percent\",\"precision\":1} ,\"summaryType\":\"custom\",\"alignment\":\"right\"} ,{\"name\":\"ActualPlusForecastBurnHours\",\"showInColumn\":\"Actual + Forecast Burn % (Hours)\",\"displayFormat\":\"{0} \",\"valueFormat\":{\"type\":\"percent\",\"precision\":1} ,\"summaryType\":\"custom\",\"alignment\":\"right\"} ,{\"name\":\"ActualBurnHours\",\"showInColumn\":\"Actual Burn % (Hours)\",\"displayFormat\":\"{0} \",\"valueFormat\":{\"type\":\"percent\",\"precision\":1} ,\"summaryType\":\"custom\",\"alignment\":\"right\"} ,{\"column\":\"ProjectName\",\"summaryType\":\"count\",\"displayFormat\":\"All Projects\"} ,{\"column\":\"ActualTime\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0} \"} ,{\"column\":\"Actual $\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0} \"} ,{\"column\":\"Billable\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0} \"} ,{\"column\":\"Planned\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0} \"} ,{\"column\":\"Non Billable\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0} \"} ,{\"column\":\"Forecasted\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0} \"} ,{\"column\":\"Actual + Forecast\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0} \"} ,{\"column\":\"ActualCost\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \"} ,{\"column\":\"PlannedTime\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0} \"} ,{\"column\":\"ContractedRevenue\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \"} ,{\"column\":\"Contracted\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0} \"} ,{\"column\":\"ContractedHoursIncome\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \"} ,{\"column\":\"ContractedActualIncomeVariation\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \"} ,{\"column\":\"Billable $\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \"} ,{\"column\":\"Forecast $\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \"} ,{\"column\":\"Actual + Forecast $\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \"} ,{\"column\":\"Actual Burn $\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \"} ,{\"column\":\"Actual + Forecast Burn $\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2} ,\"displayFormat\":\"{0} \"} ]} ,\"columnChooser\":{\"enabled\":\"true\"} ,\"stateStoring\":{\"enabled\":false} } ",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2"
    } ,
    {
      "Id": "ae157002-f20b-476d-924f-a87b2de351e6",
      "Name": "Department Burn",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 6,
      "Order": 5,
      "Parameters": "[{\"WidgetSubTitle\":\"Actual Time (blue) vs Contracted (red)\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{} ,\"WidgetXPosition\":24,\"WidgetYPosition\":34,\"WidgetRows\":13,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false} ,\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"} ,{\"visible\":true,\"metricName\":\"Contracted\",\"metricFieldValue\":\"ContractedTimeGrandTotal\"} ]} ,\"showSubTitle\":true,\"showTitle\":true} ,\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\r\\n\\tv.DepartmentId,\\r\\n\\tIsNull(d.[Name], 'Without department') as DepartmentName,\\r\\n\\tsum(v.ActualTime) as ActualTime,\\r\\n\\tsum(sum(v.ActualTime)) over () as ActualTimeGrandTotal,\\r\\n\\tsum(v.ContractedTime) as ContractedTime,\\r\\n\\tsum(sum(v.ContractedTime)) over () as ContractedTimeGrandTotal\\r\\nfrom (\\r\\n\\tselect \\r\\n\\t\\tv.DepartmentId,\\r\\n\\t\\tsum(v.ActualTime) as ActualTime,\\r\\n\\t\\t0 as ContractedTime\\r\\n\\tfrom \\r\\n\\t\\tAnalytics.Timesheet(@CurrentUserId) v\\r\\n\\twhere \\r\\n\\t\\tv.ProjectId = @ProjectId\\r\\n\\tgroup by\\r\\n\\t\\tv.DepartmentId\\r\\n\\tunion\\r\\n\\tselect \\r\\n\\t\\tpht.Department as DepartmentId,\\r\\n\\t\\t0 as ActualTime,\\r\\n\\t\\tsum(pht.ContractedMinutes) / 60.0  as ContractedTime\\r\\n\\tfrom\\r\\n\\t\\tPlannedHoursTotal pht\\r\\n\\twhere \\r\\n\\t\\tpht.Project = @ProjectId and\\r\\n        pht.GCRecord is null\\r\\n\\tgroup by\\r\\n\\t\\tpht.Department\\r\\n) v left outer join Department d on d.Oid = v.DepartmentId\\r\\ngroup by\\r\\n\\tv.DepartmentId,\\r\\n\\td.[Name]\"} } ,\"Filters\":{} ,\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0} ,\"RequiredFilters\":[\"projectId\"]} } ]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      } ,
      "AnalyticsApiUrl": "globalQuery/Analytics_Time_Utilization_Per_Department/execute",
      "Configuration": "{\n    \"rotated\": true,\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"DepartmentName\",\n        \"type\": \"stackedBar\",\n        \"ignoreEmptyPoints\": true\n    } ,\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        } \n    } ,\n    \"series\": [\n        {\n            \"valueField\": \"ActualTime\",\n            \"name\": \"Actual\"\n        } ,\n        {\n            \"valueField\": \"ContractedTime\",\n            \"name\": \"Contracted\"\n        } \n    ],\n    \"size\": {\n        \"height\": 200\n    } \n} ",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2"
    } ,
    {
      "Id": "614b3a76-6fee-43cc-b19d-b28ebecc3f56",
      "Name": "Time Burn",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 6,
      "Order": 2,
      "Parameters": "[{\"WidgetSubTitle\":\"Forecast vs Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{} ,\"WidgetXPosition\":0,\"WidgetYPosition\":17,\"WidgetRows\":17,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false} ,\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Forecast\",\"metricFieldValue\":\"ForecastTimeGrandTotal\"} ,{\"visible\":true,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"} ]} ,\"showSubTitle\":true,\"showTitle\":true} ,\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\r\\n\\tv.Project,\\r\\n\\tv.MonthYear,\\r\\n\\tsum(v.ActualTime) as ActualTime,\\r\\n\\tsum(sum(v.ActualTime)) over (order by v.YearMonth) as ActualTimeRunningTotal,\\r\\n\\tsum(sum(v.ActualTime)) over () as ActualTimeGrandTotal,\\r\\n\\tsum(v.ForecastTime) as ForecastTime,\\r\\n\\tsum(sum(v.ForecastTime)) over (order by v.YearMonth) as ForecastTimeRunningTotal,\\r\\n\\tsum(sum(v.ForecastTime)) over () as ForecastTimeGrandTotal\\r\\nfrom (\\r\\n\\tselect \\r\\n\\t\\tv.Project,\\r\\n\\t\\tconcat(format(v.[Month], '0#'), '/', v.[Year]) as MonthYear,\\r\\n\\t\\tconcat(v.[Year], v.[Month]) as YearMonth,\\r\\n\\t\\tsum(v.ActualTime) as ActualTime,\\r\\n\\t\\t0 as ForecastTime\\r\\n\\tfrom \\r\\n\\t\\tAnalytics.Timesheet(@CurrentUserId) v\\r\\n\\twhere \\r\\n\\t\\tv.ProjectId = @ProjectId\\r\\n\\tgroup by\\r\\n\\t\\tv.Project,\\r\\n\\t\\tv.[Year],\\r\\n\\t\\tv.[Month]\\r\\n\\tunion\\r\\n\\tselect \\r\\n\\t\\tph.Project,\\r\\n\\t\\tconcat(format(ph.[Month], '0#'), '/', ph.[Year]) as MonthYear,\\r\\n\\t\\tconcat(ph.[Year], ph.[Month]) as YearMonth,\\r\\n\\t\\t0 as ActualTime,\\r\\n\\t\\tsum(ph.[Hours]) as ForecastTime\\r\\n\\tfrom\\r\\n\\t\\tAnalytics.PlannedHours(@CurrentUserId) ph\\r\\n\\twhere \\r\\n\\t\\tph.ProjectId = @ProjectId and\\r\\n\\t\\tph.[Year] >= Year(CURRENT_TIMESTAMP) and\\r\\n\\t\\tph.[Month] >= Month(CURRENT_TIMESTAMP)\\r\\n\\tgroup by\\r\\n\\t\\tph.Project,\\r\\n\\t\\tph.[Year],\\r\\n\\t\\tph.[Month]\\r\\n) v\\r\\ngroup by\\r\\n\\tv.Project,\\r\\n\\tv.MonthYear,\\r\\n\\tv.YearMonth\"} } ,\"Filters\":{} ,\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]} } ]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      } ,
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_By_Project_Per_Year_Month/execute",
      "Configuration": "{\n    \"size\": {\n        \"height\": 300\n    } ,\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"MonthYear\",\n        \"ignoreEmptyPoints\": false\n    } ,\n    \"panes\": [\n        {\n            \"name\": \"accumulated\"\n        } ,\n        {\n            \"name\": \"monthly\"\n        } \n    ],\n    \"series\": [\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"bar\",\n            \"valueField\": \"ForecastTime\",\n            \"name\": \"Forecast Time\"\n        } ,\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualTime\",\n            \"name\": \"Actual Time\",\n            \"point\": {\n                \"size\": 6\n            } \n        } ,\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"bar\",\n            \"valueField\": \"ForecastTimeRunningTotal\",\n            \"name\": \"# Forecast Time\"\n        } ,\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualTimeRunningTotal\",\n            \"name\": \"# Actual Time\",\n            \"point\": {\n                \"size\": 6\n            } \n        } \n    ],\n    \"valueAxis\": [\n        {\n            \"name\": \"monthly\",\n            \"position\": \"left\"\n        } ,\n        {\n            \"name\": \"accumulated\",\n            \"position\": \"left\"\n        } \n    ],\n    \"legend\": {\n        \"rowCount\": 1,\n        \"verticalAlignment\": \"bottom\",\n        \"horizontalAlignment\": \"center\"\n    } \n} ",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2"
    } ,
    {
      "Id": "b2d1c6a8-9341-4ce5-a685-ceb1c0bbb5a9",
      "Name": "Revenue Burn",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 6,
      "Order": 3,
      "Parameters": "[{\"WidgetSubTitle\":\"Planned Revenue vs Actual Cost\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{} ,\"WidgetXPosition\":24,\"WidgetYPosition\":17,\"WidgetRows\":17,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false} ,\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Revenue\",\"metricFieldValue\":\"PlannedSellGrandTotal\"} ,{\"visible\":true,\"metricName\":\"# Cost\",\"metricFieldValue\":\"ActualCostGrandTotal\"} ]} ,\"showSubTitle\":true,\"showTitle\":true} ,\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"with GetRate as (\\r\\n\\tselect \\r\\n\\t\\tpht.Project,\\r\\n\\t\\tpht.UserTypologyGroup,\\r\\n\\t\\tpht.[User],\\r\\n\\t\\tMax(pht.SellRate) as Rate\\r\\n\\tfrom\\r\\n\\t\\tPlannedHoursTotal pht\\r\\n\\twhere\\r\\n\\t\\tpht.Project is not null\\r\\n\\tgroup by\\r\\n\\t\\tpht.Project,\\r\\n\\t\\tpht.UserTypologyGroup,\\r\\n\\t\\tpht.[User]\\r\\n)\\r\\nselect\\r\\n\\tv.Project,\\r\\n\\tv.MonthYear,\\r\\n\\tsum(v.ActualCost) as ActualCost,\\r\\n\\tsum(sum(v.ActualCost)) over (order by v.YearMonth) as ActualCostRunningTotal,\\r\\n\\tsum(sum(v.ActualCost)) over () as ActualCostGrandTotal,\\r\\n\\tsum(v.PlannedCost) as PlannedSell,\\r\\n\\tsum(sum(v.PlannedCost)) over (order by v.YearMonth) as PlannedSellRunningTotal,\\r\\n\\tsum(sum(v.PlannedCost)) over () as PlannedSellGrandTotal\\r\\nfrom (\\r\\n\\tselect \\r\\n\\t\\tv.Project,\\r\\n\\t\\tv.UserTypologyGroupId,\\r\\n\\t\\tv.UserId,\\r\\n\\t\\tconcat(format(v.[Month], '0#'), '/', v.[Year]) as MonthYear,\\r\\n\\t\\tconcat(v.[Year], v.[Month]) as YearMonth,\\r\\n\\t\\tsum(v.ActualTime) * IsNull(gru.Rate, IsNull(grut.Rate, 0)) as ActualCost,\\r\\n\\t\\t0 as PlannedCost\\r\\n\\tfrom \\r\\n\\t\\tAnalytics.Timesheet(@CurrentUserId) v\\r\\n\\t\\t\\tleft outer join GetRate gru on (gru.Project = v.ProjectId and gru.[User] = v.[UserId])\\r\\n\\t\\t\\tleft outer join GetRate grut on (grut.Project = v.ProjectId and grut.[UserTypologyGroup] = v.UserTypologyGroupId)\\r\\n\\twhere \\r\\n\\t\\tv.ProjectId = @ProjectId\\r\\n\\tgroup by\\r\\n\\t\\tv.Project,\\r\\n\\t\\tv.UserTypologyGroupId,\\r\\n\\t\\tv.UserId,\\r\\n\\t\\tv.[Year],\\r\\n\\t\\tv.[Month],\\r\\n\\t\\tgru.Rate,\\r\\n\\t\\tgrut.Rate\\r\\n\\tunion\\r\\n\\tselect \\r\\n\\t\\tpht.Project,\\r\\n\\t\\tpht.UserTypologyGroupId,\\r\\n\\t\\tpht.UserId,\\r\\n\\t\\tconcat(format(Month(pht.ModifiedOn), '0#'), '/', Year(pht.ModifiedOn)) as MonthYear,\\r\\n\\t\\tconcat(Year(pht.ModifiedOn), Month(pht.ModifiedOn)) as YearMonth,\\r\\n\\t\\t0 as ActualTime,\\r\\n\\t\\tsum(pht.[Hours]) * IsNull(gru.Rate, IsNull(grut.Rate, 0)) as PlannedCost\\r\\n\\tfrom\\r\\n\\t\\tAnalytics.PlannedHoursTotal(@CurrentUserId) pht\\r\\n\\t\\t\\tleft outer join GetRate gru on (gru.Project = pht.ProjectId and gru.[User] = pht.[UserId])\\r\\n\\t\\t\\tleft outer join GetRate grut on (grut.Project = pht.ProjectId and grut.[UserTypologyGroup] = pht.UserTypologyGroupId)\\r\\n\\twhere \\r\\n\\t\\tpht.ProjectId = @ProjectId\\r\\n\\tgroup by\\r\\n\\t\\tpht.Project,\\r\\n\\t\\tpht.UserTypologyGroupId,\\r\\n\\t\\tpht.UserId,\\r\\n\\t\\tpht.ModifiedOn,\\r\\n\\t\\tgru.Rate,\\r\\n\\t\\tgrut.Rate\\r\\n) v\\r\\ngroup by\\r\\n\\tv.Project,\\r\\n\\tv.MonthYear,\\r\\n\\tv.YearMonth\"} } ,\"Filters\":{} ,\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]} } ]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      } ,
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_By_Project_Per_Year_Month/execute",
      "Configuration": "{\n    \"size\": {\n        \"height\": 300\n    } ,\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"MonthYear\",\n        \"ignoreEmptyPoints\": false\n    } ,\n    \"panes\": [\n        {\n            \"name\": \"accumulated\"\n        } ,\n        {\n            \"name\": \"monthly\"\n        } \n    ],\n    \"series\": [\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"area\",\n            \"valueField\": \"PlannedSell\",\n            \"name\": \"Planned Revenue\"\n        } ,\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualCost\",\n            \"name\": \"Actual Cost\",\n            \"point\": {\n                \"size\": 6\n            } \n        } ,\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"area\",\n            \"valueField\": \"PlannedSellRunningTotal\",\n            \"name\": \"# Planned Revenue\"\n        } ,\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualCostRunningTotal\",\n            \"name\": \"# Actual Cost\",\n            \"point\": {\n                \"size\": 6\n            } \n        } \n    ],\n    \"valueAxis\": [\n        {\n            \"name\": \"monthly\",\n            \"position\": \"left\"\n        } ,\n        {\n            \"name\": \"accumulated\",\n            \"position\": \"left\"\n        } \n    ],\n    \"legend\": {\n        \"rowCount\": 1,\n        \"verticalAlignment\": \"bottom\",\n        \"horizontalAlignment\": \"center\"\n    } \n} ",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2"
    } ,
    {
      "Id": "230ccab0-4b7a-4241-b9d7-fb1641bfb54b",
      "Name": "Division Burn",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 6,
      "Order": 4,
      "Parameters": "[{\"WidgetSubTitle\":\"Actual Time (blue) vs Contracted (red)\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{} ,\"WidgetXPosition\":0,\"WidgetYPosition\":34,\"WidgetRows\":13,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false} ,\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"} ,{\"visible\":true,\"metricName\":\"Contracted\",\"metricFieldValue\":\"ContractedTimeGrandTotal\"} ]} ,\"showSubTitle\":true,\"showTitle\":true} ,\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\r\\n\\tv.DivisionId,\\r\\n\\tIsNull(d.[Name], 'Without division') as DivisionName,\\r\\n\\tsum(v.ActualTime) as ActualTime,\\r\\n\\tsum(sum(v.ActualTime)) over () as ActualTimeGrandTotal,\\r\\n\\tsum(v.ContractedTime) as ContractedTime,\\r\\n\\tsum(sum(v.ContractedTime)) over () as ContractedTimeGrandTotal\\r\\nfrom (\\r\\n\\tselect \\r\\n\\t\\tv.DivisionId,\\r\\n\\t\\tsum(v.ActualTime) as ActualTime,\\r\\n\\t\\t0 as ContractedTime\\r\\n\\tfrom \\r\\n\\t\\tAnalytics.Timesheet(@CurrentUserId) v\\r\\n\\twhere \\r\\n\\t\\tv.ProjectId = @ProjectId\\r\\n\\tgroup by\\r\\n\\t\\tv.DivisionId\\r\\n\\tunion\\r\\n\\tselect \\r\\n\\t\\td.Division as DivisionId,\\r\\n\\t\\t0 as ActualTime,\\r\\n\\t\\tsum(pht.ContractedMinutes) / 60.0  as ContractedTime\\r\\n\\tfrom\\r\\n\\t\\tPlannedHoursTotal pht\\r\\n\\t\\t\\tleft outer join Department d on d.Oid = pht.Department\\r\\n\\twhere \\r\\n\\t\\tpht.Project = @ProjectId and\\r\\n        pht.GCRecord is null\\r\\n\\tgroup by\\r\\n\\t\\td.Division\\r\\n) v left outer join Division d on d.Oid = v.DivisionId\\r\\ngroup by\\r\\n\\tv.DivisionId,\\r\\n\\td.[Name]\"} } ,\"Filters\":{} ,\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0} ,\"RequiredFilters\":[\"projectId\"]} } ]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      } ,
      "AnalyticsApiUrl": "globalQuery/Analytics_Time_Utilization_Per_Department/execute",
      "Configuration": "{\n    \"rotated\": true,\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"DivisionName\",\n        \"type\": \"stackedBar\",\n        \"ignoreEmptyPoints\": true\n    } ,\n    \"argumentAxis\": {\n        \"label\": {\n            \"visible\": true\n        } \n    } ,\n    \"series\": [\n        {\n            \"valueField\": \"ActualTime\",\n            \"name\": \"Actual\"\n        } ,\n        {\n            \"valueField\": \"ContractedTime\",\n            \"name\": \"Contracted\"\n        } \n    ],\n    \"size\": {\n        \"height\": 200\n    } \n} ",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2"
    } ,
    {
      "Id": "5bd1a056-18f0-4db3-bcbd-fce2a968687d",
      "Name": "Typology Group Burn",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 6,
      "Order": 6,
      "Parameters": "[{\"WidgetSubTitle\":\"Contracted vs Actual Time\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{} ,\"WidgetXPosition\":0,\"WidgetYPosition\":47,\"WidgetRows\":14,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false} ,\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Contracted\",\"metricFieldValue\":\"ContractedTimeGrandTotal\"} ,{\"visible\":true,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"} ]} ,\"showSubTitle\":true,\"showTitle\":true} ,\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\r\\n\\tv.UserTypologyGroupId,\\r\\n\\tv.UserTypologyGroupName,\\r\\n\\tv.MonthYear,\\r\\n\\tv.ActualTime,\\r\\n\\tv.ActualTimeGrandTotal,\\r\\n\\tv.ContractedTime,\\r\\n\\tv.ContractedTimeGrandTotal\\r\\nfrom (\\r\\n\\tselect\\r\\n\\t\\tv.UserTypologyGroupId,\\r\\n\\t\\tconcat(format(v.[Month], '0#'), '/', v.[Year]) as MonthYear,\\r\\n\\t\\tIsNull(utg.[Name], 'Without typology') as UserTypologyGroupName,\\r\\n\\t\\tsum(v.ActualTime) as ActualTime,\\r\\n\\t\\tsum(sum(v.ActualTime)) over () as ActualTimeGrandTotal,\\r\\n\\t\\tsum(v.ContractedTime) as ContractedTime,\\r\\n\\t\\tsum(sum(v.ContractedTime)) over () as ContractedTimeGrandTotal\\r\\n\\tfrom (\\r\\n\\t\\tselect \\r\\n\\t\\t\\tv.UserTypologyGroupId,\\r\\n\\t\\t\\tv.[Month] as [Month],\\r\\n\\t\\t\\tv.[Year] as [Year],\\r\\n\\t\\t\\tsum(v.ActualTime) as ActualTime,\\r\\n\\t\\t\\t0 as ContractedTime\\r\\n\\t\\tfrom \\r\\n\\t\\t\\tAnalytics.Timesheet(@CurrentUserId) v\\r\\n\\t\\twhere \\r\\n\\t\\t\\tv.ProjectId = @ProjectId\\r\\n\\t\\tgroup by\\r\\n\\t\\t\\tv.UserTypologyGroupId,\\r\\n\\t\\t\\tv.[Month],\\r\\n\\t\\t\\tv.[Year]\\r\\n\\t\\tunion\\r\\n\\t\\tselect \\r\\n\\t\\t\\tpht.UserTypologyGroup as UserTypologyGroupId,\\r\\n\\t\\t\\t0 as [Month],\\r\\n\\t\\t\\t0 as [Year],\\r\\n\\t\\t\\t0 as ActualTime,\\r\\n\\t\\t\\tsum(pht.GlobalContractedMinutes) / 60.0  as ContractedTime\\r\\n\\t\\tfrom\\r\\n\\t\\t\\tPlannedHoursTotal pht\\r\\n\\t\\twhere \\r\\n\\t\\t\\tpht.Project = @ProjectId and\\r\\n\\t\\t\\tpht.GCRecord is null\\r\\n\\t\\tgroup by\\r\\n\\t\\t\\tpht.UserTypologyGroup\\r\\n\\t) v left outer join UserTypologyGroup utg on utg.Oid = v.UserTypologyGroupId\\r\\n\\tgroup by\\r\\n\\t\\tv.UserTypologyGroupId,\\r\\n\\t\\tutg.[Name],\\r\\n\\t\\tv.[Month],\\r\\n\\t\\tv.[Year]\\r\\n) v\\r\\nwhere\\r\\n\\tv.MonthYear != '00/0'\"} } ,\"Filters\":{} ,\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]} } ]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      } ,
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_By_Project_Per_Typology_Group_Per_Year_Month/execute",
      "Configuration": "{\n    \"size\": {\n        \"height\": 200\n    } ,\n    \"commonSeriesSettings\": {\n        \"ignoreEmptyPoints\": false,\n        \"argumentField\": \"MonthYear\",\n        \"valueField\": \"ActualTime\",\n        \"type\": \"line\",\n        \"point\": {\n            \"size\": 6\n        } ,\n        \"border\": {\n            \"visible\": true\n        } \n    } ,\n    \"commonAxisSettings\": {\n        \"grid\": {\n            \"visible\": true\n        } ,\n        \"discreteAxisDivisionMode\": \"crossLabels\"\n    } ,\n    \"commonPaneSettings\": {\n        \"border\": {\n            \"visible\": true\n        } \n    } ,\n    \"seriesTemplate\": {\n        \"nameField\": \"UserTypologyGroupName\"\n    } ,\n    \"legend\": {\n        \"rowCount\": 1,\n        \"verticalAlignment\": \"bottom\",\n        \"horizontalAlignment\": \"center\"\n    } \n} ",
      "DashboardDefinitionId": "19935c73-9f43-47b3-9cf4-a48c351e5ca2"
    } 
  ],
  "QueryText": null,
  "UseStore": false,
  "StoreEntity": null,
  "Version": 2,
  "Default": true
} 
