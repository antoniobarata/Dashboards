{"DashboardDefinitionRoles":[{"AccessRoleId":"e217ad1e-2d75-4f54-ba5d-c560ec6b4301","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a","AccessRoleName":"HR Profile"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a","AccessRoleName":"Administrator"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"d3e36f3b-993f-4b56-8664-bc616956b733","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a","AccessRoleName":"Maintenance Profile"},{"AccessRoleId":"ba424738-30fc-4359-9b1e-d5a1d6a0a989","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a","AccessRoleName":"Group Account Director Profile"},{"AccessRoleId":"4a6dc5d0-7bc1-4501-9cf3-e49288a8e5f1","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a","AccessRoleName":"Finance Confidential Profile"},{"AccessRoleId":"9192b3d9-3b6b-469a-bcf4-01accd8ec5b4","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a","AccessRoleName":"Administrator"},{"AccessRoleId":"02f354ae-dbdc-4f27-be5d-8ad944e62ba6","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a","AccessRoleName":"Department Lead Profile"}],"Id":"f2b7a599-5b35-4ccd-8119-49811c886b3a","Name":"FTE Dashboard","Active":true,"Location":0,"DocumentId":"00000000-0000-0000-0000-000000000000","DocumentName":"","DocumentsConfiguration":"{\"type\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"remove\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{}},\"customDocument\":{\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemNames\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"dashboard\":false}}","Templates":[],"DashboardDefinitionComponents":[{"Id":"2ada04e7-2d47-4b14-9c9a-1a6d0b10c76e","Name":"Filters","Active":true,"UseQuery":false,"Query":"","Size":12,"Order":0,"Parameters":"[\r\n    {\r\n        \"WidgetSubTitle\": \"\",\r\n        \"WidgetType\": \"form\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"#f0f0f0\",\r\n        \"WidgetHeight\": 30,\r\n        \"WidgetHeader\": {\r\n            \"showTitle\": false,\r\n            \"showSubTitle\": false,\r\n            \"WidgetMetrics\": {\r\n                \"visible\": false,\r\n                \"Metrics\": []\r\n            },\r\n            \"WidgetPeriodChooser\": {\r\n                \"visible\": false,\r\n                \"type\": \"\",\r\n                \"startDate\": null,\r\n                \"endDate\": null\r\n            }\r\n        },\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"querytext\",\r\n                \"value\": \"\",\r\n                \"mapping\": \"\"\r\n            }\r\n        },\r\n        \"Filters\": {},\r\n        \"QueryConfiguration\": {\r\n            \"PreviousPeriod\": {\r\n                \"Show\": false,\r\n                \"KeyFieldName\": \"\",\r\n                \"Type\": 0\r\n            },\r\n            \"RequiredFilters\": []\r\n        }\r\n    }\r\n]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"","Configuration":"{\r\n    \"colCount\": 5,\r\n    \"items\": [\r\n        {\r\n            \"name\": \"Year\",\r\n            \"dataField\": \"Year\",\r\n            \"editorType\": \"dxNumberBox\",\r\n            \"editorOptions\": {\r\n                \"showSpinButtons\": true,\r\n                \"value\": 2019,\r\n                \"width\": 65,\r\n                \"placeholder\": \"year\",\r\n                \"onContentReady\": \"function(e){ setTimeout(function() { SkillsWorkflow.setDashboardFilter('year', 2019); SkillsWorkflow.setDashboardFilter('companyOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('divisionOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('departmentOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('TypologyGroupOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('UserType', '00000000-0000-0000-0000-000000000000');}, 500) }\",\r\n                \"onValueChanged\": \"function(e){ if(e.value != null) { SkillsWorkflow.setDashboardFilter('year', e.value); } }\"\r\n            },\r\n            \"noDataText\": \"Please wait...\"\r\n        },\r\n        {\r\n            \"dataField\": \"CompanyId\",\r\n            \"label\": {\r\n                \"text\": \"Company\"\r\n            },\r\n            \"editorType\": \"dxSelectBox\",\r\n            \"editorOptions\": {\r\n                \"width\": 200,\r\n                \"searchEnabled\": true,\r\n                \"dataSource\": {\r\n                    \"load\": \"function(loadOptions){ \r\n                            var searchValue = (\r\n                            loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                            var searchTake = (loadOptions.searchValue != null && loadOptions.searchValue != '' ? 10 : 100); \r\n                            return SkillsWorkflow.executeAPI('GET', 'companies/lookup',\r\n                    null,\r\n                    {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All companies'\r\n                        });return res;\r\n                    })\r\n                }\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET','companies/'+key+'/lookup',null,{}).then( result =>  { return Promise.resolve(result);}) }\"\r\n            },\r\n            \"placeholder\": \"All companies\",\r\n            \"displayExpr\": \"Name\",\r\n            \"valueExpr\": \"Id\",\r\n            \"onValueChanged\": \"function(e){ \r\n                if( e.value != null && e.value != '') {\r\n                    SkillsWorkflow.setDashboardFilter('companyOid', e.value);\r\n            } else {\r\n                    SkillsWorkflow.setDashboardFilter('companyOid', '00000000-0000-0000-0000-000000000000');\r\n            }\r\n                SW.setComponentByValue(e.previousValue, e.value, 'DivisionId');\r\n        }\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component,'CompanyId');}\"\r\n    }\r\n},\r\n{\r\n    \"dataField\": \"DivisionId\",\r\n    \"label\": {\r\n        \"text\": \"Division\"\r\n    },\r\n    \"editorType\": \"dxSelectBox\",\r\n    \"editorOptions\": {\r\n        \"width\": 200,\r\n        \"searchEnabled\": true,\r\n        \"dataSource\": {\r\n            \"load\": \"function(loadOptions){ \r\n                            let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                            let skip = loadOptions.skip || 0; \r\n                            let take = loadOptions.take || 20; \r\n                            var param = { name:searchValue, skip: skip, take: take\r\n            }; \r\n                            var companyId = SW.getValueFromComponent('CompanyId'); \r\n                            if (companyId == '00000000-0000-0000-0000-000000000000') {\r\n                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',\r\n                null,\r\n                {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All divisions'\r\n                    });return res;\r\n                })\r\n            } else if (companyId != null) { \r\n                                param['companyId'\r\n                ] = companyId;\r\n                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',param,\r\n                {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All divisions'\r\n                    });return res;\r\n                })\r\n            }\r\n        }\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET','divisions/'+key+'/lookup',null,{}).then( result =>  { return Promise.resolve(result);})}\"\r\n    },\r\n    \"placeholder\": \"All divisions\",\r\n    \"onValueChanged\": \"function(e){ \r\n                if (e.value != null && e.value != '') {\r\n                    SkillsWorkflow.setDashboardFilter('divisionOid', e.value);\r\n    } else {\r\n                    SkillsWorkflow.setDashboardFilter('divisionOid', '00000000-0000-0000-0000-000000000000');\r\n    }\r\n                SW.setComponentByValue(e.previousValue, e.value, 'DepartmentId');\r\n}\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'DivisionId'); }\",\r\n\"displayExpr\": \"Name\",\r\n\"valueExpr\": \"Id\",\r\n\"disabled\": true\r\n}\r\n},\r\n{\r\n\"dataField\": \"DepartmentId\",\r\n\"label\": {\r\n\"text\": \"Department\"\r\n},\r\n\"editorType\": \"dxSelectBox\",\r\n\"editorOptions\": {\r\n\"width\": 200,\r\n\"searchEnabled\": true,\r\n\"dataSource\": {\r\n    \"load\": \"function(loadOptions){ \r\n                    let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                    let skip = loadOptions.skip || 0; \r\n                    let take = loadOptions.take || 20;\r\n                    var param = { name: searchValue, skip: skip, take: take\r\n    }; \r\n                    var divisionId = SW.getValueFromComponent('DivisionId'); \r\n                    var companyId = SW.getValueFromComponent('CompanyId'); \r\n                    if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && companyId != null && companyId != '00000000-0000-0000-0000-000000000000') { \r\n                        param['divisionId'\r\n        ] = divisionId;\r\n                        param['companyId'\r\n        ] = companyId;\r\n    } else if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && (companyId == null || companyId == '00000000-0000-0000-0000-000000000000')) {\r\n                        param['divisionId'\r\n        ] = divisionId;\r\n    } \r\n                    return SkillsWorkflow.executeAPI('GET', 'departments',param,\r\n    {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All departments'\r\n        });return res;\r\n    })\r\n}\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET', 'departments/' + key, null, {}).then( result =>  { return Promise.resolve(result); } ) }\"\r\n},\r\n\"placeholder\": \"All departments\",\r\n\"onValueChanged\": \"function(e){ \r\n                    if(e.value != null && e.value != '') {\r\n                        SkillsWorkflow.setDashboardFilter('departmentOid', e.value);\r\n} else {\r\n                        SkillsWorkflow.setDashboardFilter('departmentOid', '00000000-0000-0000-0000-000000000000');\r\n}\r\nSW.setComponentByValue(e.previousValue, e.value, 'UserTypeId');\r\n}\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'DepartmentId'); }\",\r\n\"displayExpr\": \"Name\",\r\n\"valueExpr\": \"Id\",\r\n\"disabled\": true\r\n}\r\n},\r\n{\r\n\"dataField\": \"UserTypeId\",\r\n\"label\": {\r\n\"text\": \"User Type\"\r\n},\r\n\"editorType\": \"dxSelectBox\",\r\n\"editorOptions\": {\r\n\"width\": 200,\r\n\"searchEnabled\": true,\r\n\"dataSource\": {\r\n\"load\": \"function(loadOptions){ \r\n                                    let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                                    let skip = loadOptions.skip || 0; \r\n                                    let take = loadOptions.take || 20;\r\n                                    var param = { name: searchValue, skip: skip, take: take\r\n};\r\n                                    return SkillsWorkflow.executeAPI('GET', 'usertypes',param,\r\n{}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All User Types'\r\n});return res;\r\n});\r\n}\",\r\n            \"byKey\": \"function(key) { return SW.executeAPI('GET', 'usertypes/' + key, null, {}).then( result =>  { return Promise.resolve(result); } ) }\"\r\n},\r\n\"placeholder\": \"All User Types\",\r\n\"onValueChanged\": \"function(e){ \r\n                                if(e.value != null && e.value != '') {\r\n                                    SkillsWorkflow.setDashboardFilter('UserType', e.value);\r\n} else {\r\n                                    SkillsWorkflow.setDashboardFilter('UserType', '00000000-0000-0000-0000-000000000000');\r\n}\r\n}\",\r\n        \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'UserTypeId'); }\",\r\n\"displayExpr\": \"Name\",\r\n\"valueExpr\": \"Id\",\r\n\"disabled\": false\r\n}\r\n}\r\n]\r\n}","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a"},{"Id":"f563ee75-e009-4598-bd8b-4a4e05771740","Name":"Time Period","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":1,"Parameters":"[{\"WidgetSubTitle\":\"Capacity (blue), Contracted Time (red) & Weeks with not Enough Capacity\",\"WidgetType\":\"rangeselector\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#e0e0e0\",\"WidgetHeight\":100,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"startDate\":\"2018/06/1\",\"endDate\":\"2019/06/30\",\"type\":\"year\",\"visible\":false},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select  [Date] - datepart(dw, [Date]) + 1 as Week,\\n        sum(WorkingTime - Holidays - Leaves) as Capacity,\\n        sum(ContractedTime) as ContractedTime,\\n        iif(sum(WorkingTime - Holidays - Leaves - ContractedTime) < 0, sum(WorkingTime - Holidays - Leaves), null) as NotEnoughCapacity\\nfrom    (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        yrd.Day as [Date],\\n                        sum(RequiredHours) as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, Yearday yrd, UserTypology typ\\n                where   datepart(dw, yrd.day) not in (1, 7) and\\n                        typ.oid = ssu.Typology\\n                        and Year(yrd.day) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        hld.Date as [Date],\\n                        0 as WorkingTime,\\n                        sum(RequiredHours) as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserTypology typ, Holiday hld\\n                where   datepart(dw, hld.Date) not in (1, 7) and\\n                        typ.oid = ssu.Typology and\\n                        ssu.Company = hld.Company \\n                        and Year(hld.Date) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, hld.Date\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        uv.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        sum(RequiredHours) as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserVacation uv, UserTypology typ\\n                where   datepart(dw, uv.Day) not in (1, 7) and\\n                        uv.[User] = ssu.Oid and\\n                        typ.oid = ssu.Typology\\n                        and Year(uv.Day) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, uv.Day\\n                union all\\n                select  TypologyGroupOid,\\n                        UserOid,\\n                        [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        sum(ContractedTime) as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    (\\n                            select  edt.UserTypologyGroup as TypologyGroupOid,\\n                                    edt.[User] as UserOid,\\n                                    yrd.Day as [Date],\\n                                    sum(edt.Hours / (datediff(dd, est.[Date], est.Expiration) + 1)) as ContractedTime\\n                            from    Estimate est, EstimateItem eit, EstimateItemDetail edt, YearDay yrd\\n                            where   eit.Estimate = est.Oid and\\n                                    edt.EstimateItem = eit.Oid and\\n                                    yrd.Day between cast(est.[Date] as date) and cast(est.Expiration as date) and\\n                                    edt.Type = 2\\n                                    and Year([Date]) = @year\\n                            group by  est.Oid, edt.UserTypologyGroup, edt.[User], yrd.Day\\n                        ) t\\n                group by TypologyGroupOid, UserOid, [Date]\\n        ) t\\nwhere   Year([Date]) = @year\\ngroup by [Date] - datepart(dw, [Date]) + 1\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"year\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/FTE - Overtime View/execute","Configuration":"{\r\n    \"height\": 200,\r\n    \"size\": {\r\n        \"height\": 200\r\n    },\r\n    \"containerBackgroundColor\": \"#e0e0e0\",\r\n    \"selectedRangeColor\": \"#f5564a\",\r\n    \"onDrawn\": \"function bla(e) { SW.saveComponent(e.component, 'rangeSelector'); }\",\r\n    \"chart\": {\r\n        \"commonSeriesSettings\": {\r\n            \"type\": \"steparea\",\r\n            \"argumentField\": \"Week\"\r\n        },\r\n        \"series\": [\r\n            {\r\n                \"valueField\": \"Capacity\"\r\n            },\r\n            {\r\n                \"valueField\": \"ContractedTime\"\r\n            },\r\n            {\r\n                \"valueField\": \"NotEnoughCapacity\",\r\n                \"type\": \"scatter\",\r\n                \"ignoreEmptyPoints\": true,\r\n                \"color\": \"#da5859\"\r\n            }\r\n        ]\r\n    },\r\n    \"scale\": {\r\n        \"minorTickInterval\": \"week\",\r\n        \"tickInterval\": \"month\",\r\n        \"valueType\": \"datetime\"\r\n    },\r\n    \"sliderMarker\": {\r\n        \"customizeText\": \"function (e) {            var bla = SW.getComponent('rangeSelector');            if(bla === null) return;            var endDate = bla._slidersController._sliders[1]._value;            if(endDate === e.value) {                var aux = new Date(endDate);                aux.setDate(aux.getDate()-1);                var blo = aux.toLocaleDateString(undefined, {month: 'long'}) + ' ' + aux.toLocaleDateString(undefined,{day:'numeric'});                return blo;            } else {                return e.valueText;            }        }\",\r\n        \"format\": \"monthAndDay\",\r\n        \"color\": \"#da5859\"\r\n    },\r\n    \"value\": {\r\n        \"length\": {\r\n            \"years\": 1\r\n        }\r\n    },\r\n    \"legend\": {\r\n        \"visible\": true,\r\n        \"rowCount\": 1,\r\n        \"verticalAlignment\": \"top\",\r\n        \"horizontalAlignment\": \"center\",\r\n        \"font\": {\r\n            \"size\": 12,\r\n            \"family\": \"Varela Round\",\r\n            \"weight\": 600\r\n        }\r\n    }\r\n}","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a"},{"Id":"a49d0e35-d53a-49cb-a3c6-cb548fb6ba33","Name":"Typology Groups","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":2,"Parameters":"[{\"WidgetSubTitle\":\"Staff, Proposals & Timesheet\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetHeight\":300,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":true,\"metricName\":\"? Delayed To Do\",\"metricFieldValue\":\"DelayedToDoJobsGrandTotal\"},{\"visible\":true,\"metricName\":\"?  Delayed Work in Progress\",\"metricFieldValue\":\"DelayedWorkInProgressJobsGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"with HeadCount as (\\n\\tselect \\n\\t\\t\\tv.UserTypologyGroupId,\\n\\t\\t\\tv.UserTypologyGroup,\\n\\t\\t\\tv.WorkDays,\\n\\t\\t\\tcount(v.UserName) as TypologyWorkDays,\\n\\t\\t\\t(count(v.UserName) * 1.0) / (v.WorkDays * 1.0) as HeadCount\\n\\tfrom (\\n\\t\\tselect\\t\\n\\t\\t\\t\\t(DATEDIFF(dd, @FromDate, @ToDate) + 1)\\n\\t\\t\\t\\t-(DATEDIFF(wk, @FromDate, @ToDate) * 2)\\n\\t\\t\\t\\t-(CASE WHEN DATENAME(dw, @FromDate) = 'Sunday' THEN 1 ELSE 0 END)\\n\\t\\t\\t\\t-(CASE WHEN DATENAME(dw, @ToDate) = 'Saturday' THEN 1 ELSE 0 END)\\n\\t\\t\\t\\tas WorkDays,\\n\\t\\t\\t\\tv.[User] as UserName,\\n\\t\\t\\t\\tv.UserTypologyGroup, \\n\\t\\t\\t\\tv.UserTypologyGroupId,\\n\\t\\t\\t\\tv.[Date]\\n\\t\\tfrom\\t\\n\\t\\t\\t\\tAnalytics.DatamartTimesheet v\\n\\t\\twhere\\t\\n\\t\\t\\t\\tv.[Date] between @FromDate and @ToDate\\n\\t\\tgroup by\\n\\t\\t\\t\\tv.[User], \\n\\t\\t\\t\\tv.UserTypologyGroup, \\n\\t\\t\\t\\tv.UserTypologyGroupId,\\n\\t\\t\\t\\tv.[Date]\\n\\t) v\\n\\tgroup by \\n\\t\\t\\tv.UserTypologyGroupId,\\n\\t\\t\\tv.UserTypologyGroup,\\n\\t\\t\\tv.WorkDays\\n)\\nselect \\n\\t\\tt.Division,\\n\\t\\tt.Department,\\n\\t\\tt.TypologyGroup,\\n\\t\\tt.TypologyGroupOid,\\n\\t\\tt.UserCount,\\n\\t\\tIsNull(hd.HeadCount, 0.0) as HeadCount,\\n\\t\\tt.Capacity,\\n\\t\\tt.Holidays,\\n\\t\\tt.Leaves,\\n\\t\\tt.ContractedTime,\\n\\t\\tt.PlannedTime,\\n\\t\\tt.ForecastTime,\\n\\t\\tt.ActualTime,\\n\\t\\tt.BillableTime,\\n\\t\\tt.NewBusinessTime,\\n\\t\\tt.AdministrativeTime,\\n\\t\\tt.ClientTime,\\n\\t\\tt.ClientBillableTime,\\n\\t\\t(t.BillableTime + t.PlannedTime) as BillableAndPlannedTime,\\n\\t\\t(t.BillableTime + t.ForecastTime) as BillableAndForecastTime,\\n\\t\\tIIF(t.Capacity > 0, (t.ClientTime / t.Capacity), 0) AS CapacityClientTimeVariation,\\n        IIF(t.Capacity > 0, (t.ContractedTime / t.Capacity), 0) AS CapacityContractedTimeVariation,\\n\\t\\tIIF(t.Capacity > 0, ((t.BillableTime + t.PlannedTime) / t.Capacity), 0) CapacityBillableAndPlannedVariation,\\n\\t\\tIIF(t.Capacity > 0, ((t.BillableTime + t.ForecastTime) / t.Capacity), 0) CapacityBillableAndForecastVariation,\\n\\t\\tIIF(t.ContractedTime > 0, ((t.BillableTime + t.PlannedTime) / t.ContractedTime), 0) ContractedBillableAndPlannedVariation,\\n        IIF(t.ContractedTime > 0, ((t.BillableTime + t.ForecastTime) / t.ContractedTime), 0) ContractedBillableAndForecastVariation\\n\\t\\t\\nfrom(\\nselect \\n\\t\\tt.Division,\\n\\t\\tt.Department,\\n\\t\\tt.TypologyGroup,\\n\\t\\tt.TypologyGroupOid,\\n\\t\\tsum(t.UserCount) as UserCount,\\n\\t\\tsum(t.Capacity) as Capacity,\\n\\t\\tsum(t.Holidays) as Holidays,\\n\\t\\tsum(t.Leaves) as Leaves,\\n\\t\\tsum(t.ContractedTime) as ContractedTime,\\n\\t\\tsum(t.PlannedTime) as PlannedTime,\\n\\t\\tsum(t.ForecastTime) as ForecastTime,\\n\\t\\tsum(t.ActualTime) as ActualTime,\\n\\t\\tsum(t.BillableTime) as BillableTime,\\n\\t\\tsum(t.NewBusinessTime) as NewBusinessTime,\\n\\t\\tsum(t.AdministrativeTime) as AdministrativeTime,\\n\\t\\tsum(t.ClientTime) as ClientTime,\\n\\t\\tsum(t.ClientBillableTime) as ClientBillableTime\\nfrom(\\nselect \\n\\t\\tdi.[Name] as Division,\\n\\t\\tde.[Name] as Department,\\n\\t\\tv.UserTypologyGroup as TypologyGroup,\\n\\t\\tv.UserTypologyGroupId as TypologyGroupOid,\\n\\t\\tcount(distinct v.UserId) as UserCount,\\n\\t\\tcount(v.UserId) as UserWorkDays,\\n\\t\\tsum(v.Capacity) as Capacity,\\n\\t\\tsum(v.Holidays) as Holidays,\\n\\t\\tsum(v.Leaves) as Leaves,\\n\\t\\tsum(v.ContractedTime) as ContractedTime,\\n\\t\\tsum(v.PlannedTime) as PlannedTime,\\n\\t\\tsum(v.ForecastTime) as ForecastTime,\\n\\t\\tsum(v.ActualTime) as ActualTime,\\n\\t\\tsum(v.BillableTime) as BillableTime,\\n\\t\\tsum(v.NewBusinessTime) as NewBusinessTime,\\n\\t\\tsum(v.AdministrativeTime) as AdministrativeTime,\\n\\t\\tsum(v.BillableTime + v.NewBusinessTime) as ClientTime,\\n\\t\\tsum(v.ClientBillableTime) as ClientBillableTime\\nfrom \\n(\\nselect \\n\\t\\tdu.UserTypologyGroup,\\n\\t\\tdu.UserTypologyGroupId,\\n\\t\\tdu.Oid as UserId,\\n\\t\\tsum(du.Capacity) as Capacity,\\n\\t\\tsum(du.HolidayTime) as Holidays,\\n\\t\\tsum(du.LeaveTime) as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\tsum(du.ActualTime) as ActualTime,\\n\\t\\tsum(du.BillableTime) as BillableTime,\\n\\t\\tsum(du.NewBusinessTime) as NewBusinessTime,\\n\\t\\tsum(du.AdministrativeTime) as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.[User](@CurrentUserId) du\\nwhere \\n        (du.EndDate is null or du.EndDate > @ToDate) AND\\n\\t\\tdu.[Date] between @FromDate AND @ToDate and\\n        DATEPART(DW, du.[Date]) not in (1,7) and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR du.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR du.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR du.DepartmentId = @DepartmentOid)\\ngroup by \\n\\t\\tdu.UserTypologyGroup,\\n\\t\\tdu.UserTypologyGroupId,\\n\\t\\tdu.Oid\\nunion\\nselect \\n\\t\\tde.UserTypologyGroup,\\n\\t\\tde.UserTypologyGroupId,\\n\\t\\tde.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\tsum(de.[Hours]) as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.Estimate(@CurrentUserId) de,\\n\\t\\tEstimateItemDetail edt\\nwhere \\n\\t\\tde.ItemId = edt.Oid and edt.[Type] = 2 and\\n\\t\\tde.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR de.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR de.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR de.DepartmentId = @DepartmentOid)\\ngroup by \\n\\t\\tde.UserTypologyGroup,\\n\\t\\tde.UserTypologyGroupId,\\n\\t\\tde.UserId\\nunion\\nselect \\n\\t\\tpht.UserTypologyGroup,\\n\\t\\tpht.UserTypologyGroupId,\\n\\t\\tpht.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\tsum(pht.[Hours])as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.PlannedHoursTotal(@CurrentUserId) pht,\\n\\t\\tAnalytics.Project(@CurrentUserId) dp\\nwhere \\n\\t\\tpht.ProjectId = dp.Oid and\\n\\t\\tdp.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR pht.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR pht.DivisionId = @DivisionOid)\\ngroup by \\n\\t\\tpht.UserTypologyGroup,\\n\\t\\tpht.UserTypologyGroupId,\\n\\t\\tpht.UserId\\nunion\\nselect \\n\\t\\tph.UserTypologyGroup,\\n\\t\\tph.UserTypologyGroupId,\\n\\t\\tph.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\tsum(ph.[Hours]) as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.PlannedHours(@CurrentUserId) ph,\\n\\t\\tAnalytics.Project(@CurrentUserId) dp\\nwhere \\n\\t\\tph.ProjectId = dp.Oid and\\n\\t\\tdp.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ph.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ph.DivisionId = @DivisionOid)\\ngroup by \\n\\t\\tph.UserTypologyGroup,\\n\\t\\tph.UserTypologyGroupId,\\n\\t\\tph.UserId\\nunion\\nselect \\n\\t\\tdt.UserTypologyGroup,\\n\\t\\tdt.UserTypologyGroupId,\\n\\t\\tdt.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\tsum(dt.ActualTime) as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.Timesheet(@CurrentUserId) dt\\nwhere \\n\\t\\tdt.[Date] between @FromDate AND @ToDate and\\n\\t\\tdt.Client is not null and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR dt.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR dt.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR dt.DepartmentId = @DepartmentOid)\\ngroup by \\n\\t\\tdt.UserTypologyGroup,\\n\\t\\tdt.UserTypologyGroupId,\\n\\t\\tdt.UserId\\n) v\\t\\t\\n\\tleft outer join (select distinct du.UserType, du.UserTypeId, du.Oid from Analytics.[User](@CurrentUserId) du)du on du.Oid = v.UserId\\n\\tleft outer join UserTypology ut on ut.UserTypologyGroup = v.UserTypologyGroupId\\n\\tleft outer join Department de on de.Oid = ut.Department\\n\\tleft outer join Division di on di.Oid = de.Division\\nwhere\\t(du.UserTypeId = @UserType or @UserType = '00000000-0000-0000-0000-000000000000')\\ngroup by\\n\\t\\tdi.[Name],\\n\\t\\tde.[Name],\\n\\t\\tv.UserId,\\n\\t\\tv.UserTypologyGroup,\\n\\t\\tv.UserTypologyGroupId \\n) t\\nwhere t.TypologyGroupOid is not null\\ngroup by \\n\\t\\tt.Division,\\n\\t\\tt.Department,\\n\\t\\tt.TypologyGroup,\\n\\t\\tt.TypologyGroupOid\\n) t left outer join HeadCount hd on hd.UserTypologyGroupId = t.TypologyGroupOid\\norder by \\n\\t\\tt.TypologyGroup\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"startDate\",\"endDate\",\"companyOid\",\"divisionOid\",\"departmentOid\",\"UserType\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/FTE - Typology Groups/execute","Configuration":"{\r\n    \"headerFilter\": {\r\n        \"visible\": true\r\n    },\r\n    \"stateStoring\": {\r\n        \"enabled\": false\r\n    },\r\n    \"grouping\": {\r\n        \"autoExpandAll\": true\r\n    },\r\n    \"onRowClick\": \"function(e){ if(e.data.TypologyGroupOid != null) {        SkillsWorkflow.setDashboardFilter('TypologyGroupOid', e.data.TypologyGroupOid);                                            }             }\",\r\n    \"columnResizingMode\": \"widget\",\r\n    \"allowColumnResizing\": \"true\",\r\n    \"allowFiltering\": true,\r\n    \"columnAutoWidth\": \"true\",\r\n    \"searchPanel\": {\r\n        \"visible\": true\r\n    },\r\n    \"height\": \"370\",\r\n    \"scrolling\": {\r\n        \"mode\": \"virtual\"\r\n    },\r\n    \"columnMinWidth\": \"80\",\r\n    \"columns\": [\r\n        {\r\n            \"dataField\": \"Division\",\r\n            \"name\": \"Division\",\r\n            \"caption\": \"Division\",\r\n            \"width\": 100,\r\n            \"groupIndex\": 0\r\n        },\r\n        {\r\n            \"dataField\": \"Department\",\r\n            \"name\": \"Department\",\r\n            \"caption\": \"Department\",\r\n            \"width\": 100,\r\n            \"groupIndex\": 1\r\n        },\r\n        {\r\n            \"dataField\": \"TypologyGroup\",\r\n            \"name\": \"Typology Group\",\r\n            \"caption\": \"Typology\",\r\n            \"width\": 200\r\n        },\r\n        {\r\n            \"dataField\": \"HeadCount\",\r\n            \"caption\": \"# Heads\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0.0\"\r\n        },\r\n        {\r\n            \"dataField\": \"Capacity\",\r\n            \"caption\": \"Capacity\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0.0\"\r\n        },\r\n        {\r\n            \"dataField\": \"CapacityContractedTimeVariation\",\r\n            \"caption\": \"Contracted / Capacity\",\r\n            \"name\": \"VariationCapCon\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedBillableAndPlannedVariation\",\r\n            \"caption\": \"(Billable + Planned) / Contracted\",\r\n            \"name\": \"VariationConBilPla\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"visible\": false,\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"CapacityBillableAndPlannedVariation\",\r\n            \"caption\": \"(Billable + Planned) / Capacity\",\r\n            \"name\": \"VariationCapBilPla\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"visible\": false,\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedBillableAndForecastVariation\",\r\n            \"caption\": \"(Billable + Forecast) / Contracted\",\r\n            \"name\": \"VariationConBilFor\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"CapacityBillableAndForecastVariation\",\r\n            \"caption\": \"(Billable + Forecast) / Capacity\",\r\n            \"name\": \"VariationCapBilFor\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedTime\",\r\n            \"caption\": \"Contracted\",\r\n            \"name\": \"Contracted\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"PlannedTime\",\r\n            \"caption\": \"Planned\",\r\n            \"name\": \"Planned\",\r\n            \"alignment\": \"right\",\r\n            \"visible\": false,\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"ForecastTime\",\r\n            \"caption\": \"Forecast\",\r\n            \"name\": \"Forecast\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"BillableAndPlannedTime\",\r\n            \"caption\": \"Billable + Planned\",\r\n            \"name\": \"BillableAndPlanned\",\r\n            \"alignment\": \"right\",\r\n            \"visible\": false,\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"BillableAndForecastTime\",\r\n            \"caption\": \"Billable + Forecast\",\r\n            \"name\": \"BillableAndForecast\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"ActualTime\",\r\n            \"caption\": \"Actual\",\r\n            \"name\": \"Actual\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"BillableTime\",\r\n            \"caption\": \"Billable\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"NewBusinessTime\",\r\n            \"caption\": \"Non Billable\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"AdministrativeTime\",\r\n            \"caption\": \"Administrative\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"ClientBillableTime\",\r\n            \"caption\": \"Billable Client\",\r\n            \"name\": \"BillableClient\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        }\r\n    ],\r\n    \"sortByGroupSummaryInfo\": [\r\n        {\r\n            \"summaryItem\": \"count\"\r\n        }\r\n    ],\r\n    \"summary\": {\r\n        \"calculateCustomSummary\": \"function (options) {            if (options.name === 'ContractedVsCapacitySummary') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.ContractedTime;                        options.totalValue[1] = options.totalValue[1] + options.value.Capacity;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }            }            if (options.name === 'BillableVsPlannedVsContractedSummary') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableAndPlannedTime;                        options.totalValue[1] = options.totalValue[1] + options.value.ContractedTime;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }            }            if (options.name === 'BillableVsPlannedVsCapacitySummary') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableAndPlannedTime;                        options.totalValue[1] = options.totalValue[1] + options.value.Capacity;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }            }            if (options.name === 'BillableVsForecastVsCapacitySummary') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableTime;                        options.totalValue[1] = options.totalValue[1] + options.value.ForecastTime;                        options.totalValue[2] = options.totalValue[2] + options.value.Capacity;                        break;                    case 'finalize':                        if(Number(options.totalValue[2]) > 0)                            options.totalValue = ((options.totalValue[0] + options.totalValue[1]) / options.totalValue[2]);                        else                            options.totalValue = 0;                            break;                }            }            if (options.name === 'BillableVsForecastVsContractedSummary') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableTime;                        options.totalValue[1] = options.totalValue[1] + options.value.ForecastTime;                        options.totalValue[2] = options.totalValue[2] + options.value.ContractedTime;                        break;                    case 'finalize':                        if(Number(options.totalValue[2]) > 0)                            options.totalValue = ((options.totalValue[0] + options.totalValue[1]) / options.totalValue[2]);                        else                            options.totalValue = 0;                            break;                }            }        }\",\r\n        \"totalItems\": [\r\n            {\r\n                \"column\": \"Typology Group\",\r\n                \"summaryType\": \"count\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"Total: {0}\",\r\n                \"alignment\": \"left\"\r\n            },\r\n            {\r\n                \"column\": \"Capacity\",\r\n                \"name\": \"Capacity\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Non Billable\",\r\n                \"name\": \"Non Billable\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"# Heads\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Contracted\",\r\n                \"name\": \"Contracted\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Planned\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Billable + Planned\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Billable + Forecast\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Actual\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Billable\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"New Business\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Administrative\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Billable Client\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Forecast\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"ContractedVsCapacitySummary\",\r\n                \"showInColumn\": \"CapacityContractedTimeVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"BillableVsPlannedVsContractedSummary\",\r\n                \"showInColumn\": \"ContractedBillableAndPlannedVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"BillableVsPlannedVsCapacitySummary\",\r\n                \"showInColumn\": \"CapacityBillableAndPlannedVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"BillableVsForecastVsCapacitySummary\",\r\n                \"showInColumn\": \"CapacityBillableAndForecastVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"BillableVsForecastVsContractedSummary\",\r\n                \"showInColumn\": \"ContractedBillableAndForecastVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            }\r\n        ],\r\n        \"groupItems\": [\r\n            {\r\n                \"column\": \"Non Billable\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"column\": \"Actual\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"column\": \"Billable\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"column\": \"Administrative\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"column\": \"Billable Client\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"column\": \"# Heads\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"column\": \"Capacity\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"column\": \"Forecast\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"column\": \"Contracted\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0.0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"column\": \"Billable + Forecast\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"name\": \"ContractedVsCapacitySummary\",\r\n                \"showInColumn\": \"CapacityContractedTimeVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"name\": \"BillableVsForecastVsContractedSummary\",\r\n                \"showInColumn\": \"ContractedBillableAndForecastVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            },\r\n            {\r\n                \"name\": \"BillableVsForecastVsCapacitySummary\",\r\n                \"showInColumn\": \"CapacityBillableAndForecastVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"showInGroupFooter\": false,\r\n                \"alignByColumn\": true\r\n            }\r\n        ]\r\n    },\r\n    \"columnChooser\": {\r\n        \"enabled\": \"true\"\r\n    }\r\n}","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a"},{"Id":"3880099b-4022-4247-b6c9-df08c9994d3f","Name":"Utilization per User","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":5,"Parameters":"[{\"WidgetSubTitle\":\"Billable and Non-Billable Actual Hours in % of User Capacity\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetHeight\":300,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":false,\"metricName\":\"# Forecast\",\"metricFieldValue\":\"TimeGrandTotal\"},{\"visible\":false,\"metricName\":\"# Actual\",\"metricFieldValue\":\"UtilizationPercentGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"SELECT\\n\\t\\tv.UserTypologyGroup,\\n\\t\\tv.UserType,\\n\\t\\tv.FullName,\\n\\t\\tv.UserId,\\n\\t\\tv.HasImage as HasImage,\\n\\t\\tv.[Hours],\\n\\t\\tv.AdministrativeHours,\\n\\t\\tv.InternalWorkHours,\\n\\t\\t(v.NewBusinessHours + v.AdministrativeHours) as NewBusinessHours,\\n\\t\\t(v.BillableHours - v.AdministrativeHours) as BillableHours,\\n\\t\\tv.ClientHours,\\n\\t\\tv.NonWorkedHours,\\n\\t\\tv.Capacity,\\n\\t\\tv.Leaves,\\n\\t\\tv.ContractedTime,\\n\\t\\tv.ForecastTime,\\n        (v.BillableHours + v.ForecastTime) as BillableAndForecastTime,\\n        IIF(v.Capacity > 0, (v.ContractedTime / v.Capacity), 0) AS CapacityContractedTimeVariation,\\n        IIF(v.Capacity > 0, ((v.BillableHours + v.ForecastTime) / v.Capacity), 0) CapacityBillableAndForecastVariation,\\n        IIF(v.ContractedTime > 0, ((v.BillableHours + v.ForecastTime) / v.ContractedTime), 0) ContractedBillableAndForecastVariation,\\n\\t\\tIIF(v.Capacity > 0, ISNULL(v.BillableHours, 0.0) / v.Capacity, 1.0) as UtilizationPercentage,\\n\\t\\tIIF(v.Capacity > 0, ISNULL(v.NewBusinessHours, 0.0) / v.Capacity, 1.0) as UtilizationNonBillablePercentage\\nfrom \\n(\\n\\tselect \\n\\t\\t\\tv.UserTypologyGroup,\\n\\t\\t\\tdu.UserType,\\n\\t\\t\\tdu.FullName,\\n\\t\\t\\tv.UserId,\\n\\t\\t\\tdu.HasImage as HasImage,\\n\\t\\t\\tsum(v.[Hours]) as [Hours],\\n\\t\\t\\tsum(v.AdministrativeTime) as AdministrativeHours,\\n\\t\\t\\tsum(v.InternalWorkHours) as InternalWorkHours,\\n\\t\\t\\tsum(v.NewBusinessHours) as NewBusinessHours,\\n\\t\\t\\tsum(v.BillableHours) as BillableHours,\\n\\t\\t\\tsum(v.ClientHours) as ClientHours,\\n\\t\\t\\tsum(v.NonWorkedHours) as NonWorkedHours,\\n\\t\\t\\tsum(v.Capacity) as Capacity,\\n\\t\\t\\tsum(v.LeaveTime) as Leaves,\\n\\t\\t\\tsum(v.ContractedTime) as ContractedTime,\\n\\t\\t\\tsum(v.ForecastTime) as ForecastTime\\n\\tfrom (\\n\\t\\tselect \\n\\t\\t\\t\\tdu.UserTypologyGroup, \\n\\t\\t\\t\\tdu.Oid as UserId,\\n\\t\\t\\t\\tsum(du.ActualTime) as [Hours],\\n\\t\\t\\t\\tsum(du.AdministrativeTime) as AdministrativeTime,\\n\\t\\t\\t\\t0 as InternalWorkHours,\\n\\t\\t\\t\\tsum(du.NewBusinessTime) as NewBusinessHours,\\n\\t\\t\\t\\tsum(du.BillableTime) as BillableHours,\\n\\t\\t\\t\\t0 as ClientHours,\\n\\t\\t\\t\\tSUM(ISNULL(du.ActualTime - (du.AdministrativeTime + du.NewBusinessTime + du.BillableTime), 0.0)) as NonWorkedHours,\\n\\t\\t\\t\\tsum(du.Capacity) as Capacity,\\n\\t\\t\\t\\tsum(du.LeaveTime) as LeaveTime,\\n\\t\\t\\t\\t0 as ContractedTime,\\n\\t\\t\\t\\t0 as ForecastTime\\n\\t\\tfrom \\n\\t\\t\\t\\tAnalytics.[User](@CurrentUserId) du\\n\\t\\twhere \\n\\t\\t\\t\\t(du.EndDate is null or du.EndDate > @ToDate) and\\n\\t\\t\\t\\tdu.[Date] between @FromDate AND @ToDate and\\n                DATEPART(DW, du.[Date]) in (2,3,4,5,6) and\\n\\t\\t\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR du.CompanyId = @CompanyOid) AND \\n\\t\\t\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR du.DivisionId = @DivisionOid) AND \\n\\t\\t\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR du.DepartmentId = @DepartmentOid) AND\\n\\t\\t\\t\\t(du.UserTypologyGroupId = @TypologyGroupOid)\\n\\t\\tgroup by \\n\\t\\t\\t\\t\\tdu.Department, \\n\\t\\t\\t\\t\\tdu.UserTypologyGroup, \\n\\t\\t\\t\\t\\tdu.FullName,\\n\\t\\t\\t\\t\\tdu.Oid\\n\\t\\tunion\\n\\t\\tselect \\n\\t\\t\\t\\tdt.UserTypologyGroup, \\n\\t\\t\\t\\tdt.UserId,\\n\\t\\t\\t\\t0 as [Hours],\\n\\t\\t\\t\\t0 as AdministrativeTime,\\n\\t\\t\\t\\tSUM(ISNULL(dt.InternalWorkTime, 0.0)) AS [InternalWorkHours],\\n\\t\\t\\t\\t0 as NewBusinessHours,\\n\\t\\t\\t\\t0 as BillableHours,\\n\\t\\t\\t\\tSUM(ISNULL(dt.BillableTime, 0.0) - ISNULL(dt.[InternalWorkTime], 0.0)) as [ClientHours],\\n\\t\\t\\t\\t0 as NonWorkedHours,\\n\\t\\t\\t\\t0 as Capacity,\\n\\t\\t\\t\\t0 as LeaveTime,\\n\\t\\t\\t\\t0 as ContractedTime,\\n\\t\\t\\t\\t0 as ForecastTime\\n\\t\\tfrom \\n\\t\\t\\t\\tAnalytics.Timesheet(@CurrentUserId) dt\\n\\t\\twhere \\n\\t\\t\\t\\tdt.[Date] between @FromDate AND @ToDate and\\n\\t\\t\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR dt.CompanyId = @CompanyOid) AND \\n\\t\\t\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR dt.DivisionId = @DivisionOid) AND \\n\\t\\t\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR dt.DepartmentId = @DepartmentOid) AND\\n\\t\\t\\t\\t(dt.UserTypologyGroupId = @TypologyGroupOid)\\n\\t\\tgroup by \\n\\t\\t\\t\\tdt.Department, \\n\\t\\t\\t\\tdt.UserTypologyGroup, \\n\\t\\t\\t\\tdt.[User],\\n\\t\\t\\t\\tdt.UserId\\n\\t\\tunion\\n\\t\\tselect \\n\\t\\t\\t\\tde.UserTypologyGroup, \\n\\t\\t\\t\\tde.UserId,\\n\\t\\t\\t\\t0 as [Hours],\\n\\t\\t\\t\\t0 as AdministrativeTime,\\n\\t\\t\\t\\t0 AS [InternalWorkHours],\\n\\t\\t\\t\\t0 as NewBusinessHours,\\n\\t\\t\\t\\t0 as BillableHours,\\n\\t\\t\\t\\t0 as [ClientHours],\\n\\t\\t\\t\\t0 as NonWorkedHours,\\n\\t\\t\\t\\t0 as Capacity,\\n\\t\\t\\t\\t0 as LeaveTime,\\n\\t\\t\\t\\tsum(de.[Hours]) as ContractedTime,\\n\\t\\t\\t\\t0 as ForecastTime\\n\\t\\tfrom \\n\\t\\t\\t\\tAnalytics.Estimate(@CurrentUserId) de\\n\\t\\twhere \\n\\t\\t\\t\\tde.[Date] between @FromDate AND @ToDate and\\n\\t\\t\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR de.CompanyId = @CompanyOid) AND \\n\\t\\t\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR de.DivisionId = @DivisionOid) AND \\n\\t\\t\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR de.DepartmentId = @DepartmentOid) AND\\n\\t\\t\\t\\t(de.UserTypologyGroupId = @TypologyGroupOid)\\n\\t\\tgroup by \\n\\t\\t\\t\\tde.UserTypologyGroup, \\n\\t\\t\\t\\tde.[User],\\n\\t\\t\\t\\tde.UserId\\n\\t\\tunion\\n\\t\\tselect \\n\\t\\t\\t\\tph.UserTypologyGroup,\\n\\t\\t\\t\\tph.UserId as UserId,\\n\\t\\t\\t\\t0 as [Hours],\\n\\t\\t\\t\\t0 as AdministrativeTime,\\n\\t\\t\\t\\t0 AS [InternalWorkHours],\\n\\t\\t\\t\\t0 as NewBusinessHours,\\n\\t\\t\\t\\t0 as BillableHours,\\n\\t\\t\\t\\t0 as [ClientHours],\\n\\t\\t\\t\\t0 as NonWorkedHours,\\n\\t\\t\\t\\t0 as Capacity,\\n\\t\\t\\t\\t0 as LeaveTime,\\n\\t\\t\\t\\t0 as ContractedTime,\\n\\t\\t\\t\\tsum(ph.[Hours]) as ForecastTime\\n\\t\\tfrom \\n\\t\\t\\t\\tAnalytics.PlannedHours(@CurrentUserId) ph,\\n\\t\\t\\t\\tAnalytics.Project(@CurrentUserId) dp\\n\\t\\twhere \\n\\t\\t\\t\\tph.ProjectId = dp.Oid and\\n\\t\\t\\t\\tdp.[Date] between @FromDate AND @ToDate and\\n\\t\\t\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ph.CompanyId = @CompanyOid) AND \\n\\t\\t\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ph.DivisionId = @DivisionOid) AND\\n\\t\\t\\t\\t(ph.UserTypologyGroupId = @TypologyGroupOid)\\n\\t\\tgroup by \\n\\t\\t\\t\\tph.UserTypologyGroup,\\n\\t\\t\\t\\tph.[User],\\n\\t\\t\\t\\tph.UserId\\n\\t) v left outer join (select distinct du.FullName, du.HasImage, du.UserType, du.UserTypeId, du.Oid from Analytics.[User](@CurrentUserId) du)du on du.Oid = v.UserId\\nwhere (du.UserTypeId = @UserType or @UserType = '00000000-0000-0000-0000-000000000000')\\ngroup by \\n\\t\\tv.UserTypologyGroup,\\n\\t\\tdu.UserType,\\n\\t\\tdu.FullName,\\n\\t\\tdu.HasImage,\\n\\t\\tv.UserId\\n) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"startDate\",\"endDate\",\"companyOid\",\"divisionOid\",\"departmentOid\",\"TypologyGroupOid\",\"UserType\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Utilization_Per_Company_Department_User/execute","Configuration":"{\r\n    \"headerFilter\": {\r\n        \"visible\": true\r\n    },\r\n    \"grouping\": {\r\n        \"autoExpandAll\": true\r\n    },\r\n    \"columnResizingMode\": \"widget\",\r\n    \"allowColumnResizing\": \"true\",\r\n    \"allowFiltering\": true,\r\n    \"columnAutoWidth\": \"true\",\r\n    \"searchPanel\": {\r\n        \"visible\": true\r\n    },\r\n    \"selection\": {\r\n        \"mode\": \"single\"\r\n    },\r\n    \"height\": \"300\",\r\n    \"scrolling\": {\r\n        \"mode\": \"virtual\"\r\n    },\r\n    \"columnMinWidth\": \"80\",\r\n    \"columns\": [\r\n        {\r\n            \"dataField\": \"UserId\",\r\n            \"name\": \"Picture\",\r\n            \"caption\": \"\",\r\n            \"width\": 30,\r\n            \"alignment\": \"left\",\r\n            \"cellTemplate\": \"function(e, i) { debugger;        SK.showImage(e, 'user', 'small', i.data.HasImage, i.data.User, i.text);    }\"\r\n        },\r\n        {\r\n            \"dataField\": \"FullName\",\r\n            \"name\": \"User\",\r\n            \"caption\": \"Name\",\r\n            \"width\": 120\r\n        },\r\n        {\r\n            \"dataField\": \"UserType\",\r\n            \"name\": \"User Type\",\r\n            \"caption\": \"User Type\",\r\n            \"width\": 200\r\n        },\r\n        {\r\n            \"dataField\": \"Capacity\",\r\n            \"caption\": \"Capacity\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"CapacityContractedTimeVariation\",\r\n            \"caption\": \"Contracted / Capacity\",\r\n            \"name\": \"VariationCapCon\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedBillableAndForecastVariation\",\r\n            \"caption\": \"(Billable + Forecast) / Contracted\",\r\n            \"name\": \"VariationConBilFor\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"CapacityBillableAndForecastVariation\",\r\n            \"caption\": \"(Billable + Forecast) / Capacity\",\r\n            \"name\": \"VariationCapBilFor\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedTime\",\r\n            \"caption\": \"Contracted\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"ForecastTime\",\r\n            \"caption\": \"Forecast\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"BillableAndForecastTime\",\r\n            \"caption\": \"Billable + Forecast\",\r\n            \"name\": \"BillableAndForecast\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"Hours\",\r\n            \"caption\": \"Actual\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"BillableHours\",\r\n            \"caption\": \"Billable\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"NewBusinessHours\",\r\n            \"caption\": \"Non-Billable\",\r\n            \"name\": \"NonBillable\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"AdministrativeHours\",\r\n            \"caption\": \"Admin\",\r\n            \"name\": \"Admin\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"Leaves\",\r\n            \"caption\": \"Leaves\",\r\n            \"alignment\": \"right\",\r\n            \"visible\": false,\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"UtilizationNonBillablePercentage\",\r\n            \"caption\": \"Non Billable %\",\r\n            \"name\": \"UtilizationNonBillable\",\r\n            \"alignment\": \"right\",\r\n            \"visible\": false,\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) {          SkillsWorkflow.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true);  }\"\r\n        },\r\n        {\r\n            \"dataField\": \"UtilizationPercentage\",\r\n            \"caption\": \"Billable %\",\r\n            \"name\": \"Utilization\",\r\n            \"alignment\": \"right\",\r\n            \"visible\": false,\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) {          SkillsWorkflow.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true);}\"\r\n        }\r\n    ],\r\n    \"sortByGroupSummaryInfo\": [\r\n        {\r\n            \"summaryItem\": \"count\"\r\n        }\r\n    ],\r\n    \"summary\": {\r\n        \"calculateCustomSummary\": \"function (options) {\r\n            if (options.name === 'UtilizationNonBillablePercentage') {\r\n                switch(options.summaryProcess) {\r\n                    case 'start':\r\n                        options.totalValue = [0,0];\r\n                        break;\r\n                    case 'calculate':\r\n                        options.totalValue[0] = options.totalValue[0] + options.value.NewBusinessHours;\r\n                        options.totalValue[1] = options.totalValue[1] + options.value.Capacity;\r\n                        break;\r\n                        case 'finalize':\r\n                        if(Number(options.totalValue[1]) > 0)\r\n                        options.totalValue = (options.totalValue[0] / options.totalValue[    1  ]);\r\n                        else                            options.totalValue = 0;                            break;                }            }\r\n            if (options.name === 'UtilizationPercentage') {\r\n                switch(options.summaryProcess) {\r\n                    case 'start':                        options.totalValue = [0,0];                        break;\r\n                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableHours;\r\n                    options.totalValue[1] = options.totalValue[1] + options.value.Capacity;                        break;\r\n                    case 'finalize':\r\n                    if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);\r\n                    else                            options.totalValue = 0;\r\n                    break;                }            }\r\n            if (options.name === 'ContractedVsCapacitySummary') {                switch(options.summaryProcess) {\r\n                case 'start':                        options.totalValue = [0,0];                        break;\r\n                case 'calculate':\r\n                options.totalValue[0] = options.totalValue[0] + options.value.ContractedTime;\r\n                options.totalValue[1] = options.totalValue[1] + options.value.Capacity;                        break;\r\n                case 'finalize':\r\n                if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);\r\n                else                            options.totalValue = 0;                            break;                }            }\r\n            if (options.name === 'BillableVsForecastVsCapacitySummary') {\r\n                switch(options.summaryProcess) {\r\n                    case 'start':                        options.totalValue = [0,0,0];                        break;\r\n                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableHours;\r\n                    options.totalValue[1] = options.totalValue[1] + options.value.ForecastTime;\r\n                    options.totalValue[2] = options.totalValue[2] + options.value.Capacity;                        break;\r\n                    case 'finalize':\r\n                    if(Number(options.totalValue[2]) > 0)\r\n                    options.totalValue = ((options.totalValue[0] + options.totalValue[1]) / options.totalValue[2]);                        else\r\n                    options.totalValue = 0;                            break;                }            }\r\n                    if (options.name === 'BillableVsForecastVsContractedSummary') {                switch(options.summaryProcess) {\r\n                        case 'start':                        options.totalValue = [0,0,0];                        break;\r\n                        case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableHours;\r\n                        options.totalValue[1] = options.totalValue[1] + options.value.ForecastTime;\r\n                        options.totalValue[2] = options.totalValue[2] + options.value.ContractedTime;                        break;\r\n                        case 'finalize':                        if(Number(options.totalValue[2]) > 0)\r\n                        options.totalValue = ((options.totalValue[0] + options.totalValue[1]) / options.totalValue[2]);                        else\r\n                        options.totalValue = 0;                            break;                }            }        }\",\r\n        \"totalItems\": [\r\n            {\r\n                \"column\": \"Capacity\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Contracted\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Forecast\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Billable + Forecast\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Leaves\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Non-Billable\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Admin\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Billable\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Actual\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"UtilizationNonBillablePercentage\",\r\n                \"showInColumn\": \"Non Billable %\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"UtilizationPercentage\",\r\n                \"showInColumn\": \"Billable %\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"ContractedVsCapacitySummary\",\r\n                \"showInColumn\": \"CapacityContractedTimeVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"BillableVsForecastVsCapacitySummary\",\r\n                \"showInColumn\": \"CapacityBillableAndForecastVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"BillableVsForecastVsContractedSummary\",\r\n                \"showInColumn\": \"ContractedBillableAndForecastVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": {\r\n                    \"type\": \"percent\",\r\n                    \"precision\": 1\r\n                },\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            }\r\n        ]\r\n    },\r\n    \"columnChooser\": {\r\n        \"enabled\": \"true\"\r\n    },\r\n    \"stateStoring\": {\r\n        \"enabled\": false\r\n    }\r\n}","DashboardDefinitionId":"f2b7a599-5b35-4ccd-8119-49811c886b3a"}]}
