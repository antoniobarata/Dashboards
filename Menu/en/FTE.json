{"DashboardDefinitionRoles":[],"Id":"1933f5f5-eaf1-4913-85f8-51b34b266a59","Name":"FTE Dashboard","Active":true,"Location":0,"DocumentId":"00000000-0000-0000-0000-000000000000","DocumentName":"","DocumentsConfiguration":"{\"type\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"remove\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{}},\"customDocument\":{\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemNames\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"dashboard\":false}}","Templates":[],"DashboardDefinitionComponents":[{"Id":"0b4e5938-6f1e-4b6b-8365-1429a238be91","Name":"Typology Groups","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":2,"Parameters":"[{\"WidgetSubTitle\":\"Staff, Proposals & Timesheet\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetHeight\":300,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":true,\"metricName\":\"? Delayed To Do\",\"metricFieldValue\":\"DelayedToDoJobsGrandTotal\"},{\"visible\":true,\"metricName\":\"?  Delayed Work in Progress\",\"metricFieldValue\":\"DelayedWorkInProgressJobsGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select \\n\\t\\tt.TypologyGroup,\\n\\t\\tt.TypologyGroupOid,\\n\\t\\tt.UserCount,\\n\\t\\tt.Capacity,\\n\\t\\tt.Holidays,\\n\\t\\tt.Leaves,\\n\\t\\tt.ContractedTime,\\n\\t\\tt.PlannedTime,\\n\\t\\tt.ForecastTime,\\n\\t\\tt.ActualTime,\\n\\t\\tt.BillableTime,\\n\\t\\tt.NewBusinessTime,\\n\\t\\tt.AdministrativeTime,\\n\\t\\tt.ClientTime,\\n\\t\\tt.ClientBillableTime,\\n\\t\\t(t.BillableTime + t.PlannedTime) as BillableAndPlannedTime,\\n\\t\\t(t.BillableTime + t.ForecastTime) as BillableAndForecastTime,\\n\\t\\tIIF(t.Capacity > 0, (t.ClientTime / t.Capacity), 0) AS CapacityClientTimeVariation,\\n        IIF(t.Capacity > 0, (t.ContractedTime / t.Capacity), 0) AS CapacityContractedTimeVariation,\\n\\t\\tIIF(t.Capacity > 0, ((t.BillableTime + t.PlannedTime) / t.Capacity), 0) CapacityBillableAndPlannedVariation,\\n\\t\\tIIF(t.Capacity > 0, ((t.BillableTime + t.ForecastTime) / t.Capacity), 0) CapacityBillableAndForecastVariation,\\n\\t\\tIIF(t.ContractedTime > 0, ((t.BillableTime + t.PlannedTime) / t.ContractedTime), 0) ContractedBillableAndPlannedVariation\\nfrom(\\nselect \\n\\t\\tv.UserTypologyGroup as TypologyGroup,\\n\\t\\tv.UserTypologyGroupId as TypologyGroupOid,\\n\\t\\tcount(distinct v.UserId) as UserCount,\\n\\t\\tsum(v.Capacity) as Capacity,\\n\\t\\tsum(v.Holidays) as Holidays,\\n\\t\\tsum(v.Leaves) as Leaves,\\n\\t\\tsum(v.ContractedTime) as ContractedTime,\\n\\t\\tsum(v.PlannedTime) as PlannedTime,\\n\\t\\tsum(v.ForecastTime) as ForecastTime,\\n\\t\\tsum(v.ActualTime) as ActualTime,\\n\\t\\tsum(v.BillableTime) as BillableTime,\\n\\t\\tsum(v.NewBusinessTime) as NewBusinessTime,\\n\\t\\tsum(v.AdministrativeTime) as AdministrativeTime,\\n\\t\\tsum(v.BillableTime + v.NewBusinessTime) as ClientTime,\\n\\t\\tsum(v.ClientBillableTime) as ClientBillableTime\\nfrom \\n(\\nselect \\n\\t\\tdu.UserTypologyGroup,\\n\\t\\tdu.UserTypologyGroupId,\\n\\t\\tdu.Oid as UserId,\\n\\t\\tsum(du.Capacity) as Capacity,\\n\\t\\tsum(du.HolidayTime) as Holidays,\\n\\t\\tsum(du.LeaveTime) as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\tsum(du.ActualTime) as ActualTime,\\n\\t\\tsum(du.BillableTime) as BillableTime,\\n\\t\\tsum(du.NewBusinessTime) as NewBusinessTime,\\n\\t\\tsum(du.AdministrativeTime) as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.DatamartUser du\\nwhere \\n\\t\\tdu.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR du.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR du.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR du.DepartmentId = @DepartmentOid)\\ngroup by \\n\\t\\tdu.UserTypologyGroup,\\n\\t\\tdu.UserTypologyGroupId,\\n\\t\\tdu.Oid\\nunion\\nselect \\n\\t\\tde.UserTypologyGroup,\\n\\t\\tde.UserTypologyGroupId,\\n\\t\\tde.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\tsum(de.[Hours]) as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.DatamartEstimate de,\\n\\t\\tEstimateItemDetail edt\\nwhere \\n\\t\\tde.ItemId = edt.Oid and edt.[Type] = 2 and\\n\\t\\tde.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR de.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR de.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR de.DepartmentId = @DepartmentOid)\\ngroup by \\n\\t\\tde.UserTypologyGroup,\\n\\t\\tde.UserTypologyGroupId,\\n\\t\\tde.UserId\\nunion\\nselect \\n\\t\\tpht.UserTypologyGroup,\\n\\t\\tpht.UserTypologyGroupId,\\n\\t\\tpht.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\tsum(pht.[Hours])as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.DatamartPlannedHoursTotal pht,\\n\\t\\tAnalytics.DatamartProject dp\\nwhere \\n\\t\\tpht.ProjectId = dp.Oid and\\n\\t\\tdp.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR pht.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR pht.DivisionId = @DivisionOid)\\ngroup by \\n\\t\\tpht.UserTypologyGroup,\\n\\t\\tpht.UserTypologyGroupId,\\n\\t\\tpht.UserId\\nunion\\nselect \\n\\t\\tph.UserTypologyGroup,\\n\\t\\tph.UserTypologyGroupId,\\n\\t\\tph.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\tsum(ph.[Hours]) as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.DatamartPlannedHours ph,\\n\\t\\tAnalytics.DatamartProject dp\\nwhere \\n\\t\\tph.ProjectId = dp.Oid and\\n\\t\\tdp.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ph.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ph.DivisionId = @DivisionOid)\\ngroup by \\n\\t\\tph.UserTypologyGroup,\\n\\t\\tph.UserTypologyGroupId,\\n\\t\\tph.UserId\\nunion\\nselect \\n\\t\\tdt.UserTypologyGroup,\\n\\t\\tdt.UserTypologyGroupId,\\n\\t\\tdt.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\tsum(dt.ActualTime) as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.DatamartTimesheet dt\\nwhere \\n\\t\\tdt.[Date] between @FromDate AND @ToDate and\\n\\t\\tdt.Client is not null and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR dt.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR dt.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR dt.DepartmentId = @DepartmentOid)\\ngroup by \\n\\t\\tdt.UserTypologyGroup,\\n\\t\\tdt.UserTypologyGroupId,\\n\\t\\tdt.UserId\\n) v\\ngroup by\\n\\t\\tv.UserTypologyGroup,\\n\\t\\tv.UserTypologyGroupId \\n) t\\nwhere t.TypologyGroupOid is not null\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"startDate\",\"endDate\",\"companyOid\",\"divisionOid\",\"departmentOid\"]}}]","DashboardComponentType":{"Id":"3c1da83b-efe9-4b70-87d0-c3813a512774","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/FTE - Typology Groups/execute","Configuration":"{\n  \"headerFilter\": {\n    \"visible\": true\n  },\n  \"stateStoring\": {\n    \"enabled\": false\n  },\n  \"onRowClick\": \"function(e){ if(e.data.TypologyGroupOid != null) { SkillsWorkflow.setDashboardFilter('TypologyGroupOid', e.data.TypologyGroupOid); } }\",\n  \"columnResizingMode\": \"widget\",\n  \"allowColumnResizing\": true,\n  \"allowFiltering\": true,\n  \"columnAutoWidth\": true,\n  \"searchPanel\": {\n    \"visible\": true\n  },\n  \"height\": 370,\n  \"scrolling\": {\n    \"mode\": \"virtual\"\n  },\n  \"columnMinWidth\": 80,\n  \"columns\": [\n    {\n      \"dataField\": \"TypologyGroup\",\n      \"name\": \"Typology Group\",\n      \"caption\": \"Typology\",\n      \"width\": 300\n    },\n    {\n      \"dataField\": \"UserCount\",\n      \"caption\": \"# Heads\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\",\n      \"cssClass\": \"dataCell actualHours\"\n    },\n    {\n      \"dataField\": \"Capacity\",\n      \"caption\": \"Capacity\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\"\n    },\n    {\n      \"dataField\": \"CapacityContractedTimeVariation\",\n      \"caption\": \"Contracted / Capacity\",\n      \"name\": \"VariationCapCon\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\",\n      \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\n    },\n    {\n      \"dataField\": \"ContractedBillableAndPlannedVariation\",\n      \"caption\": \"(Billable + Planned) / Contracted\",\n      \"name\": \"VariationConBilPla\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\",\n      \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\n    },\n    {\n      \"dataField\": \"CapacityBillableAndPlannedVariation\",\n      \"caption\": \"(Billable + Planned) / Capacity\",\n      \"name\": \"VariationCapBilPla\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\",\n      \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\n    },\n    {\n      \"dataField\": \"CapacityBillableAndForecastVariation\",\n      \"caption\": \"(Billable + Forecast) / Capacity\",\n      \"name\": \"VariationCapBilFor\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\",\n      \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\n    },\n    {\n      \"dataField\": \"ContractedTime\",\n      \"caption\": \"Contracted\",\n      \"name\": \"Contracted\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\"\n    },\n    {\n      \"dataField\": \"PlannedTime\",\n      \"caption\": \"Planned\",\n      \"name\": \"Planned\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\"\n    },\n    {\n      \"dataField\": \"ForecastTime\",\n      \"caption\": \"Forecast\",\n      \"name\": \"Forecast\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\"\n    },\n    {\n      \"dataField\": \"BillableAndPlannedTime\",\n      \"caption\": \"Billable + Planned\",\n      \"name\": \"BillableAndPlanned\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\"\n    },\n    {\n      \"dataField\": \"ActualTime\",\n      \"caption\": \"Actual\",\n      \"name\": \"Actual\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\"\n    },\n    {\n      \"dataField\": \"BillableTime\",\n      \"caption\": \"Billable\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\"\n    },\n    {\n      \"dataField\": \"NewBusinessTime\",\n      \"caption\": \"New Business\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\"\n    },\n    {\n      \"dataField\": \"AdministrativeTime\",\n      \"caption\": \"Administrative\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\"\n    },\n    {\n      \"dataField\": \"ClientBillableTime\",\n      \"caption\": \"Billable Client\",\n      \"name\": \"BillableClient\",\n      \"alignment\": \"right\",\n      \"format\": \"#,##0\"\n    }\n  ],\n  \"sortByGroupSummaryInfo\": [\n    {\n      \"summaryItem\": \"count\"\n    }\n  ],\n  \"summary\": {\n    \"calculateCustomSummary\": \"function (options) { \n            if (options.name === 'ContractedVsCapacitySummary') { \n                    if (options.summaryProcess === 'start') { \n                            window.localStorage.setItem('contractedTimeSummary',\n        0);\n                            options.totalValue = 0;\n      } \n                    if (options.summaryProcess === 'calculate') { \n                            options.totalValue = options.totalValue + options.value.Capacity; \n                            var total = window.localStorage.getItem('contractedTimeSummary'); \n                            window.localStorage.setItem('contractedTimeSummary', parseInt(total) + parseInt(options.value.ContractedTime));\n      } \n                    if (options.summaryProcess === 'finalize') { \n                            var op = (parseInt(window.localStorage.getItem('contractedTimeSummary')) / parseInt(options.totalValue)) * 100; \n                            if(!isFinite(op)) {\n                              options.totalValue = 0;\n        } else {\n                               options.totalValue = op;\n        } \n                            window.localStorage.removeItem('contractedTimeSummary');\n      }\n    } \n            if (options.name === 'BillableVsPlannedVsContractedSummary') { \n                    if (options.summaryProcess === 'start') { \n                            window.localStorage.setItem('contractedTimeSummary2',\n        0);\n                            options.totalValue = 0;\n      } \n                    if (options.summaryProcess === 'calculate') { \n                            options.totalValue = options.totalValue + options.value.BillableAndPlannedTime;\n                            var total = window.localStorage.getItem('contractedTimeSummary2');  \n                            window.localStorage.setItem('contractedTimeSummary2', parseInt(total) + parseInt(options.value.ContractedTime));\n      } \n                    if (options.summaryProcess === 'finalize') { \n                            window.localStorage.getItem('contractedTimeSummary2'); \n                            var op = (parseInt(options.totalValue) / parseInt(window.localStorage.getItem('contractedTimeSummary2'))) * 100;\n                            if(!isFinite(op)) {\n                              options.totalValue = 0;\n        } else {\n                               options.totalValue = op;\n        }\n                            window.localStorage.removeItem('contractedTimeSummary2');\n      }\n    }\n            if (options.name === 'BillableVsPlannedVsCapacitySummary') { \n                    if (options.summaryProcess === 'start') { \n                            window.localStorage.setItem('capacitySummary',\n        0); \n                            options.totalValue = 0;\n      } \n                    if (options.summaryProcess === 'calculate') { \n                            options.totalValue = options.totalValue + options.value.BillableAndPlannedTime;\n\n                            var total = window.localStorage.getItem('capacitySummary');  \n                            window.localStorage.setItem('capacitySummary', parseInt(total) + parseInt(options.value.Capacity));\n      } \n                    if (options.summaryProcess === 'finalize') { \n                            var op = (parseInt(options.totalValue) / parseInt(window.localStorage.getItem('capacitySummary'))) * 100; \n                            if(!isFinite(op)) {\n                              options.totalValue = 0;\n        } else {\n                               options.totalValue = op;\n        }\n                            window.localStorage.removeItem('capacitySummary');\n      }\n    }\n  }\",\n    \"totalItems\": [\n    {\n      \"column\": \"Typology Group\",\n      \"summaryType\": \"count\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"Total: {0}\",\n      \"alignment\": \"left\"\n    },\n    {\n      \"column\": \"Capacity\",\n      \"name\": \"Capacity\",\n      \"summaryType\": \"sum\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"{0}\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"column\": \"# Heads\",\n      \"summaryType\": \"sum\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"{0}\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"column\": \"Contracted\",\n      \"name\": \"Contracted\",\n      \"summaryType\": \"sum\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"{0}\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"column\": \"Planned\",\n      \"summaryType\": \"sum\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"{0}\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"column\": \"Billable + Planned\",\n      \"summaryType\": \"sum\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"{0}\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"column\": \"Actual\",\n      \"summaryType\": \"sum\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"{0}\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"column\": \"Billable\",\n      \"summaryType\": \"sum\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"{0}\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"column\": \"New Business\",\n      \"summaryType\": \"sum\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"{0}\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"column\": \"Administrative\",\n      \"summaryType\": \"sum\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"{0}\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"column\": \"Billable Client\",\n      \"summaryType\": \"sum\",\n      \"valueFormat\": \"#,##0\",\n      \"displayFormat\": \"{0}\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"name\": \"ContractedVsCapacitySummary\",\n      \"showInColumn\": \"CapacityContractedTimeVariation\",\n      \"displayFormat\": \"{0}\",\n      \"valueFormat\": \"#,##0\",\n      \"summaryType\": \"custom\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"name\": \"BillableVsPlannedVsContractedSummary\",\n      \"showInColumn\": \"ContractedBillableAndPlannedVariation\",\n      \"displayFormat\": \"{0}\",\n      \"valueFormat\": \"#,##0\",\n      \"summaryType\": \"custom\",\n      \"alignment\": \"right\"\n    },\n    {\n      \"name\": \"BillableVsPlannedVsCapacitySummary\",\n      \"showInColumn\": \"CapacityBillableAndPlannedVariation\",\n      \"displayFormat\": \"{0}\",\n      \"valueFormat\": \"#,##0\",\n      \"summaryType\": \"custom\",\n      \"alignment\": \"right\"\n    }\n  ]\n}\n}","DashboardDefinitionId":"1933f5f5-eaf1-4913-85f8-51b34b266a59"},{"Id":"614e3986-d51e-4e75-a6cf-57a8e47a6a83","Name":"Utilization per User","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":5,"Parameters":"[{\"WidgetSubTitle\":\"Billable and Non-Billable Actual Hours in % of User Capacity\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetHeight\":100,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":false,\"metricName\":\"# Forecast\",\"metricFieldValue\":\"TimeGrandTotal\"},{\"visible\":false,\"metricName\":\"# Actual\",\"metricFieldValue\":\"UtilizationPercentGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"SELECT\\n\\t\\tv.Department,\\n\\t\\tv.UserTypologyGroup,\\n\\t\\tv.[User],\\n\\t\\tv.UserId,\\n\\t\\tCAST(v.HasImage as BIT) as HasImage,\\n\\t\\tv.[Hours],\\n\\t\\tv.AdministrativeHours,\\n\\t\\tv.InternalWorkHours,\\n\\t\\tv.NewBusinessHours,\\n\\t\\tv.BillableHours,\\n\\t\\tv.ClientHours,\\n\\t\\tv.NonWorkedHours,\\n\\t\\tv.Capacity,\\n\\t\\tv.Leaves,\\n\\t\\tIIF(v.Capacity > 0, ISNULL(v.BillableHours, 0.0) / v.Capacity, 1.0) as UtilizationPercentage,\\n\\t\\tIIF(v.Capacity > 0, ISNULL(v.NewBusinessHours, 0.0) / v.Capacity, 1.0) as UtilizationNonBillablePercentage\\nfrom \\n(\\nselect \\n\\t\\tv.Department,\\n\\t\\tv.UserTypologyGroup,\\n\\t\\tv.[User],\\n\\t\\tv.UserId,\\n\\t\\tsum(v.HasImage) as HasImage,\\n\\t\\tsum(v.[Hours]) as [Hours],\\n\\t\\tsum(v.AdministrativeTime) as AdministrativeHours,\\n\\t\\tsum(v.InternalWorkHours) as InternalWorkHours,\\n\\t\\tsum(v.NewBusinessHours) as NewBusinessHours,\\n\\t\\tsum(v.BillableHours) as BillableHours,\\n\\t\\tsum(v.ClientHours) as ClientHours,\\n\\t\\tsum(v.NonWorkedHours) as NonWorkedHours,\\n\\t\\tsum(v.Capacity) as Capacity,\\n\\t\\tsum(v.LeaveTime) as Leaves\\nfrom (\\nselect \\n\\t\\tdu.Department, \\n\\t\\tdu.UserTypologyGroup, \\n\\t\\tdu.FullName as [User],\\n\\t\\tdu.Oid as UserId,\\n\\t\\tCAST(du.HasImage as int) as HasImage,\\n\\t\\tsum(du.ActualTime) as [Hours],\\n\\t\\tsum(du.AdministrativeTime) as AdministrativeTime,\\n\\t\\t0 as InternalWorkHours,\\n\\t\\tsum(du.NewBusinessTime) as NewBusinessHours,\\n\\t\\tsum(du.BillableTime) as BillableHours,\\n\\t\\t0 as ClientHours,\\n\\t\\tSUM(ISNULL(du.ActualTime - (du.AdministrativeTime + du.NewBusinessTime + du.BillableTime), 0.0)) as NonWorkedHours,\\n\\t\\tsum(du.Capacity) as Capacity,\\n\\t\\tsum(du.LeaveTime) as LeaveTime\\nfrom Analytics.DatamartUser du\\nwhere \\n\\t\\tdu.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR du.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR du.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR du.DepartmentId = @DepartmentOid) AND\\n\\t\\t(du.UserTypologyGroupId = @TypologyGroupOid)\\ngroup by \\n\\t\\t\\tdu.Department, \\n\\t\\t\\tdu.UserTypologyGroup, \\n\\t\\t\\tdu.FullName,\\n\\t\\t\\tdu.HasImage,\\n\\t\\t\\tdu.Oid\\nunion\\nselect \\n\\t\\tdt.Department, \\n\\t\\tdt.UserTypologyGroup, \\n\\t\\tdt.[User] as [User],\\n\\t\\tdt.UserId,\\n\\t\\tCAST(0 as int) as HasImage,\\n\\t\\t0 as [Hours],\\n\\t\\t0 as AdministrativeTime,\\n\\t\\tSUM(ISNULL(dt.InternalWorkTime, 0.0)) AS [InternalWorkHours],\\n\\t\\t0 as NewBusinessHours,\\n\\t\\t0 as BillableHours,\\n\\t\\tSUM(ISNULL(dt.BillableTime, 0.0) - ISNULL(dt.[InternalWorkTime], 0.0)) as [ClientHours],\\n\\t\\t0 as NonWorkedHours,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as LeaveTime\\nfrom Analytics.DatamartTimesheet dt\\nwhere \\n\\t\\tdt.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR dt.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR dt.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR dt.DepartmentId = @DepartmentOid) AND\\n\\t\\t(dt.UserTypologyGroupId = @TypologyGroupOid)\\ngroup by \\n\\t\\tdt.Department, \\n\\t\\tdt.UserTypologyGroup, \\n\\t\\tdt.[User],\\n\\t\\tdt.UserId\\n) v\\ngroup by \\n\\t\\tv.Department,\\n\\t\\tv.UserTypologyGroup,\\n\\t\\tv.[User],\\n\\t\\tv.UserId\\n) v\\n\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"startDate\",\"endDate\",\"companyOid\",\"divisionOid\",\"departmentOid\",\"TypologyGroupOid\"]}}]","DashboardComponentType":{"Id":"3c1da83b-efe9-4b70-87d0-c3813a512774","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Utilization_Per_Company_Department_User/execute","Configuration":"{\n  \"headerFilter\": {\n    \"visible\": true\n  },\n  \"grouping\": {\n    \"autoExpandAll\": true\n  },\n  \"columnResizingMode\": \"widget\",\n  \"allowColumnResizing\": true,\n  \"allowFiltering\": true,\n  \"columnAutoWidth\": true,\n  \"searchPanel\": {\n    \"visible\": true\n  },\n  \"selection\": {\n    \"mode\": \"single\"\n  },\n  \"height\": \"100%\",\n  \"scrolling\": {\n    \"mode\": \"virtual\"\n  },\n  \"columnMinWidth\": 80,\n  \"columns\": [\n    {\n      \"dataField\": \"UserId\",\n      \"name\": \"Picture\",\n      \"caption\": \"\",\n      \"width\": 30,\n      \"alignment\": \"left\",\n      \"cellTemplate\": \"function(e, i) { debugger;\n        SK.showImage(e, 'user', 'small', i.data.HasImage, i.data.User, i.text);\n    }\"\n  },\n  {\n    \"dataField\": \"User\",\n    \"name\": \"User\",\n    \"caption\": \"User\",\n    \"width\": 120\n  },\n  {\n    \"dataField\": \"Capacity\",\n    \"caption\": \"Capacity\",\n    \"alignment\": \"right\",\n    \"format\": \"#,##0\"\n  },\n  {\n    \"dataField\": \"Leaves\",\n    \"caption\": \"Leaves\",\n    \"alignment\": \"right\",\n    \"format\": \"#,##0\"\n  },\n  {\n    \"dataField\": \"NewBusinessHours\",\n    \"caption\": \"Non-Billable\",\n    \"name\": \"NonBillable\",\n    \"alignment\": \"right\",\n    \"format\": \"#,##0\"\n  },\n  {\n    \"dataField\": \"AdministrativeHours\",\n    \"caption\": \"Admin\",\n    \"name\": \"Admin\",\n    \"alignment\": \"right\",\n    \"format\": \"#,##0\"\n  },\n  {\n    \"dataField\": \"BillableHours\",\n    \"caption\": \"Billable\",\n    \"alignment\": \"right\",\n    \"format\": \"#,##0\"\n  },\n  {\n    \"dataField\": \"UtilizationNonBillablePercentage\",\n    \"caption\": \"Non Billable %\",\n    \"name\": \"UtilizationNonBillable\",\n    \"alignment\": \"right\",\n    \"format\": \"#,##0\",\n    \"cellTemplate\": \"function(e, i) {\n          SkillsWorkflow.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true);\n  }\"\n},\n{\n  \"dataField\": \"UtilizationPercentage\",\n  \"caption\": \"Billable %\",\n  \"name\": \"Utilization\",\n  \"alignment\": \"right\",\n  \"format\": \"#,##0\",\n  \"cellTemplate\": \"function(e, i) {\n          SkillsWorkflow.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true);\n}\"\n}\n],\n\"sortByGroupSummaryInfo\": [\n{\n\"summaryItem\": \"count\"\n}\n],\n\"summary\": {\n\"totalItems\": [\n{\n  \"column\": \"Capacity\",\n  \"summaryType\": \"sum\",\n  \"valueFormat\": \"#,##0\",\n  \"displayFormat\": \"{0}\",\n  \"alignment\": \"right\"\n},\n{\n  \"column\": \"Leaves\",\n  \"summaryType\": \"sum\",\n  \"valueFormat\": \"#,##0\",\n  \"displayFormat\": \"{0}\",\n  \"alignment\": \"right\"\n}\n]\n}\n}","DashboardDefinitionId":"1933f5f5-eaf1-4913-85f8-51b34b266a59"},{"Id":"272c3ec6-b18a-4fd8-8d99-a57c9469e065","Name":"Overtime View","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":1,"Parameters":"[{\"WidgetSubTitle\":\"Capacity, Contracted Time & Weeks with not Enough Capacity\",\"WidgetType\":\"rangeselector\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#e0e0e0\",\"WidgetHeight\":100,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"startDate\":\"2018/06/1\",\"endDate\":\"2019/06/30\",\"type\":\"year\",\"visible\":false},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select  [Date] - datepart(dw, [Date]) + 1 as Week,\\n        sum(WorkingTime - Holidays - Leaves) as Capacity,\\n        sum(ContractedTime) as ContractedTime,\\n        iif(sum(WorkingTime - Holidays - Leaves - ContractedTime) < 0, sum(WorkingTime - Holidays - Leaves), null) as NotEnoughCapacity\\nfrom    (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        yrd.Day as [Date],\\n                        sum(RequiredHours) as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, Yearday yrd, UserTypology typ\\n                where   datepart(dw, yrd.day) not in (1, 7) and\\n                        typ.oid = ssu.Typology\\n                        and Year(yrd.day) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        hld.Date as [Date],\\n                        0 as WorkingTime,\\n                        sum(RequiredHours) as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserTypology typ, Holiday hld\\n                where   datepart(dw, hld.Date) not in (1, 7) and\\n                        typ.oid = ssu.Typology and\\n                        ssu.Company = hld.Company \\n                        and Year(hld.Date) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, hld.Date\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        uv.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        sum(RequiredHours) as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserVacation uv, UserTypology typ\\n                where   datepart(dw, uv.Day) not in (1, 7) and\\n                        uv.[User] = ssu.Oid and\\n                        typ.oid = ssu.Typology\\n                        and Year(uv.Day) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, uv.Day\\n                union all\\n                select  TypologyGroupOid,\\n                        UserOid,\\n                        [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        sum(ContractedTime) as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    (\\n                            select  edt.UserTypologyGroup as TypologyGroupOid,\\n                                    edt.[User] as UserOid,\\n                                    yrd.Day as [Date],\\n                                    sum(edt.Hours / (datediff(dd, est.[Date], est.Expiration) + 1)) as ContractedTime\\n                            from    Estimate est, EstimateItem eit, EstimateItemDetail edt, YearDay yrd\\n                            where   eit.Estimate = est.Oid and\\n                                    edt.EstimateItem = eit.Oid and\\n                                    yrd.Day between cast(est.[Date] as date) and cast(est.Expiration as date) and\\n                                    edt.Type = 2\\n                                    and Year([Date]) = @year\\n                            group by  est.Oid, edt.UserTypologyGroup, edt.[User], yrd.Day\\n                        ) t\\n                group by TypologyGroupOid, UserOid, [Date]\\n        ) t\\nwhere   Year([Date]) = @year\\ngroup by [Date] - datepart(dw, [Date]) + 1\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"year\"]}}]","DashboardComponentType":{"Id":"3c1da83b-efe9-4b70-87d0-c3813a512774","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/FTE - Overtime View/execute","Configuration":"{\n  \"height\": 200,\n  \"size\": {\n    \"height\": 200\n  },\n  \"containerBackgroundColor\": \"#e0e0e0\",\n  \"selectedRangeColor\": \"#f5564a\",\n  \"chart\": {\n    \"commonSeriesSettings\": {\n      \"type\": \"steparea\",\n      \"argumentField\": \"Week\"\n    },\n    \"series\": [\n      {\n        \"valueField\": \"Capacity\"\n      },\n      {\n        \"valueField\": \"ContractedTime\"\n      },\n      {\n        \"valueField\": \"NotEnoughCapacity\",\n        \"type\": \"scatter\",\n        \"ignoreEmptyPoints\": true,\n        \"color\": \"#da5859\"\n      }\n    ]\n  },\n  \"scale\": {\n    \"minorTickInterval\": \"week\",\n    \"tickInterval\": \"month\",\n    \"valueType\": \"datetime\"\n  },\n  \"sliderMarker\": {\n    \"format\": \"monthAndDay\",\n    \"color\": \"#da5859\"\n  },\n  \"value\": {\n    \"length\": {\n      \"years\": 1\n    }\n  }\n}","DashboardDefinitionId":"1933f5f5-eaf1-4913-85f8-51b34b266a59"},{"Id":"4e0d8697-a880-407b-9efa-b6cbc63726c2","Name":"Filters","Active":true,"UseQuery":false,"Query":"","Size":12,"Order":0,"Parameters":"[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"form\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#f0f0f0\",\"WidgetHeight\":30,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]","DashboardComponentType":{"Id":"3c1da83b-efe9-4b70-87d0-c3813a512774","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"","Configuration":"{\r\n    \"colCount\": 4,\r\n    \"items\": [\r\n        {\r\n            \"name\": \"Year\",\r\n            \"dataField\": \"Year\",\r\n            \"editorType\": \"dxNumberBox\",\r\n            \"editorOptions\": {\r\n                \"showSpinButtons\": true,\r\n                \"value\": 2019,\r\n                \"width\": 65,\r\n                \"placeholder\": \"year\",\r\n                \"onContentReady\": \"function(e){ setTimeout(function() { SkillsWorkflow.setDashboardFilter('year', 2019); SkillsWorkflow.setDashboardFilter('companyOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('divisionOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('departmentOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('TypologyGroupOid', '00000000-0000-0000-0000-000000000000');}, 500) }\",\r\n                \"onValueChanged\": \"function(e){ if(e.value != null) { SkillsWorkflow.setDashboardFilter('year', e.value); } }\"\r\n            },\r\n            \"noDataText\": \"Please wait...\"\r\n        },\r\n        {\r\n            \"dataField\": \"CompanyId\",\r\n            \"label\": {\r\n                \"text\": \"Company\"\r\n            },\r\n            \"editorType\": \"dxSelectBox\",\r\n            \"editorOptions\": {\r\n                \"width\": 250,\r\n                \"searchEnabled\": true,\r\n                \"dataSource\": {\r\n                    \"load\": \"function(loadOptions){ \r\n                            var searchValue = (\r\n                            loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                            var searchTake = (loadOptions.searchValue != null && loadOptions.searchValue != '' ? 10 : 100); \r\n                            return SkillsWorkflow.executeAPI('GET', 'companies/lookup',\r\n                    null,\r\n                    {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All companies'\r\n                        });return res;\r\n                    })\r\n                }\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET','companies/'+key+'/lookup',null,{}).then( result =>  { return Promise.resolve(result);}) }\"\r\n            },\r\n            \"placeholder\": \"All companies\",\r\n            \"displayExpr\": \"Name\",\r\n            \"valueExpr\": \"Id\",\r\n            \"onValueChanged\": \"function(e){ \r\n                if( e.value != null && e.value != '') {\r\n                    SkillsWorkflow.setDashboardFilter('companyOid', e.value);\r\n            } else {\r\n                    SkillsWorkflow.setDashboardFilter('companyOid', '00000000-0000-0000-0000-000000000000');\r\n            }\r\n                SW.setComponentByValue(e.previousValue, e.value, 'DivisionId');\r\n        }\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component,'CompanyId');}\"\r\n    }\r\n},\r\n{\r\n    \"dataField\": \"DivisionId\",\r\n    \"label\": {\r\n        \"text\": \"Division\"\r\n    },\r\n    \"editorType\": \"dxSelectBox\",\r\n    \"editorOptions\": {\r\n        \"width\": 250,\r\n        \"searchEnabled\": true,\r\n        \"dataSource\": {\r\n            \"load\": \"function(loadOptions){ \r\n                            let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                            let skip = loadOptions.skip || 0; \r\n                            let take = loadOptions.take || 20; \r\n                            var param = { name:searchValue, skip: skip, take: take\r\n            }; \r\n                            var companyId = SW.getValueFromComponent('CompanyId'); \r\n                            if (companyId == '00000000-0000-0000-0000-000000000000') {\r\n                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',\r\n                null,\r\n                {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All divisions'\r\n                    });return res;\r\n                })\r\n            } else if (companyId != null) { \r\n                                param['companyId'\r\n                ] = companyId;\r\n                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',param,\r\n                {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All divisions'\r\n                    });return res;\r\n                })\r\n            }\r\n        }\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET','divisions/'+key+'/lookup',null,{}).then( result =>  { return Promise.resolve(result);})}\"\r\n    },\r\n    \"placeholder\": \"All divisions\",\r\n    \"onValueChanged\": \"function(e){ \r\n                if (e.value != null && e.value != '') {\r\n                    SkillsWorkflow.setDashboardFilter('divisionOid', e.value);\r\n    } else {\r\n                    SkillsWorkflow.setDashboardFilter('divisionOid', '00000000-0000-0000-0000-000000000000');\r\n    }\r\n                SW.setComponentByValue(e.previousValue, e.value, 'DepartmentId');\r\n}\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'DivisionId'); }\",\r\n\"displayExpr\": \"Name\",\r\n\"valueExpr\": \"Id\",\r\n\"disabled\": true\r\n}\r\n},\r\n{\r\n\"dataField\": \"DepartmentId\",\r\n\"label\": {\r\n\"text\": \"Department\"\r\n},\r\n\"editorType\": \"dxSelectBox\",\r\n\"editorOptions\": {\r\n\"width\": 250,\r\n\"searchEnabled\": true,\r\n\"dataSource\": {\r\n    \"load\": \"function(loadOptions){ \r\n                    let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                    let skip = loadOptions.skip || 0; \r\n                    let take = loadOptions.take || 20;\r\n                    var param = { name: searchValue, skip: skip, take: take\r\n    }; \r\n                    var divisionId = SW.getValueFromComponent('DivisionId'); \r\n                    var companyId = SW.getValueFromComponent('CompanyId'); \r\n                    if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && companyId != null && companyId != '00000000-0000-0000-0000-000000000000') { \r\n                        param['divisionId'] = divisionId;\r\n                        param['companyId'] = companyId;\r\n                    } else if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && (companyId == null || companyId == '00000000-0000-0000-0000-000000000000')) {\r\n                        param['divisionId'] = divisionId;\r\n                    } \r\n                    return SkillsWorkflow.executeAPI('GET', 'departments',param,\r\n    {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All departments'\r\n        });return res;\r\n    })\r\n}\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET', 'departments/' + key, null, {}).then( result =>  { return Promise.resolve(result); } ) }\"\r\n},\r\n\"placeholder\": \"All departments\",\r\n\"onValueChanged\": \"function(e){ \r\n                    if(e.value != null && e.value != '') {\r\n                        SkillsWorkflow.setDashboardFilter('departmentOid', e.value);\r\n} else {\r\n                        SkillsWorkflow.setDashboardFilter('departmentOid', '00000000-0000-0000-0000-000000000000');\r\n}\r\n}\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'DepartmentId'); }\",\r\n\"displayExpr\": \"Name\",\r\n\"valueExpr\": \"Id\",\r\n\"disabled\": true\r\n}\r\n}\r\n]\r\n}","DashboardDefinitionId":"1933f5f5-eaf1-4913-85f8-51b34b266a59"}]}
