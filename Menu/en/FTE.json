{"DashboardDefinitionRoles":[],"Id":"5e87f605-0012-4800-b8e5-94d19fbe76c4","Name":"FTE","Active":true,"Location":0,"DocumentId":"00000000-0000-0000-0000-000000000000","DocumentName":"","DocumentTypeName":null,"DocumentsConfiguration":"{\"type\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"remove\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{}},\"customDocument\":{\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemNames\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"dashboard\":false}}","Templates":[],"DashboardDefinitionComponents":[{"Id":"25cb3c73-e023-4ac5-8cfd-00afd09bab74","Name":"Typology Groups","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":2,"Parameters":"[{\"WidgetSubTitle\":\"Staff, Proposals & Timesheet\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetXPosition\":0,\"WidgetYPosition\":14,\"WidgetRows\":18,\"WidgetColumns\":48,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":true,\"metricName\":\"? Delayed To Do\",\"metricFieldValue\":\"DelayedToDoJobsGrandTotal\"},{\"visible\":true,\"metricName\":\"?  Delayed Work in Progress\",\"metricFieldValue\":\"DelayedWorkInProgressJobsGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select \\n\\t\\tt.TypologyGroup,\\n\\t\\tt.TypologyGroupOid,\\n\\t\\tt.UserCount,\\n\\t\\tt.Capacity,\\n\\t\\tt.Holidays,\\n\\t\\tt.Leaves,\\n\\t\\tt.ContractedTime,\\n\\t\\tt.PlannedTime,\\n\\t\\tt.ForecastTime,\\n\\t\\tt.ActualTime,\\n\\t\\tt.BillableTime,\\n\\t\\tt.NewBusinessTime,\\n\\t\\tt.AdministrativeTime,\\n\\t\\tt.ClientTime,\\n\\t\\tt.ClientBillableTime,\\n\\t\\t(t.BillableTime + t.PlannedTime) as BillableAndPlannedTime,\\n\\t\\t(t.BillableTime + t.ForecastTime) as BillableAndForecastTime,\\n\\t\\tIIF(t.Capacity > 0, (t.ClientTime / t.Capacity), 0) AS CapacityClientTimeVariation,\\n        IIF(t.Capacity > 0, (t.ContractedTime / t.Capacity), 0) AS CapacityContractedTimeVariation,\\n\\t\\tIIF(t.Capacity > 0, ((t.BillableTime + t.PlannedTime) / t.Capacity), 0) CapacityBillableAndPlannedVariation,\\n\\t\\tIIF(t.Capacity > 0, ((t.BillableTime + t.ForecastTime) / t.Capacity), 0) CapacityBillableAndForecastVariation,\\n\\t\\tIIF(t.ContractedTime > 0, ((t.BillableTime + t.PlannedTime) / t.ContractedTime), 0) ContractedBillableAndPlannedVariation\\nfrom(\\nselect \\n\\t\\tv.UserTypologyGroup as TypologyGroup,\\n\\t\\tv.UserTypologyGroupId as TypologyGroupOid,\\n\\t\\tcount(distinct v.UserId) as UserCount,\\n\\t\\tsum(v.Capacity) as Capacity,\\n\\t\\tsum(v.Holidays) as Holidays,\\n\\t\\tsum(v.Leaves) as Leaves,\\n\\t\\tsum(v.ContractedTime) as ContractedTime,\\n\\t\\tsum(v.PlannedTime) as PlannedTime,\\n\\t\\tsum(v.ForecastTime) as ForecastTime,\\n\\t\\tsum(v.ActualTime) as ActualTime,\\n\\t\\tsum(v.BillableTime) as BillableTime,\\n\\t\\tsum(v.NewBusinessTime) as NewBusinessTime,\\n\\t\\tsum(v.AdministrativeTime) as AdministrativeTime,\\n\\t\\tsum(v.BillableTime + v.NewBusinessTime) as ClientTime,\\n\\t\\tsum(v.ClientBillableTime) as ClientBillableTime\\nfrom \\n(\\nselect \\n\\t\\tdu.UserTypologyGroup,\\n\\t\\tdu.UserTypologyGroupId,\\n\\t\\tdu.Oid as UserId,\\n\\t\\tsum(du.Capacity) as Capacity,\\n\\t\\tsum(du.HolidayTime) as Holidays,\\n\\t\\tsum(du.LeaveTime) as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\tsum(du.ActualTime) as ActualTime,\\n\\t\\tsum(du.BillableTime) as BillableTime,\\n\\t\\tsum(du.NewBusinessTime) as NewBusinessTime,\\n\\t\\tsum(du.AdministrativeTime) as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.DatamartUser du\\nwhere \\n\\t\\t(du.EndDate is null or du.EndDate > @ToDate) AND\\n\\t\\tdu.[Date] between @FromDate AND @ToDate AND\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR du.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR du.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR du.DepartmentId = @DepartmentOid)\\ngroup by \\n\\t\\tdu.UserTypologyGroup,\\n\\t\\tdu.UserTypologyGroupId,\\n\\t\\tdu.Oid,\\n\\t\\tdu.HireDate\\nunion\\nselect \\n\\t\\tde.UserTypologyGroup,\\n\\t\\tde.UserTypologyGroupId,\\n\\t\\tde.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\tsum(de.[Hours]) as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.DatamartEstimate de,\\n\\t\\tEstimateItemDetail edt\\nwhere \\n\\t\\tde.ItemId = edt.Oid and edt.[Type] = 2 and\\n\\t\\tde.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR de.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR de.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR de.DepartmentId = @DepartmentOid)\\ngroup by \\n\\t\\tde.UserTypologyGroup,\\n\\t\\tde.UserTypologyGroupId,\\n\\t\\tde.UserId\\nunion\\nselect \\n\\t\\tpht.UserTypologyGroup,\\n\\t\\tpht.UserTypologyGroupId,\\n\\t\\tpht.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\tsum(pht.[Hours])as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.DatamartPlannedHoursTotal pht,\\n\\t\\tAnalytics.DatamartProject dp\\nwhere \\n\\t\\tpht.ProjectId = dp.Oid and\\n\\t\\tdp.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR pht.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR pht.DivisionId = @DivisionOid)\\ngroup by \\n\\t\\tpht.UserTypologyGroup,\\n\\t\\tpht.UserTypologyGroupId,\\n\\t\\tpht.UserId\\nunion\\nselect \\n\\t\\tph.UserTypologyGroup,\\n\\t\\tph.UserTypologyGroupId,\\n\\t\\tph.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\tsum(ph.[Hours]) as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\t0 as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.DatamartPlannedHours ph,\\n\\t\\tAnalytics.DatamartProject dp\\nwhere \\n\\t\\tph.ProjectId = dp.Oid and\\n\\t\\tdp.[Date] between @FromDate AND @ToDate and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ph.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ph.DivisionId = @DivisionOid)\\ngroup by \\n\\t\\tph.UserTypologyGroup,\\n\\t\\tph.UserTypologyGroupId,\\n\\t\\tph.UserId\\nunion\\nselect \\n\\t\\tdt.UserTypologyGroup,\\n\\t\\tdt.UserTypologyGroupId,\\n\\t\\tdt.UserId as UserId,\\n\\t\\t0 as Capacity,\\n\\t\\t0 as Holidays,\\n\\t\\t0 as Leaves,\\n\\t\\t0 as ContractedTime,\\n\\t\\t0 as PlannedTime,\\n\\t\\t0 as ForecastTime,\\n\\t\\t0 as ActualTime,\\n\\t\\t0 as BillableTime,\\n\\t\\t0 as NewBusinessTime,\\n\\t\\t0 as AdministrativeTime,\\n\\t\\t0 as ClientTime,\\n\\t\\tsum(dt.ActualTime) as ClientBillableTime\\nfrom \\n\\t\\tAnalytics.DatamartTimesheet dt\\nwhere \\n\\t\\tdt.[Date] between @FromDate AND @ToDate and\\n\\t\\tdt.Client is not null and\\n\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR dt.CompanyId = @CompanyOid) AND \\n\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR dt.DivisionId = @DivisionOid) AND \\n\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR dt.DepartmentId = @DepartmentOid)\\ngroup by \\n\\t\\tdt.UserTypologyGroup,\\n\\t\\tdt.UserTypologyGroupId,\\n\\t\\tdt.UserId\\n) v\\ngroup by\\n\\t\\tv.UserTypologyGroup,\\n\\t\\tv.UserTypologyGroupId\\n) t\\nwhere t.TypologyGroupOid is not null\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"startDate\",\"endDate\",\"companyOid\",\"divisionOid\",\"departmentOid\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/FTE - Typology Groups/execute","Configuration":"{\r\n    \"headerFilter\": {\r\n        \"visible\": true\r\n    },\r\n    \"stateStoring\": {\r\n        \"enabled\": false\r\n    },\r\n    \"onRowClick\": \"function(e){ if(e.data.TypologyGroupOid != null) { SkillsWorkflow.setDashboardFilter('TypologyGroupOid', e.data.TypologyGroupOid); } }\",\r\n    \"columnResizingMode\": \"widget\",\r\n    \"allowColumnResizing\": \"true\",\r\n    \"allowFiltering\": true,\r\n    \"columnAutoWidth\": \"true\",\r\n    \"searchPanel\": {\r\n        \"visible\": true\r\n    },\r\n    \"height\": \"370\",\r\n    \"scrolling\": {\r\n        \"mode\": \"virtual\"\r\n    },\r\n    \"columnMinWidth\": \"80\",\r\n    \"columns\": [\r\n        {\r\n            \"dataField\": \"TypologyGroup\",\r\n            \"name\": \"Typology Group\",\r\n            \"caption\": \"Typology\",\r\n            \"width\": 300\r\n        },\r\n        {\r\n            \"dataField\": \"UserCount\",\r\n            \"caption\": \"# Heads\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cssClass\": \"dataCell actualHours\"\r\n        },\r\n        {\r\n            \"dataField\": \"Capacity\",\r\n            \"caption\": \"Capacity\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"CapacityContractedTimeVariation\",\r\n            \"caption\": \"Contracted / Capacity\",\r\n            \"name\": \"VariationCapCon\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedBillableAndPlannedVariation\",\r\n            \"caption\": \"(Billable + Planned) / Contracted\",\r\n            \"name\": \"VariationConBilPla\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"CapacityBillableAndPlannedVariation\",\r\n            \"caption\": \"(Billable + Planned) / Capacity\",\r\n            \"name\": \"VariationCapBilPla\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"CapacityBillableAndForecastVariation\",\r\n            \"caption\": \"(Billable + Forecast) / Capacity\",\r\n            \"name\": \"VariationCapBilFor\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\",\r\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\r\n        },\r\n        {\r\n            \"dataField\": \"ContractedTime\",\r\n            \"caption\": \"Contracted\",\r\n            \"name\": \"Contracted\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"PlannedTime\",\r\n            \"caption\": \"Planned\",\r\n            \"name\": \"Planned\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"ForecastTime\",\r\n            \"caption\": \"Forecast\",\r\n            \"name\": \"Forecast\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"BillableAndPlannedTime\",\r\n            \"caption\": \"Billable + Planned\",\r\n            \"name\": \"BillableAndPlanned\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"ActualTime\",\r\n            \"caption\": \"Actual\",\r\n            \"name\": \"Actual\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"BillableTime\",\r\n            \"caption\": \"Billable\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"NewBusinessTime\",\r\n            \"caption\": \"New Business\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"AdministrativeTime\",\r\n            \"caption\": \"Administrative\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        },\r\n        {\r\n            \"dataField\": \"ClientBillableTime\",\r\n            \"caption\": \"Billable Client\",\r\n            \"name\": \"BillableClient\",\r\n            \"alignment\": \"right\",\r\n            \"format\": \"#,##0\"\r\n        }\r\n    ],\r\n    \"sortByGroupSummaryInfo\": [\r\n        {\r\n            \"summaryItem\": \"count\"\r\n        }\r\n    ],\r\n    \"summary\": {\r\n        \"calculateCustomSummary\": \"function (options) {             if (options.name === 'ContractedVsCapacitySummary') {                     switch(options.summaryProcess) {                      case 'start':                            options.totalValue = [0,0];                            break;                      case 'calculate':                            options.totalValue[0] = options.totalValue[0] + options.value.ContractedTime;                       options.totalValue[1] = options.totalValue[1] + options.value.Capacity;                            break;                      case 'finalize':                            if(Number(options.totalValue[1]) > 0)                        options.totalValue = (options.totalValue[0] / options.totalValue[1]) * 100;                            else                        options.totalValue = 0;                              break;                    }            }             if (options.name === 'BillableVsPlannedVsContractedSummary') {                     switch(options.summaryProcess) {                   case 'start':                            options.totalValue = [          0,          0        ];                            break;                      case 'calculate':                            options.totalValue[          0        ] = options.totalValue[          0        ] + options.value.BillableAndPlannedTime;                            options.totalValue[          1        ] = options.totalValue[          1        ] + options.value.ContractedTime;                            break;                      case 'finalize':                            if(Number(options.totalValue[          1        ]) > 0)                              options.totalValue = (options.totalValue[          0        ] / options.totalValue[          1        ]) * 100;                            else                              options.totalValue = 0;                              break;      }    }            if (options.name === 'BillableVsPlannedVsCapacitySummary') {                     switch(options.summaryProcess) {                      case 'start':                        options.totalValue = [          0,          0        ];                        break;                       case 'calculate':                        options.totalValue[          0        ] = options.totalValue[          0        ] + options.value.BillableAndPlannedTime;                        options.totalValue[          1        ] = options.totalValue[          1        ] + options.value.Capacity;                        break;                    case 'finalize':                      if(Number(options.totalValue[          1        ]) > 0)                        options.totalValue = (options.totalValue[          0        ] / options.totalValue[          1        ]) * 100;                      else                        options.totalValue = 0;                        break;      }    }            if (options.name === 'BillableVsForecastVsCapacitySummary') {                     switch(options.summaryProcess) {                      case 'start':                        options.totalValue = [          0,          0,          0        ];                        break;                       case 'calculate':                        options.totalValue[          0        ] = options.totalValue[          0        ] + options.value.BillableTime;                        options.totalValue[          1        ] = options.totalValue[          1        ] + options.value.ForecastTime;                        options.totalValue[          2        ] = options.totalValue[          2        ] + options.value.Capacity;                        break;                    case 'finalize':                      if(Number(options.totalValue[          2        ]) > 0)                        options.totalValue = ((options.totalValue[          0        ] + options.totalValue[          1        ]) / options.totalValue[          2        ]) * 100;                      else                        options.totalValue = 0;                        break;      }    }  }\",\r\n        \"totalItems\": [\r\n            {\r\n                \"column\": \"Typology Group\",\r\n                \"summaryType\": \"count\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"Total: {0}\",\r\n                \"alignment\": \"left\"\r\n            },\r\n            {\r\n                \"column\": \"Capacity\",\r\n                \"name\": \"Capacity\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"# Heads\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Contracted\",\r\n                \"name\": \"Contracted\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Planned\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Billable + Planned\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Actual\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Billable\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"New Business\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Administrative\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Billable Client\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"column\": \"Forecast\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"ContractedVsCapacitySummary\",\r\n                \"showInColumn\": \"CapacityContractedTimeVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"BillableVsPlannedVsContractedSummary\",\r\n                \"showInColumn\": \"ContractedBillableAndPlannedVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"BillableVsPlannedVsCapacitySummary\",\r\n                \"showInColumn\": \"CapacityBillableAndPlannedVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            },\r\n            {\r\n                \"name\": \"BillableVsForecastVsCapacitySummary\",\r\n                \"showInColumn\": \"CapacityBillableAndForecastVariation\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"summaryType\": \"custom\",\r\n                \"alignment\": \"right\"\r\n            }\r\n        ]\r\n    }\r\n}","DashboardDefinitionId":"5e87f605-0012-4800-b8e5-94d19fbe76c4"},{"Id":"55a510d9-f860-47af-8dc4-2a58d753983d","Name":"Utilization per User","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":5,"Parameters":"[{\"WidgetSubTitle\":\"Billable and Non-Billable Actual Hours in % of User Capacity\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetXPosition\":0,\"WidgetYPosition\":32,\"WidgetRows\":20,\"WidgetColumns\":48,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":false,\"metricName\":\"# Forecast\",\"metricFieldValue\":\"TimeGrandTotal\"},{\"visible\":false,\"metricName\":\"# Actual\",\"metricFieldValue\":\"UtilizationPercentGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"SELECT\\n\\t\\tv.Department,\\n\\t\\tv.UserTypologyGroup,\\n\\t\\tv.[User],\\n\\t\\tv.UserId,\\n\\t\\tCAST(v.HasImage as BIT) as HasImage,\\n\\t\\tv.[Hours],\\n\\t\\tv.AdministrativeHours,\\n\\t\\tv.InternalWorkHours,\\n\\t\\tv.NewBusinessHours,\\n\\t\\tv.BillableHours,\\n\\t\\tv.ClientHours,\\n\\t\\tv.NonWorkedHours,\\n\\t\\tv.Capacity,\\n\\t\\tv.Leaves,\\n\\t\\tIIF(v.Capacity > 0, ISNULL(v.BillableHours, 0.0) / v.Capacity, 1.0) as UtilizationPercentage,\\n\\t\\tIIF(v.Capacity > 0, ISNULL(v.NewBusinessHours, 0.0) / v.Capacity, 1.0) as UtilizationNonBillablePercentage\\nfrom (\\n\\t\\tselect \\n\\t\\t\\t\\tv.Department,\\n\\t\\t\\t\\tv.UserTypologyGroup,\\n\\t\\t\\t\\tv.[User],\\n\\t\\t\\t\\tv.UserId,\\n\\t\\t\\t\\tsum(v.HasImage) as HasImage,\\n\\t\\t\\t\\tsum(v.[Hours]) as [Hours],\\n\\t\\t\\t\\tsum(v.AdministrativeTime) as AdministrativeHours,\\n\\t\\t\\t\\tsum(v.InternalWorkHours) as InternalWorkHours,\\n\\t\\t\\t\\tsum(v.NewBusinessHours) as NewBusinessHours,\\n\\t\\t\\t\\tsum(v.BillableHours) as BillableHours,\\n\\t\\t\\t\\tsum(v.ClientHours) as ClientHours,\\n\\t\\t\\t\\tsum(v.NonWorkedHours) as NonWorkedHours,\\n\\t\\t\\t\\tsum(v.Capacity) as Capacity,\\n\\t\\t\\t\\tsum(v.LeaveTime) as Leaves\\n\\t\\tfrom (\\n\\t\\t\\t\\tselect \\n\\t\\t\\t\\t\\t\\tdu.Department, \\n\\t\\t\\t\\t\\t\\tdu.UserTypologyGroup, \\n\\t\\t\\t\\t\\t\\tdu.FullName as [User],\\n\\t\\t\\t\\t\\t\\tdu.Oid as UserId,\\n\\t\\t\\t\\t\\t\\tCAST(du.HasImage as int) as HasImage,\\n\\t\\t\\t\\t\\t\\tsum(du.ActualTime) as [Hours],\\n\\t\\t\\t\\t\\t\\tsum(du.AdministrativeTime) as AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t0 as InternalWorkHours,\\n\\t\\t\\t\\t\\t\\tsum(du.NewBusinessTime) as NewBusinessHours,\\n\\t\\t\\t\\t\\t\\tsum(du.BillableTime) as BillableHours,\\n\\t\\t\\t\\t\\t\\t0 as ClientHours,\\n\\t\\t\\t\\t\\t\\tSUM(ISNULL(du.ActualTime - (du.AdministrativeTime + du.NewBusinessTime + du.BillableTime), 0.0)) as NonWorkedHours,\\n\\t\\t\\t\\t\\t\\tsum(du.Capacity) as Capacity,\\n\\t\\t\\t\\t\\t\\tsum(du.LeaveTime) as LeaveTime\\n\\t\\t\\t\\tfrom \\n\\t\\t\\t\\t\\t\\tAnalytics.DatamartUser du\\n\\t\\t\\t\\twhere \\n\\t\\t\\t\\t\\t\\t(du.EndDate is null or du.EndDate > @ToDate) and\\n\\t\\t\\t\\t\\t\\tdu.[Date] between @FromDate AND @ToDate and\\n\\t\\t\\t\\t\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR du.CompanyId = @CompanyOid) AND \\n\\t\\t\\t\\t\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR du.DivisionId = @DivisionOid) AND \\n\\t\\t\\t\\t\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR du.DepartmentId = @DepartmentOid) AND\\n\\t\\t\\t\\t\\t\\t(du.UserTypologyGroupId = @TypologyGroupOid)\\n\\t\\t\\t\\tgroup by \\n\\t\\t\\t\\t\\t\\t\\tdu.Department, \\n\\t\\t\\t\\t\\t\\t\\tdu.UserTypologyGroup, \\n\\t\\t\\t\\t\\t\\t\\tdu.FullName,\\n\\t\\t\\t\\t\\t\\t\\tdu.HasImage,\\n\\t\\t\\t\\t\\t\\t\\tdu.Oid\\n\\t\\t\\t\\tunion\\n\\t\\t\\t\\tselect \\n\\t\\t\\t\\t\\t\\tdt.Department, \\n\\t\\t\\t\\t\\t\\tdt.UserTypologyGroup, \\n\\t\\t\\t\\t\\t\\tdt.[User] as [User],\\n\\t\\t\\t\\t\\t\\tdt.UserId,\\n\\t\\t\\t\\t\\t\\tCAST(0 as int) as HasImage,\\n\\t\\t\\t\\t\\t\\t0 as [Hours],\\n\\t\\t\\t\\t\\t\\t0 as AdministrativeTime,\\n\\t\\t\\t\\t\\t\\tSUM(ISNULL(dt.InternalWorkTime, 0.0)) AS [InternalWorkHours],\\n\\t\\t\\t\\t\\t\\t0 as NewBusinessHours,\\n\\t\\t\\t\\t\\t\\t0 as BillableHours,\\n\\t\\t\\t\\t\\t\\tSUM(ISNULL(dt.BillableTime, 0.0) - ISNULL(dt.[InternalWorkTime], 0.0)) as [ClientHours],\\n\\t\\t\\t\\t\\t\\t0 as NonWorkedHours,\\n\\t\\t\\t\\t\\t\\t0 as Capacity,\\n\\t\\t\\t\\t\\t\\t0 as LeaveTime\\n\\t\\t\\t\\tfrom \\n\\t\\t\\t\\t\\t\\tAnalytics.DatamartTimesheet dt\\n\\t\\t\\t\\twhere \\n\\t\\t\\t\\t\\t\\tdt.[Date] between @FromDate AND @ToDate and\\n\\t\\t\\t\\t\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' OR dt.CompanyId = @CompanyOid) AND \\n\\t\\t\\t\\t\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' OR dt.DivisionId = @DivisionOid) AND \\n\\t\\t\\t\\t\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR dt.DepartmentId = @DepartmentOid) AND\\n\\t\\t\\t\\t\\t\\t(dt.UserTypologyGroupId = @TypologyGroupOid)\\n\\t\\t\\t\\tgroup by \\n\\t\\t\\t\\t\\t\\tdt.Department, \\n\\t\\t\\t\\t\\t\\tdt.UserTypologyGroup, \\n\\t\\t\\t\\t\\t\\tdt.[User],\\n\\t\\t\\t\\t\\t\\tdt.UserId\\n\\t\\t) v\\n\\t\\tgroup by \\n\\t\\t\\t\\tv.Department,\\n\\t\\t\\t\\tv.UserTypologyGroup,\\n\\t\\t\\t\\tv.[User],\\n\\t\\t\\t\\tv.UserId\\n\\t\\t) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"startDate\",\"endDate\",\"companyOid\",\"divisionOid\",\"departmentOid\",\"TypologyGroupOid\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/Analytics_Utilization_Per_Company_Department_User/execute","Configuration":"{\"headerFilter\":{\"visible\":true},\"grouping\":{\"autoExpandAll\":true},\"columnResizingMode\":\"widget\",\"allowColumnResizing\":\"true\",\"allowFiltering\":true,\"columnAutoWidth\":\"true\",\"searchPanel\":{\"visible\":true},\"selection\":{\"mode\":\"single\"},\"height\":\"100%\",\"scrolling\":{\"mode\":\"virtual\"},\"columnMinWidth\":\"80\",\"columns\":[{\"dataField\":\"UserId\",\"name\":\"Picture\",\"caption\":\"\",\"width\":30,\"alignment\":\"left\",\"cellTemplate\":\"function(e, i) { debugger;        SK.showImage(e, 'user', 'small', i.data.HasImage, i.data.User, i.text);    }\"},{\"dataField\":\"User\",\"name\":\"User\",\"caption\":\"User\",\"width\":120},{\"dataField\":\"Capacity\",\"caption\":\"Capacity\",\"alignment\":\"right\",\"format\":\"#,##0\"},{\"dataField\":\"Leaves\",\"caption\":\"Leaves\",\"alignment\":\"right\",\"format\":\"#,##0\"},{\"dataField\":\"NewBusinessHours\",\"caption\":\"Non-Billable\",\"name\":\"NonBillable\",\"alignment\":\"right\",\"format\":\"#,##0\"},{\"dataField\":\"AdministrativeHours\",\"caption\":\"Admin\",\"name\":\"Admin\",\"alignment\":\"right\",\"format\":\"#,##0\"},{\"dataField\":\"BillableHours\",\"caption\":\"Billable\",\"alignment\":\"right\",\"format\":\"#,##0\"},{\"dataField\":\"UtilizationNonBillablePercentage\",\"caption\":\"Non Billable %\",\"name\":\"UtilizationNonBillable\",\"alignment\":\"right\",\"format\":\"#,##0\",\"cellTemplate\":\"function(e, i) {          SkillsWorkflow.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true);  }\"},{\"dataField\":\"UtilizationPercentage\",\"caption\":\"Billable %\",\"name\":\"Utilization\",\"alignment\":\"right\",\"format\":\"#,##0\",\"cellTemplate\":\"function(e, i) {          SkillsWorkflow.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true);}\"}],\"sortByGroupSummaryInfo\":[{\"summaryItem\":\"count\"}],\"summary\":{\"calculateCustomSummary\":\"function (options) {             if (options.name === 'UtilizationNonBillablePercentage') {                     switch(options.summaryProcess) {                      case 'start':                            options.totalValue = [    0,    0  ];                            break;                      case 'calculate':                            options.totalValue[    0  ] = options.totalValue[    0  ] + options.value.NewBusinessHours;                       options.totalValue[    1  ] = options.totalValue[    1  ] + options.value.Capacity;                            break;                      case 'finalize':                            if(Number(options.totalValue[    1  ]) > 0)                        options.totalValue = (options.totalValue[    0  ] / options.totalValue[    1  ]) * 100;                            else                        options.totalValue = 0;                              break;}}            if (options.name === 'UtilizationPercentage') {                     switch(options.summaryProcess) {                      case 'start':                            options.totalValue = [    0,    0  ];                            break;                      case 'calculate':                            options.totalValue[    0  ] = options.totalValue[    0  ] + options.value.BillableHours;                       options.totalValue[    1  ] = options.totalValue[    1  ] + options.value.Capacity;                            break;                      case 'finalize':                            if(Number(options.totalValue[    1  ]) > 0)                        options.totalValue = (options.totalValue[    0  ] / options.totalValue[    1  ]) * 100;                            else                        options.totalValue = 0;                              break;}}}\",\"totalItems\":[{\"column\":\"Capacity\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0\",\"displayFormat\":\"{0}\",\"alignment\":\"right\"},{\"column\":\"Leaves\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0\",\"displayFormat\":\"{0}\",\"alignment\":\"right\"},{\"column\":\"Non-Billable\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0\",\"displayFormat\":\"{0}\",\"alignment\":\"right\"},{\"column\":\"Admin\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0\",\"displayFormat\":\"{0}\",\"alignment\":\"right\"},{\"column\":\"Billable\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0\",\"displayFormat\":\"{0}\",\"alignment\":\"right\"},{\"name\":\"UtilizationNonBillablePercentage\",\"showInColumn\":\"Non Billable %\",\"displayFormat\":\"{0}\",\"valueFormat\":\"#,##0\",\"summaryType\":\"custom\",\"alignment\":\"right\"},{\"name\":\"UtilizationPercentage\",\"showInColumn\":\"Billable %\",\"displayFormat\":\"{0}\",\"valueFormat\":\"#,##0\",\"summaryType\":\"custom\",\"alignment\":\"right\"}]},\"stateStoring\":{\"enabled\":false}}","DashboardDefinitionId":"5e87f605-0012-4800-b8e5-94d19fbe76c4"},{"Id":"b9857b47-8d66-4f67-b38d-476a8df5f651","Name":"Filters","Active":true,"UseQuery":false,"Query":"","Size":12,"Order":0,"Parameters":"[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"form\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#f0f0f0\",\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":2,\"WidgetColumns\":48,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"","Configuration":"{\r\n    \"colCount\": 4,\r\n    \"items\": [\r\n        {\r\n            \"name\": \"Year\",\r\n            \"dataField\": \"Year\",\r\n            \"editorType\": \"dxNumberBox\",\r\n            \"editorOptions\": {\r\n                \"showSpinButtons\": true,\r\n                \"value\": 2019,\r\n                \"width\": 65,\r\n                \"placeholder\": \"year\",\r\n                \"onContentReady\": \"function(e){ setTimeout(function() { SkillsWorkflow.setDashboardFilter('year', 2019); SkillsWorkflow.setDashboardFilter('companyOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('divisionOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('departmentOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('TypologyGroupOid', '00000000-0000-0000-0000-000000000000');}, 1000) }\",\r\n                \"onValueChanged\": \"function(e){ if(e.value != null) { SkillsWorkflow.setDashboardFilter('year', e.value); } }\"\r\n            },\r\n            \"noDataText\": \"Please wait...\"\r\n        },\r\n        {\r\n            \"dataField\": \"CompanyId\",\r\n            \"label\": {\r\n                \"text\": \"Company\"\r\n            },\r\n            \"editorType\": \"dxSelectBox\",\r\n            \"editorOptions\": {\r\n                \"width\": 250,\r\n                \"searchEnabled\": true,\r\n                \"dataSource\": {\r\n                    \"load\": \"function(loadOptions){ \r\n                            var searchValue = (\r\n                            loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                            var searchTake = (loadOptions.searchValue != null && loadOptions.searchValue != '' ? 10 : 100); \r\n                            return SkillsWorkflow.executeAPI('GET', 'companies/lookup',\r\n                    null,\r\n                    {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All companies'\r\n                        });return res;\r\n                    })\r\n                }\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET','companies/'+key+'/lookup',null,{}).then( result =>  { return Promise.resolve(result);}) }\"\r\n            },\r\n            \"placeholder\": \"All companies\",\r\n            \"displayExpr\": \"Name\",\r\n            \"valueExpr\": \"Id\",\r\n            \"onValueChanged\": \"function(e){ \r\n                if( e.value != null && e.value != '') {\r\n                    SkillsWorkflow.setDashboardFilter('companyOid', e.value);\r\n            } else {\r\n                    SkillsWorkflow.setDashboardFilter('companyOid', '00000000-0000-0000-0000-000000000000');\r\n            }\r\n                SW.setComponentByValue(e.previousValue, e.value, 'DivisionId');\r\n        }\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component,'CompanyId');}\"\r\n    }\r\n},\r\n{\r\n    \"dataField\": \"DivisionId\",\r\n    \"label\": {\r\n        \"text\": \"Division\"\r\n    },\r\n    \"editorType\": \"dxSelectBox\",\r\n    \"editorOptions\": {\r\n        \"width\": 250,\r\n        \"searchEnabled\": true,\r\n        \"dataSource\": {\r\n            \"load\": \"function(loadOptions){ \r\n                            let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                            let skip = loadOptions.skip || 0; \r\n                            let take = loadOptions.take || 20; \r\n                            var param = { name:searchValue, skip: skip, take: take\r\n            }; \r\n                            var companyId = SW.getValueFromComponent('CompanyId'); \r\n                            if (companyId == '00000000-0000-0000-0000-000000000000') {\r\n                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',\r\n                null,\r\n                {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All divisions'\r\n                    });return res;\r\n                })\r\n            } else if (companyId != null) { \r\n                                param['companyId'\r\n                ] = companyId;\r\n                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',param,\r\n                {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All divisions'\r\n                    });return res;\r\n                })\r\n            }\r\n        }\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET','divisions/'+key+'/lookup',null,{}).then( result =>  { return Promise.resolve(result);})}\"\r\n    },\r\n    \"placeholder\": \"All divisions\",\r\n    \"onValueChanged\": \"function(e){ \r\n                if (e.value != null && e.value != '') {\r\n                    SkillsWorkflow.setDashboardFilter('divisionOid', e.value);\r\n    } else {\r\n                    SkillsWorkflow.setDashboardFilter('divisionOid', '00000000-0000-0000-0000-000000000000');\r\n    }\r\n                SW.setComponentByValue(e.previousValue, e.value, 'DepartmentId');\r\n}\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'DivisionId'); }\",\r\n\"displayExpr\": \"Name\",\r\n\"valueExpr\": \"Id\",\r\n\"disabled\": true\r\n}\r\n},\r\n{\r\n\"dataField\": \"DepartmentId\",\r\n\"label\": {\r\n\"text\": \"Department\"\r\n},\r\n\"editorType\": \"dxSelectBox\",\r\n\"editorOptions\": {\r\n\"width\": 250,\r\n\"searchEnabled\": true,\r\n\"dataSource\": {\r\n    \"load\": \"function(loadOptions){ \r\n                    let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                    let skip = loadOptions.skip || 0; \r\n                    let take = loadOptions.take || 20;\r\n                    var param = { name: searchValue, skip: skip, take: take\r\n    }; \r\n                    var divisionId = SW.getValueFromComponent('DivisionId'); \r\n                    var companyId = SW.getValueFromComponent('CompanyId'); \r\n                    if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && companyId != null && companyId != '00000000-0000-0000-0000-000000000000') { \r\n                        param['divisionId'\r\n        ] = divisionId;\r\n                        param['companyId'\r\n        ] = companyId;\r\n    } else if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && (companyId == null || companyId == '00000000-0000-0000-0000-000000000000')) {\r\n                        param['divisionId'\r\n        ] = divisionId;\r\n    } \r\n                    return SkillsWorkflow.executeAPI('GET', 'departments',param,\r\n    {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All departments'\r\n        });return res;\r\n    })\r\n}\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET', 'departments/' + key, null, {}).then( result =>  { return Promise.resolve(result); } ) }\"\r\n},\r\n\"placeholder\": \"All departments\",\r\n\"onValueChanged\": \"function(e){ \r\n                    if(e.value != null && e.value != '') {\r\n                        SkillsWorkflow.setDashboardFilter('departmentOid', e.value);\r\n} else {\r\n                        SkillsWorkflow.setDashboardFilter('departmentOid', '00000000-0000-0000-0000-000000000000');\r\n}\r\n}\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'DepartmentId'); }\",\r\n\"displayExpr\": \"Name\",\r\n\"valueExpr\": \"Id\",\r\n\"disabled\": true\r\n}\r\n}\r\n]\r\n}","DashboardDefinitionId":"5e87f605-0012-4800-b8e5-94d19fbe76c4"},{"Id":"9357eca2-953f-47c2-acd0-ad64a9a04fba","Name":"Overtime View","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":1,"Parameters":"[{\"WidgetSubTitle\":\"Capacity, Contracted Time & Weeks with not Enough Capacity\",\"WidgetType\":\"rangeselector\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#e0e0e0\",\"WidgetXPosition\":0,\"WidgetYPosition\":2,\"WidgetRows\":12,\"WidgetColumns\":48,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"startDate\":\"2018/06/1\",\"endDate\":\"2019/06/30\",\"type\":\"year\",\"visible\":false},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select  [Date] - datepart(dw, [Date]) + 1 as Week,\\n        sum(WorkingTime - Holidays - Leaves) as Capacity,\\n        sum(ContractedTime) as ContractedTime,\\n        iif(sum(WorkingTime - Holidays - Leaves - ContractedTime) < 0, sum(WorkingTime - Holidays - Leaves), null) as NotEnoughCapacity\\nfrom    (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        yrd.Day as [Date],\\n                        sum(RequiredHours) as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, Yearday yrd, UserTypology typ\\n                where   datepart(dw, yrd.day) not in (1, 7) and\\n                        typ.oid = ssu.Typology\\n                        and Year(yrd.day) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        hld.Date as [Date],\\n                        0 as WorkingTime,\\n                        sum(RequiredHours) as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserTypology typ, Holiday hld\\n                where   datepart(dw, hld.Date) not in (1, 7) and\\n                        typ.oid = ssu.Typology and\\n                        ssu.Company = hld.Company \\n                        and Year(hld.Date) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, hld.Date\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        uv.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        sum(RequiredHours) as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserVacation uv, UserTypology typ\\n                where   datepart(dw, uv.Day) not in (1, 7) and\\n                        uv.[User] = ssu.Oid and\\n                        typ.oid = ssu.Typology\\n                        and Year(uv.Day) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, uv.Day\\n                union all\\n                select  TypologyGroupOid,\\n                        UserOid,\\n                        [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        sum(ContractedTime) as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    (\\n                            select  edt.UserTypologyGroup as TypologyGroupOid,\\n                                    edt.[User] as UserOid,\\n                                    yrd.Day as [Date],\\n                                    sum(edt.Hours / (datediff(dd, est.[Date], est.Expiration) + 1)) as ContractedTime\\n                            from    Estimate est, EstimateItem eit, EstimateItemDetail edt, YearDay yrd\\n                            where   eit.Estimate = est.Oid and\\n                                    edt.EstimateItem = eit.Oid and\\n                                    yrd.Day between cast(est.[Date] as date) and cast(est.Expiration as date) and\\n                                    edt.Type = 2\\n                                    and Year([Date]) = @year\\n                            group by  est.Oid, edt.UserTypologyGroup, edt.[User], yrd.Day\\n                        ) t\\n                group by TypologyGroupOid, UserOid, [Date]\\n        ) t\\nwhere   Year([Date]) = @year\\ngroup by [Date] - datepart(dw, [Date]) + 1\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"year\"]}}]","DashboardComponentType":{"Id":"c666ba5e-8578-4132-86a5-0f96c665000d","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/FTE - Overtime View/execute","Configuration":"{\n  \"height\": 200,\n  \"size\": {\n    \"height\": 200\n  },\n  \"containerBackgroundColor\": \"#e0e0e0\",\n  \"selectedRangeColor\": \"#f5564a\",\n  \"chart\": {\n    \"commonSeriesSettings\": {\n      \"type\": \"steparea\",\n      \"argumentField\": \"Week\"\n    },\n    \"series\": [\n      {\n        \"valueField\": \"Capacity\"\n      },\n      {\n        \"valueField\": \"ContractedTime\"\n      },\n      {\n        \"valueField\": \"NotEnoughCapacity\",\n        \"type\": \"scatter\",\n        \"ignoreEmptyPoints\": true,\n        \"color\": \"#da5859\"\n      }\n    ]\n  },\n  \"scale\": {\n    \"minorTickInterval\": \"week\",\n    \"tickInterval\": \"month\",\n    \"valueType\": \"datetime\"\n  },\n  \"sliderMarker\": {\n    \"format\": \"monthAndDay\",\n    \"color\": \"#da5859\"\n  },\n  \"value\": {\n    \"length\": {\n      \"years\": 1\n    }\n  }\n}","DashboardDefinitionId":"5e87f605-0012-4800-b8e5-94d19fbe76c4"}]}
