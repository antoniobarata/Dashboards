{"DashboardDefinitionRoles":[],"Id":"1933f5f5-eaf1-4913-85f8-51b34b266a59","Name":"FTE Dashboard","Active":true,"Location":0,"DocumentId":"00000000-0000-0000-0000-000000000000","DocumentName":"","DocumentsConfiguration":"{\"type\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"remove\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{}},\"customDocument\":{\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemNames\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"dashboard\":false}}","Templates":[],"DashboardDefinitionComponents":[{"Id":"4a8b24dc-3a7a-46ff-8a4c-36676831769e","Name":"Overtime View","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":1,"Parameters":"[{\"WidgetSubTitle\":\"Capacity, Contracted Time & Weeks with not Enough Capacity\",\"WidgetType\":\"rangeselector\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#e0e0e0\",\"WidgetHeight\":100,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"startDate\":\"2018/06/1\",\"endDate\":\"2019/06/30\",\"type\":\"year\",\"visible\":false},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select  [Date] - datepart(dw, [Date]) + 1 as Week,\\n        sum(WorkingTime - Holidays - Leaves) as Capacity,\\n        sum(ContractedTime) as ContractedTime,\\n        iif(sum(WorkingTime - Holidays - Leaves - ContractedTime) < 0, sum(WorkingTime - Holidays - Leaves), null) as NotEnoughCapacity\\nfrom    (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        yrd.Day as [Date],\\n                        sum(RequiredHours) as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, Yearday yrd, UserTypology typ\\n                where   datepart(dw, yrd.day) not in (1, 7) and\\n                        typ.oid = ssu.Typology\\n                        and Year(yrd.day) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        hld.Date as [Date],\\n                        0 as WorkingTime,\\n                        sum(RequiredHours) as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserTypology typ, Holiday hld\\n                where   datepart(dw, hld.Date) not in (1, 7) and\\n                        typ.oid = ssu.Typology and\\n                        ssu.Company = hld.Company \\n                        and Year(hld.Date) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, hld.Date\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        uv.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        sum(RequiredHours) as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserVacation uv, UserTypology typ\\n                where   datepart(dw, uv.Day) not in (1, 7) and\\n                        uv.[User] = ssu.Oid and\\n                        typ.oid = ssu.Typology\\n                        and Year(uv.Day) = @year\\n                group by typ.UserTypologyGroup, ssu.Oid, uv.Day\\n                union all\\n                select  TypologyGroupOid,\\n                        UserOid,\\n                        [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        sum(ContractedTime) as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    (\\n                            select  edt.UserTypologyGroup as TypologyGroupOid,\\n                                    edt.[User] as UserOid,\\n                                    yrd.Day as [Date],\\n                                    sum(edt.Hours / (datediff(dd, est.[Date], est.Expiration) + 1)) as ContractedTime\\n                            from    Estimate est, EstimateItem eit, EstimateItemDetail edt, YearDay yrd\\n                            where   eit.Estimate = est.Oid and\\n                                    edt.EstimateItem = eit.Oid and\\n                                    yrd.Day between cast(est.[Date] as date) and cast(est.Expiration as date) and\\n                                    edt.Type = 2\\n                                    and Year([Date]) = @year\\n                            group by  est.Oid, edt.UserTypologyGroup, edt.[User], yrd.Day\\n                        ) t\\n                group by TypologyGroupOid, UserOid, [Date]\\n        ) t\\nwhere   Year([Date]) = @year\\ngroup by [Date] - datepart(dw, [Date]) + 1\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"year\"]}}]","DashboardComponentType":{"Id":"3c1da83b-efe9-4b70-87d0-c3813a512774","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/FTE - Overtime View/execute","Configuration":"{\n  \"height\": 200,\n  \"size\": {\n    \"height\": 200\n  },\n  \"containerBackgroundColor\": \"#e0e0e0\",\n  \"selectedRangeColor\": \"#f5564a\",\n  \"chart\": {\n    \"commonSeriesSettings\": {\n      \"type\": \"steparea\",\n      \"argumentField\": \"Week\"\n    },\n    \"series\": [\n      {\n        \"valueField\": \"Capacity\"\n      },\n      {\n        \"valueField\": \"ContractedTime\"\n      },\n      {\n        \"valueField\": \"NotEnoughCapacity\",\n        \"type\": \"scatter\",\n        \"ignoreEmptyPoints\": true,\n        \"color\": \"#da5859\"\n      }\n    ]\n  },\n  \"scale\": {\n    \"minorTickInterval\": \"week\",\n    \"tickInterval\": \"month\",\n    \"valueType\": \"datetime\"\n  },\n  \"sliderMarker\": {\n    \"format\": \"monthAndDay\",\n    \"color\": \"#da5859\"\n  },\n  \"value\": {\n    \"length\": {\n      \"years\": 1\n    }\n  }\n}","DashboardDefinitionId":"1933f5f5-eaf1-4913-85f8-51b34b266a59"},{"Id":"f8d1ad9d-96e7-4e16-a0c7-637ce832834a","Name":"Typology Groups","Active":true,"UseQuery":false,"Query":null,"Size":12,"Order":2,"Parameters":"[{\"WidgetSubTitle\":\"Staff, Proposals & Timesheet\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetHeight\":300,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":true,\"metricName\":\"? Delayed To Do\",\"metricFieldValue\":\"DelayedToDoJobsGrandTotal\"},{\"visible\":true,\"metricName\":\"?  Delayed Work in Progress\",\"metricFieldValue\":\"DelayedWorkInProgressJobsGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\tv.TypologyGroup,\\n\\t\\t\\t\\t\\t\\tv.UserCount,\\n\\t\\t\\t\\t\\t\\tv.Capacity,\\n\\t\\t\\t\\t\\t\\tv.Holidays,\\n\\t\\t\\t\\t\\t\\tv.Leaves,\\n\\t\\t\\t\\t\\t\\tv.ContractedTime,\\n\\t\\t\\t\\t\\t\\tv.PlannedTime,\\n\\t\\t\\t\\t\\t\\tv.ActualTime,\\n\\t\\t\\t\\t\\t\\tv.BillableTime,\\n\\t\\t\\t\\t\\t\\tv.NewBusinessTime,\\n\\t\\t\\t\\t\\t\\tv.AdministrativeTime,\\n\\t\\t\\t\\t\\t\\tv.ClientTime,\\n\\t\\t\\t\\t\\t\\tv.ClientBillableTime,\\n\\t\\t\\t\\t\\t\\t(v.BillableTime + v.PlannedTime) as BillableAndPlannedTime,\\n                        IIF(v.Capacity > 0, (v.ClientTime / v.Capacity), 0) AS CapacityClientTimeVariation,\\n                        IIF(v.Capacity > 0, (v.ContractedTime / v.Capacity), 0) AS CapacityContractedTimeVariation,\\n\\t\\t\\t\\t\\t\\tIIF(v.Capacity > 0, ((v.BillableTime + v.PlannedTime) / v.Capacity), 0) CapacityBillableAndPlannedVariation,\\n\\t\\t\\t\\t\\t\\tIIF(v.ContractedTime > 0, ((v.BillableTime + v.PlannedTime) / v.ContractedTime), 0) ContractedBillableAndPlannedVariation\\n\\t\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\t(\\n                        SELECT\\n                            utg.Name AS TypologyGroup,\\n                            MAX(UserCount) AS UserCount,\\n                            SUM(WorkingTime - Holidays - Leaves) AS Capacity,\\n                            SUM(Holidays) AS Holidays,\\n                            SUM(Leaves) AS Leaves,\\n                            SUM(ContractedTime) AS ContractedTime,\\n                            SUM(PlannedTime) AS PlannedTime,\\n                            SUM(ActualTime) AS ActualTime,\\n                            SUM(BillableTime) AS BillableTime,\\n                            SUM(NewBusinessTime) AS NewBusinessTime,\\n                            SUM(AdministrativeTime) AS AdministrativeTime,\\n                            SUM(BillableTime + NewBusinessTime) AS ClientTime,\\n                            SUM(ClientBillableTime) AS ClientBillableTime\\n                        FROM UserTypologyGroup utg,\\n                             (SELECT\\n                                 typ.UserTypologyGroup AS TypologyGroupOid,\\n                                 COUNT(*) AS UserCount\\n                             FROM [User] ssu,\\n                                  UserTypology typ\\n                             WHERE typ.oid = ssu.Typology\\n                             GROUP BY typ.UserTypologyGroup) tuc,\\n                             (SELECT\\n                                 typ.UserTypologyGroup AS TypologyGroupOid,\\n                                 ssu.Oid AS UserOid,\\n                                 yrd.Day AS [Date],\\n                                 SUM(RequiredHours) AS WorkingTime,\\n                                 0 AS Holidays,\\n                                 0 AS Leaves,\\n                                 0 AS ContractedTime,\\n                                 0 AS PlannedTime,\\n                                 0 AS ActualTime,\\n                                 0 AS BillableTime,\\n                                 0 AS NewBusinessTime,\\n                                 0 AS AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t\\t\\t 0 AS ClientBillableTime\\n                             FROM [User] ssu,\\n                                  Yearday yrd,\\n                                  UserTypology typ\\n                             WHERE DATEPART(dw, yrd.day) NOT IN (1, 7)\\n                             AND typ.oid = ssu.Typology\\n                             AND (yrd.Day >= @FromDate AND yrd.Day <= @ToDate)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ssu.Company = @CompanyOid)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department IN (SELECT Oid FROM Department WHERE Division = @DivisionOid))\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department = @DepartmentOid)\\n                             GROUP BY typ.UserTypologyGroup,\\n                                      ssu.Oid,\\n                                      yrd.Day\\n                             UNION ALL\\n                             SELECT\\n                                 typ.UserTypologyGroup AS TypologyGroupOid,\\n                                 ssu.Oid AS UserOid,\\n                                 hld.Date AS [Date],\\n                                 0 AS WorkingTime,\\n                                 SUM(RequiredHours) AS Holidays,\\n                                 0 AS Leaves,\\n                                 0 AS ContractedTime,\\n                                 0 AS PlannedTime,\\n                                 0 AS ActualTime,\\n                                 0 AS BillableTime,\\n                                 0 AS NewBusinessTime,\\n                                 0 AS AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t\\t\\t 0 AS ClientBillableTime\\n                             FROM [User] ssu,\\n                                  UserTypology typ,\\n                                  Holiday hld\\n                             WHERE DATEPART(dw, hld.Date) NOT IN (1, 7)\\n                             AND typ.oid = ssu.Typology\\n                             AND ssu.Company = hld.Company\\n                             AND (hld.Date >= @FromDate AND hld.Date <= @ToDate)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ssu.Company = @CompanyOid)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department IN (SELECT Oid FROM Department WHERE Division = @DivisionOid))\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department = @DepartmentOid)\\n                             GROUP BY typ.UserTypologyGroup,\\n                                      ssu.Oid,\\n                                      hld.Date\\n                             UNION ALL\\n                             SELECT\\n                                 typ.UserTypologyGroup AS TypologyGroupOid,\\n                                 ssu.Oid AS UserOid,\\n                                 uv.Day AS [Date],\\n                                 0 AS WorkingTime,\\n                                 0 AS Holidays,\\n                                 SUM(RequiredHours) AS Leaves,\\n                                 0 AS ContractedTime,\\n                                 0 AS PlannedTime,\\n                                 0 AS ActualTime,\\n                                 0 AS BillableTime,\\n                                 0 AS NewBusinessTime,\\n                                 0 AS AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t\\t\\t 0 AS ClientBillableTime\\n                             FROM [User] ssu,\\n                                  UserVacation uv,\\n                                  UserTypology typ\\n                             WHERE DATEPART(dw, uv.Day) NOT IN (1, 7)\\n                             AND uv.[User] = ssu.Oid\\n                             AND typ.oid = ssu.Typology\\n                             AND (uv.Day >= @FromDate AND uv.Day <= @ToDate)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ssu.Company = @CompanyOid)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department IN (SELECT Oid FROM Department WHERE Division = @DivisionOid))\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department = @DepartmentOid)\\n                             GROUP BY typ.UserTypologyGroup,\\n                                      ssu.Oid,\\n                                      uv.Day\\n                             UNION ALL\\n                             SELECT\\n                                 TypologyGroupOid,\\n                                 UserOid,\\n                                 [Date],\\n                                 0 AS WorkingTime,\\n                                 0 AS Holidays,\\n                                 0 AS Leaves,\\n                                 SUM(ContractedTime) AS ContractedTime,\\n                                 0 AS PlannedTime,\\n                                 0 AS ActualTime,\\n                                 0 AS BillableTime,\\n                                 0 AS NewBusinessTime,\\n                                 0 AS AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t\\t\\t 0 AS ClientBillableTime\\n                             FROM (SELECT\\n                                 edt.UserTypologyGroup AS TypologyGroupOid,\\n                                 edt.[User] AS UserOid,\\n                                 yrd.Day AS [Date],\\n                                 SUM(edt.Hours / (DATEDIFF(dd, est.[Date], est.Expiration) + 1)) AS ContractedTime\\n                             FROM Estimate est,\\n                                  EstimateItem eit,\\n                                  EstimateItemDetail edt,\\n\\t\\t\\t\\t\\t\\t\\t\\t  [User] ssu,\\n                                  YearDay yrd\\n                             WHERE eit.Estimate = est.Oid\\n                             AND edt.EstimateItem = eit.Oid\\n\\t\\t\\t\\t\\t\\t\\t AND edt.[User] = ssu.Oid\\n                             AND yrd.Day BETWEEN CAST(est.[Date] AS date) AND CAST(est.Expiration AS date)\\n                             AND edt.Type = 2\\n                             AND (yrd.Day >= @FromDate AND yrd.Day <= @ToDate)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ssu.Company = @CompanyOid)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department IN (SELECT Oid FROM Department WHERE Division = @DivisionOid))\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department = @DepartmentOid)\\n                             GROUP BY est.Oid,\\n                                      edt.UserTypologyGroup,\\n                                      edt.[User],\\n                                      yrd.Day) t\\n                             GROUP BY TypologyGroupOid,\\n                                      UserOid,\\n                                      [Date]\\n                             UNION ALL\\n                             SELECT\\n                                 pht.UserTypologyGroup AS TypologyGroupOid,\\n                                 pht.[User] AS UserOid,\\n                                 yrd.Day AS [Date],\\n                                 0 AS WorkingTime,\\n                                 0 AS Holidays,\\n                                 0 AS Leaves,\\n                                 0 AS ContractedTime,\\n                                 SUM((pht.PlannedMinutes / 60) / (DATEDIFF(dd, prj.BeginDate, prj.EndDate + 1))) AS PlannedTime,\\n                                 0 AS ActualTime,\\n                                 0 AS BillableTime,\\n                                 0 AS NewBusinessTime,\\n                                 0 AS AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t\\t\\t 0 AS ClientBillableTime\\n                             FROM PlannedHoursTotal pht,\\n                                  Project prj,\\n\\t\\t\\t\\t\\t\\t\\t\\t  [User] ssu,\\n                                  YearDay yrd\\n                             WHERE prj.Oid = pht.Project\\n\\t\\t\\t\\t\\t\\t\\t AND ssu.Oid = pht.[User]\\n                             AND yrd.Day BETWEEN CAST(prj.BeginDate AS date) AND CAST(prj.EndDate AS date)\\n                             AND (yrd.Day >= @FromDate AND yrd.Day <= @ToDate)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ssu.Company = @CompanyOid)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department IN (SELECT Oid FROM Department WHERE Division = @DivisionOid))\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department = @DepartmentOid)\\n                             GROUP BY pht.UserTypologyGroup,\\n                                      pht.[User],\\n                                      yrd.Day\\n                             UNION ALL\\n                             SELECT\\n                                 typ.UserTypologyGroup AS TypologyGroupOid,\\n                                 ssu.Oid AS UserOid,\\n                                 CAST(tim.CreatedOn AS date) AS [Date],\\n                                 0 AS WorkingTime,\\n                                 0 AS Holidays,\\n                                 0 AS Leaves,\\n                                 0 AS ContractedTime,\\n                                 0 AS PlannedTime,\\n                                 SUM(DurationHours + DurationMinutes / 60) AS ActualTime,\\n                                 0 AS BillableTime,\\n                                 0 AS NewBusinessTime,\\n                                 0 AS AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t\\t\\t 0 AS ClientBillableTime\\n                             FROM Timesheet tim,\\n                                  [User] ssu,\\n                                  UserTypology typ\\n                             WHERE typ.Oid = ssu.Typology\\n                             AND tim.CreatedBy = ssu.Oid\\n                             AND (tim.CreatedOn >= @FromDate AND tim.CreatedOn <= @ToDate)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ssu.Company = @CompanyOid)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department IN (SELECT Oid FROM Department WHERE Division = @DivisionOid))\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department = @DepartmentOid)\\n                             GROUP BY typ.UserTypologyGroup,\\n                                      ssu.Oid,\\n                                      CAST(tim.CreatedOn AS date)\\n                             UNION ALL\\n                             SELECT\\n                                 typ.UserTypologyGroup AS TypologyGroupOid,\\n                                 ssu.Oid AS UserOid,\\n                                 CAST(tim.CreatedOn AS date) AS [Date],\\n                                 0 AS WorkingTime,\\n                                 0 AS Holidays,\\n                                 0 AS Leaves,\\n                                 0 AS ContractedTime,\\n                                 0 AS PlannedTime,\\n                                 0 AS ActualTime,\\n                                 SUM(DurationHours + DurationMinutes / 60) AS BillableTime,\\n                                 0 AS NewBusinessTime,\\n                                 0 AS AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t\\t\\t 0 AS ClientBillableTime\\n                             FROM Timesheet tim,\\n                                  [User] ssu,\\n                                  UserTypology typ\\n                             WHERE typ.Oid = ssu.Typology\\n                             AND tim.CreatedBy = ssu.Oid\\n                             AND tim.Client IS NOT NULL\\n                             AND (tim.Billable = 1\\n                             OR tim.Billable IS NULL)\\n                             AND (tim.CreatedOn >= @FromDate AND tim.CreatedOn <= @ToDate)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ssu.Company = @CompanyOid)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department IN (SELECT Oid FROM Department WHERE Division = @DivisionOid))\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department = @DepartmentOid)\\n                             GROUP BY typ.UserTypologyGroup,\\n                                      ssu.Oid,\\n                                      CAST(tim.CreatedOn AS date)\\n                             UNION ALL\\n                             SELECT\\n                                 typ.UserTypologyGroup AS TypologyGroupOid,\\n                                 ssu.Oid AS UserOid,\\n                                 CAST(tim.CreatedOn AS date) AS [Date],\\n                                 0 AS WorkingTime,\\n                                 0 AS Holidays,\\n                                 0 AS Leaves,\\n                                 0 AS ContractedTime,\\n                                 0 AS PlannedTime,\\n                                 0 AS ActualTime,\\n                                 0 AS BillableTime,\\n                                 SUM(DurationHours + DurationMinutes / 60) AS NewBusinessTime,\\n                                 0 AS AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t\\t\\t 0 AS ClientBillableTime\\n                             FROM Timesheet tim,\\n                                  [User] ssu,\\n                                  UserTypology typ\\n                             WHERE typ.Oid = ssu.Typology\\n                             AND tim.CreatedBy = ssu.Oid\\n                             AND tim.Client IS NOT NULL\\n                             AND NOT (tim.Billable = 1\\n                             OR tim.Billable IS NULL)\\n                             AND (tim.CreatedOn >= @FromDate AND tim.CreatedOn <= @ToDate)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ssu.Company = @CompanyOid)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department IN (SELECT Oid FROM Department WHERE Division = @DivisionOid))\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department = @DepartmentOid)\\n                             GROUP BY typ.UserTypologyGroup,\\n                                      ssu.Oid,\\n                                      CAST(tim.CreatedOn AS date)\\n                             UNION ALL\\n                             SELECT\\n                                 typ.UserTypologyGroup AS TypologyGroupOid,\\n                                 ssu.Oid AS UserOid,\\n                                 CAST(tim.CreatedOn AS date) AS [Date],\\n                                 0 AS WorkingTime,\\n                                 0 AS Holidays,\\n                                 0 AS Leaves,\\n                                 0 AS ContractedTime,\\n                                 0 AS PlannedTime,\\n                                 0 AS ActualTime,\\n                                 0 AS BillableTime,\\n                                 0 AS NewBusinessTime,\\n                                 SUM(DurationHours + DurationMinutes / 60) AS AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t\\t\\t 0 AS ClientBillableTime\\n                             FROM Timesheet tim,\\n                                  [User] ssu,\\n                                  UserTypology typ\\n                             WHERE typ.Oid = ssu.Typology\\n                             AND tim.CreatedBy = ssu.Oid\\n                             AND tim.Client IS NULL\\n                             AND (tim.CreatedOn >= @FromDate AND tim.CreatedOn <= @ToDate)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ssu.Company = @CompanyOid)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department IN (SELECT Oid FROM Department WHERE Division = @DivisionOid))\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department = @DepartmentOid)\\n                             GROUP BY typ.UserTypologyGroup,\\n                                      ssu.Oid,\\n                                      CAST(tim.CreatedOn AS date)\\n\\t\\t\\t\\t\\t\\t\\t UNION ALL\\n                             SELECT\\n                                 typ.UserTypologyGroup AS TypologyGroupOid,\\n                                 ssu.Oid AS UserOid,\\n                                 CAST(tim.CreatedOn AS date) AS [Date],\\n                                 0 AS WorkingTime,\\n                                 0 AS Holidays,\\n                                 0 AS Leaves,\\n                                 0 AS ContractedTime,\\n                                 0 AS PlannedTime,\\n                                 0 AS ActualTime,\\n                                 0 AS BillableTime,\\n                                 0 AS NewBusinessTime,\\n                                 0 AS AdministrativeTime,\\n\\t\\t\\t\\t\\t\\t\\t\\t SUM(DurationHours + DurationMinutes / 60) AS ClientBillableTime\\n                             FROM Timesheet tim,\\n                                  [User] ssu,\\n                                  UserTypology typ\\n                             WHERE typ.Oid = ssu.Typology\\n                             AND tim.CreatedBy = ssu.Oid\\n                             AND tim.Client IS NOT NULL\\n                             AND tim.Billable = 1\\n                             AND (tim.CreatedOn >= @FromDate AND tim.CreatedOn <= @ToDate)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@CompanyOid = '00000000-0000-0000-0000-000000000000' OR ssu.Company = @CompanyOid)\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DivisionOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department IN (SELECT Oid FROM Department WHERE Division = @DivisionOid))\\n\\t\\t\\t\\t\\t\\t\\t\\tAND (@DepartmentOid = '00000000-0000-0000-0000-000000000000' OR ssu.Department = @DepartmentOid)\\n                             GROUP BY typ.UserTypologyGroup,\\n                                      ssu.Oid,\\n                                      CAST(tim.CreatedOn AS date)\\n\\t\\t\\t\\t\\t\\t) t\\n                        WHERE utg.Oid = t.TypologyGroupOid\\n                        AND tuc.TypologyGroupOid = utg.Oid\\n                        GROUP BY utg.Name\\n\\t\\t\\t\\t\\t) v\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"startDate\",\"endDate\",\"companyOid\",\"divisionOid\",\"departmentOid\"]}}]","DashboardComponentType":{"Id":"3c1da83b-efe9-4b70-87d0-c3813a512774","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"globalQuery/FTE - Typology Groups/execute","Configuration":"{\n  \"headerFilter\":{\n  \"visible\":true\n},\n\"stateStoring\": {\n  \"enabled\": false\n},\n\"columnResizingMode\":\"widget\",\n\"allowColumnResizing\":true,\n\"allowFiltering\":true,\n\"columnAutoWidth\":true,\n  \"searchPanel\": {\n            \"visible\": true\n  },\n  \"height\": 370,\n  \"scrolling\": {\n    \"mode\": \"virtual\"\n  },\n  \"columnMinWidth\": 80,\n  \"columns\": [\n    {\n      \"dataField\": \"TypologyGroup\",\n      \"name\": \"Typology Group\",\n      \"caption\": \"Typology\",\n      \"width\": 300\n    },\n    {\n          \"dataField\": \"UserCount\",\n          \"caption\": \"# Heads\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\",\n          \"cssClass\":\"dataCell actualHours\"\n        },\n        {\n          \"dataField\": \"Capacity\",\n          \"caption\": \"Capacity\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\"\n    },\n    {\n          \"dataField\": \"CapacityContractedTimeVariation\",\n          \"caption\": \"Contracted / Capacity\",\n          \"name\": \"VariationCapCon\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\",\n          \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\n        },\n        {\n          \"dataField\": \"ContractedBillableAndPlannedVariation\",\n          \"caption\": \"(Billable + Planned) / Contracted\",\n          \"name\": \"VariationConBilPla\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\",\n          \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\n        },\n      {\n          \"dataField\": \"CapacityBillableAndPlannedVariation\",\n          \"caption\": \"(Billable + Planned) / Capacity\",\n          \"name\": \"VariationCapBilPla\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\",\n            \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, i.value < 0.8, (i.value >= 0.8 && i.value < 1.2), true); }\"\n      },\n      {\n          \"dataField\": \"ContractedTime\",\n          \"caption\": \"Contracted\",\n          \"name\": \"Contracted\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\"\n        },\n        {\n          \"dataField\": \"PlannedTime\",\n          \"caption\": \"Planned\",\n          \"name\": \"Planned\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\"\n        },\n        {\n          \"dataField\": \"BillableAndPlannedTime\",\n          \"caption\": \"Billable + Planned\",\n          \"name\": \"BillableAndPlanned\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\"\n    },\n    {\n          \"dataField\": \"ActualTime\",\n          \"caption\": \"Actual\",\n          \"name\": \"Actual\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\"\n        },\n        {\n          \"dataField\": \"BillableTime\",\n          \"caption\": \"Billable\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\"\n        },\n        {\n          \"dataField\": \"NewBusinessTime\",\n          \"caption\": \"New Business\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\"\n        },\n        {\n          \"dataField\": \"AdministrativeTime\",\n          \"caption\": \"Administrative\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\"\n        },\n        {\n          \"dataField\": \"ClientBillableTime\",\n          \"caption\": \"Billable Client\",\n          \"name\": \"BillableClient\",\n          \"alignment\": \"right\",\n          \"format\": \"#,##0\"\n        }\n],\n  \"sortByGroupSummaryInfo\": [\n    {\n      \"summaryItem\": \"count\"\n    }\n  ],\n  \"summary\": {\n    \"calculateCustomSummary\": \"function (options) { \n            if (options.name === 'ContractedVsCapacitySummary') { \n                    if (options.summaryProcess === 'start') { \n                            window.localStorage.setItem('contractedTimeSummary', 0);\n                            options.totalValue = 0; \n                    } \n                    if (options.summaryProcess === 'calculate') { \n                            options.totalValue = options.totalValue + options.value.Capacity; \n                            var total = window.localStorage.getItem('contractedTimeSummary'); \n                            window.localStorage.setItem('contractedTimeSummary', parseInt(total) + parseInt(options.value.ContractedTime)); \n                    } \n                    if (options.summaryProcess === 'finalize') { \n                            var op = (parseInt(window.localStorage.getItem('contractedTimeSummary')) / parseInt(options.totalValue)) * 100; \n                            if(!isFinite(op)) {\n                              options.totalValue = 0;\n                            } else {\n                               options.totalValue = op;\n                            } \n                            window.localStorage.removeItem('contractedTimeSummary');\n                    }\n            } \n            if (options.name === 'BillableVsPlannedVsContractedSummary') { \n                    if (options.summaryProcess === 'start') { \n                            window.localStorage.setItem('contractedTimeSummary2', 0);\n                            options.totalValue = 0;\n                    } \n                    if (options.summaryProcess === 'calculate') { \n                            options.totalValue = options.totalValue + options.value.BillableAndPlannedTime;\n                            var total = window.localStorage.getItem('contractedTimeSummary2');  \n                            window.localStorage.setItem('contractedTimeSummary2', parseInt(total) + parseInt(options.value.ContractedTime));\n                    } \n                    if (options.summaryProcess === 'finalize') { \n                            window.localStorage.getItem('contractedTimeSummary2'); \n                            var op = (parseInt(options.totalValue) / parseInt(window.localStorage.getItem('contractedTimeSummary2'))) * 100;\n                            if(!isFinite(op)) {\n                              options.totalValue = 0;\n                            } else {\n                               options.totalValue = op;\n                            }\n                            window.localStorage.removeItem('contractedTimeSummary2');\n                    } \n            }\n            if (options.name === 'BillableVsPlannedVsCapacitySummary') { \n                    if (options.summaryProcess === 'start') { \n                            window.localStorage.setItem('capacitySummary', 0); \n                            options.totalValue = 0;\n                    } \n                    if (options.summaryProcess === 'calculate') { \n                            options.totalValue = options.totalValue + options.value.BillableAndPlannedTime;\n\n                            var total = window.localStorage.getItem('capacitySummary');  \n                            window.localStorage.setItem('capacitySummary', parseInt(total) + parseInt(options.value.Capacity));\n                    } \n                    if (options.summaryProcess === 'finalize') { \n                            var op = (parseInt(options.totalValue) / parseInt(window.localStorage.getItem('capacitySummary'))) * 100; \n                            if(!isFinite(op)) {\n                              options.totalValue = 0;\n                            } else {\n                               options.totalValue = op;\n                            }\n                            window.localStorage.removeItem('capacitySummary');\n                    }\n            }\n    }\",\n    \"totalItems\": [\n      {\n        \"column\": \"Typology Group\",\n        \"summaryType\": \"count\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"Total: {0}\",\n        \"alignment\": \"left\"\n      },\n      {\n        \"column\": \"Capacity\",\n        \"name\": \"Capacity\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"{0}\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"column\": \"# Heads\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"{0}\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"column\": \"Contracted\",\n        \"name\": \"Contracted\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"{0}\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"column\": \"Planned\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"{0}\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"column\": \"Billable + Planned\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"{0}\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"column\": \"Actual\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"{0}\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"column\": \"Billable\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"{0}\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"column\": \"New Business\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"{0}\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"column\": \"Administrative\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"{0}\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"column\": \"Billable Client\",\n        \"summaryType\": \"sum\",\n        \"valueFormat\": \"#,##0\",\n        \"displayFormat\": \"{0}\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"name\": \"ContractedVsCapacitySummary\",\n        \"showInColumn\": \"CapacityContractedTimeVariation\",\n        \"displayFormat\": \"{0}\",\n        \"valueFormat\": \"#,##0\",\n        \"summaryType\": \"custom\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"name\": \"BillableVsPlannedVsContractedSummary\",\n        \"showInColumn\": \"ContractedBillableAndPlannedVariation\",\n        \"displayFormat\": \"{0}\",\n        \"valueFormat\": \"#,##0\",\n        \"summaryType\": \"custom\",\n        \"alignment\": \"right\"\n      },\n      {\n        \"name\": \"BillableVsPlannedVsCapacitySummary\",\n        \"showInColumn\": \"CapacityBillableAndPlannedVariation\",\n        \"displayFormat\": \"{0}\",\n        \"valueFormat\": \"#,##0\",\n        \"summaryType\": \"custom\",\n        \"alignment\": \"right\"\n      }\n    ]\n  }\n}","DashboardDefinitionId":"1933f5f5-eaf1-4913-85f8-51b34b266a59"},{"Id":"8c2eb1aa-d304-4c62-95d5-70d72b6e5036","Name":"Filters","Active":true,"UseQuery":false,"Query":"","Size":12,"Order":0,"Parameters":"[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"form\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#f0f0f0\",\"WidgetHeight\":30,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]","DashboardComponentType":{"Id":"3c1da83b-efe9-4b70-87d0-c3813a512774","Name":"Generic Dashboard","ComponentTypeNumber":42},"AnalyticsApiUrl":"","Configuration":"{\r\n\"colCount\": 4,\r\n\"items\": [\r\n    {\r\n        \"name\": \"Year\",\r\n        \"dataField\": \"Year\",\r\n        \"editorType\": \"dxNumberBox\",\r\n        \"editorOptions\": {\r\n            \"showSpinButtons\": true,\r\n            \"value\": 2019,\r\n            \"width\": 65,\r\n            \"placeholder\": \"year\",\r\n            \"onContentReady\": \"function(e){ setTimeout(function() { SkillsWorkflow.setDashboardFilter('year', 2019); SkillsWorkflow.setDashboardFilter('companyOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('divisionOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('departmentOid', '00000000-0000-0000-0000-000000000000');}, 500) }\",\r\n            \"onValueChanged\": \"function(e){ if(e.value != null) { SkillsWorkflow.setDashboardFilter('year', e.value); } }\"\r\n        },\r\n        \"noDataText\": \"Please wait...\"\r\n    },\r\n    {\r\n        \"dataField\": \"CompanyId\",\r\n        \"label\": {\r\n            \"text\": \"Company\"\r\n        },\r\n        \"editorType\": \"dxSelectBox\",\r\n        \"editorOptions\": {\r\n            \"width\": 250,\r\n            \"searchEnabled\": true,\r\n            \"dataSource\": {\r\n                \"load\": \"function(loadOptions){ \r\n                            var searchValue = (\r\n                            loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                            var searchTake = (loadOptions.searchValue != null && loadOptions.searchValue != '' ? 10 : 100); \r\n                            return SkillsWorkflow.executeAPI('GET', 'companies/lookup',null,{}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All companies'});return res;})\r\n                }\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET','companies/'+key+'/lookup',null,{}).then( result =>  { return Promise.resolve(result);}) }\"\r\n            },\r\n            \"placeholder\": \"All companies\",\r\n            \"displayExpr\": \"Name\",\r\n            \"valueExpr\": \"Id\",\r\n            \"onValueChanged\": \"function(e){ \r\n                if( e.value != null && e.value != '') {\r\n                    SkillsWorkflow.setDashboardFilter('companyOid', e.value);\r\n                } else {\r\n                    SkillsWorkflow.setDashboardFilter('companyOid', '00000000-0000-0000-0000-000000000000');\r\n                }\r\n                SW.setComponentByValue(e.value, 'DivisionId');\r\n            }\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component,'CompanyId');}\"\r\n        }\r\n    },\r\n    {\r\n        \"dataField\": \"DivisionId\",\r\n        \"label\": {\r\n            \"text\": \"Division\"\r\n        },\r\n        \"editorType\": \"dxSelectBox\",\r\n        \"editorOptions\": {\r\n            \"width\": 250,\r\n            \"searchEnabled\": true,\r\n            \"dataSource\": {\r\n                \"load\": \"function(loadOptions){ \r\n                            let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                            let skip = loadOptions.skip || 0; \r\n                            let take = loadOptions.take || 20; \r\n                            var param = { name:searchValue, skip: skip, take: take}; \r\n                            var companyId = SW.getValueFromComponent('CompanyId'); \r\n                            if (companyId == '00000000-0000-0000-0000-000000000000') {\r\n                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',null,{}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All divisions'});return res;})\r\n                            } else if (companyId != null) { \r\n                                param['companyId'] = companyId;\r\n                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',param,{}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All divisions'});return res;})\r\n                            }\r\n                        }\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET','divisions/'+key+'/lookup',null,{}).then( result =>  { return Promise.resolve(result);})}\"\r\n            },\r\n            \"placeholder\": \"All divisions\",\r\n            \"onValueChanged\": \"function(e){ \r\n                if (e.value != null && e.value != '') {\r\n                    SkillsWorkflow.setDashboardFilter('divisionOid', e.value);\r\n                } else {\r\n                    SkillsWorkflow.setDashboardFilter('divisionOid', '00000000-0000-0000-0000-000000000000');\r\n                }\r\n                SW.setComponentByValue(e.value, 'DepartmentId');\r\n                \r\n            }\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'DivisionId'); }\",\r\n            \"displayExpr\": \"Name\",\r\n            \"valueExpr\": \"Id\",\r\n            \"disabled\": true\r\n        }\r\n    },\r\n    {\r\n        \"dataField\": \"DepartmentId\",\r\n        \"label\": {\r\n            \"text\": \"Department\"\r\n        },\r\n        \"editorType\": \"dxSelectBox\",\r\n        \"editorOptions\": {\r\n            \"width\": 250,\r\n            \"searchEnabled\": true,\r\n            \"dataSource\": {\r\n                \"load\": \"function(loadOptions){ \r\n                    let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : ''); \r\n                    let skip = loadOptions.skip || 0; \r\n                    let take = loadOptions.take || 20;\r\n                    var param = { name: searchValue, skip: skip, take: take }; \r\n                    var divisionId = SW.getValueFromComponent('DivisionId'); \r\n                    var companyId = SW.getValueFromComponent('CompanyId'); \r\n                    if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && companyId != null && companyId != '00000000-0000-0000-0000-000000000000') { \r\n                        param['divisionId'] = divisionId;\r\n                        param['companyId'] = companyId;\r\n                    } \r\n                    return SkillsWorkflow.executeAPI('GET', 'departments',param,{}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All departments'});return res;\r\n                    })\r\n                }\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI('GET', 'departments/' + key, null, {}).then( result =>  { return Promise.resolve(result); } ) }\"\r\n            },\r\n            \"placeholder\": \"All departments\",\r\n            \"onValueChanged\": \"function(e){ \r\n                    if(e.value != null && e.value != '') {\r\n                        SkillsWorkflow.setDashboardFilter('departmentOid', e.value);\r\n                    } else {\r\n                        SkillsWorkflow.setDashboardFilter('departmentOid', '00000000-0000-0000-0000-000000000000');\r\n                    }\r\n            }\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'DepartmentId'); }\",\r\n            \"displayExpr\": \"Name\",\r\n            \"valueExpr\": \"Id\",\r\n            \"disabled\": true\r\n        }\r\n    }]\r\n}\r\n\r\n","DashboardDefinitionId":"1933f5f5-eaf1-4913-85f8-51b34b266a59"}]}
