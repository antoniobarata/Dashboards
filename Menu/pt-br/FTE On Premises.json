{
    "DashboardDefinitionRoles": [
        {
            "AccessRoleId": "37bb1c74-f352-4a97-a363-b442659a92b7",
            "DashboardDefinitionId": "1933f5f5-eaf1-4913-85f8-51b34b266a59",
            "AccessRoleName": "Administrator"
        }
    ],
    "Id": "1933f5f5-eaf1-4913-85f8-51b34b266a59",
    "Name": "FTE Dashboard",
    "Active": true,
    "Location": 0,
    "DocumentId": "00000000-0000-0000-0000-000000000000",
    "DocumentName": "",
    "DocumentTypeName": null,
    "DocumentsConfiguration": null,
    "Templates": [],
    "DashboardDefinitionComponents": [
        {
            "Id": "6c8b5978-43b3-498f-87de-35ec803410cb",
            "Name": "",
            "Active": true,
            "UseQuery": false,
            "Query": "",
            "Size": 12,
            "Order": 0,
            "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"form\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#e0e0e0\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":2,\"WidgetColumns\":48,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
            "DashboardComponentType": {
                "Id": "3c1da83b-efe9-4b70-87d0-c3813a512774",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            },
            "AnalyticsApiUrl": "",
            "Configuration": "{\r\n    \"colCount\": 4,\r\n    \"items\": [\r\n        {\r\n            \"name\": \"Year\",\r\n            \"dataField\": \"Year\",\r\n            \"editorType\": \"dxNumberBox\",\r\n            \"editorOptions\": {\r\n                \"showSpinButtons\": true,\r\n                \"value\": 2020,\r\n                \"width\": 65,\r\n                \"placeholder\": \"year\",\r\n                \"onContentReady\": \"function(e){ setTimeout(function() { SkillsWorkflow.setDashboardFilter(\u0027year\u0027, 2020); SkillsWorkflow.setDashboardFilter(\u0027Company\u0027, \u002700000000-0000-0000-0000-000000000000\u0027); SkillsWorkflow.setDashboardFilter(\u0027Division\u0027, \u002700000000-0000-0000-0000-000000000000\u0027); SkillsWorkflow.setDashboardFilter(\u0027Department\u0027, \u002700000000-0000-0000-0000-000000000000\u0027);}, 1000) }\",\r\n                \"onValueChanged\": \"function(e){ if(e.value != null) { SkillsWorkflow.setDashboardFilter(\u0027year\u0027, e.value); } }\"\r\n            },\r\n            \"noDataText\": \"Please wait...\"\r\n        },\r\n        {\r\n            \"dataField\": \"CompanyId\",\r\n            \"label\": {\r\n                \"text\": \"Company\"\r\n            },\r\n            \"editorType\": \"dxSelectBox\",\r\n            \"editorOptions\": {\r\n                \"width\": 250,\r\n                \"searchEnabled\": true,\r\n                \"dataSource\": {\r\n                    \"load\": \"function(loadOptions){ \r\n                            var searchValue = (\r\n                            loadOptions.searchValue != null ? loadOptions.searchValue : \u0027\u0027); \r\n                            var searchTake = (loadOptions.searchValue != null \u0026\u0026 loadOptions.searchValue != \u0027\u0027 ? 10 : 100); \r\n                            return SkillsWorkflow.getMyCompanies(\u0027\u0027,\r\n                    0,\r\n                    0).then(function(res){ res.push({Id: \u002700000000-0000-0000-0000-000000000000\u0027, Name:\u0027All companies\u0027\r\n                        });return res;\r\n                    });\r\n                }\",\r\n                \"byKey\": \"function(key) { return SW.executeAPI(\u0027GET\u0027,\u0027companies/\u0027+key+\u0027/lookup\u0027,null,{}).then( result =\u003e  { return Promise.resolve(result);}) }\"\r\n            },\r\n            \"placeholder\": \"All companies\",\r\n            \"displayExpr\": \"Name\",\r\n            \"valueExpr\": \"Id\",\r\n            \"onValueChanged\": \"function(e){ \r\n                if( e.value != null \u0026\u0026 e.value != \u0027\u0027 ) {\r\n                    SkillsWorkflow.setDashboardFilter(\u0027Company\u0027, e.value);\r\n            } else {\r\n                    SkillsWorkflow.setDashboardFilter(\u0027Company\u0027, \u002700000000-0000-0000-0000-000000000000\u0027);\r\n            }\r\n                SW.setComponentByValue(e.previousValue, e.value, \u0027DivisionId\u0027);\r\n        }\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component,\u0027CompanyId\u0027);}\"\r\n    }\r\n},\r\n{\r\n    \"dataField\": \"DivisionId\",\r\n    \"label\": {\r\n        \"text\": \"Division\"\r\n    },\r\n    \"editorType\": \"dxSelectBox\",\r\n    \"editorOptions\": {\r\n        \"width\": 250,\r\n        \"searchEnabled\": true,\r\n        \"dataSource\": {\r\n            \"load\": \"function(loadOptions){ \r\n                            let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : \u0027\u0027); \r\n                            let skip = loadOptions.skip || 0; \r\n                            let take = loadOptions.take || 20; \r\n                            var param = { name:searchValue, skip: skip, take: take\r\n            }; \r\n                            var companyId = SW.getValueFromComponent(\u0027CompanyId\u0027); \r\n                            if (companyId == \u002700000000-0000-0000-0000-000000000000\u0027) {\r\n                                return SkillsWorkflow.executeAPI(\u0027GET\u0027, \u0027divisions/lookup\u0027,\r\n                null,\r\n                {}).then(function(res){ res.push({Id: \u002700000000-0000-0000-0000-000000000000\u0027, Name:\u0027All divisions\u0027, CompanyName:\u0027\u0027\r\n                    });return res;\r\n                });\r\n            } else if (companyId != null) { \r\n                                param[\u0027companyId\u0027\r\n                ] = companyId;\r\n                                return SkillsWorkflow.executeAPI(\u0027GET\u0027, \u0027divisions/lookup\u0027,param,\r\n                {}).then(function(res){ res.push({Id: \u002700000000-0000-0000-0000-000000000000\u0027, Name:\u0027All divisions\u0027, CompanyName:\u0027\u0027\r\n                    });return res;\r\n                })\r\n            }\r\n        }\",\r\n            \"byKey\": \"function(key) { return SW.executeAPI(\u0027GET\u0027,\u0027divisions/\u0027+key+\u0027/lookup\u0027,null,{}).then( result =\u003e  { return Promise.resolve(result);})}\"\r\n    },\r\n    \"placeholder\": \"All divisions\",\r\n    \"onValueChanged\": \"function(e){ \r\n                if (e.value != null \u0026\u0026 e.value != \u0027\u0027) {\r\n                    SkillsWorkflow.setDashboardFilter(\u0027Division\u0027, e.value);\r\n    } else {\r\n                    SkillsWorkflow.setDashboardFilter(\u0027Division\u0027, \u002700000000-0000-0000-0000-000000000000\u0027);\r\n    }\r\n                SW.setComponentByValue(e.previousValue, e.value, \u0027DepartmentId\u0027);\r\n}\",\r\n            \"onInitialized\": \"function(e){ SW.saveComponent(e.component, \u0027DivisionId\u0027); }\",\r\n\"itemTemplate\": \"function (data, index, e) {\r\n            SW.setAttribute(e, \u0027\u0027, \u0027class\u0027, \u0027ellipsis\u0027);\r\n            SW.setAttribute(e, data.Name, \u0027style\u0027, \u0027font-weight: bold\u0027);\r\n\r\n            SW.setAttribute(e, \u0027\u0027, \u0027class\u0027, \u0027ellipsis\u0027);\r\n            SW.setAttribute(e, data.CompanyName, \u0027style\u0027, \u0027max-width: 47%; float: left\u0027);\r\n}\",\r\n\"displayExpr\": \"function (data) {  \r\n    if(!data) return \u0027All divisions\u0027; \r\n    if( data.CompanyName \u0026\u0026 data.CompanyName != \u0027\u0027 ) {\r\n        return data.CompanyName + \u0027 - \u0027 + data.Name;\r\n}\r\n    return data.Name;\r\n}\",\r\n\"valueExpr\": \"Id\",\r\n\"disabled\": true\r\n}\r\n},\r\n{\r\n\"dataField\": \"DepartmentId\",\r\n\"label\": {\r\n\"text\": \"Department\"\r\n},\r\n\"editorType\": \"dxSelectBox\",\r\n\"editorOptions\": {\r\n\"width\": 250,\r\n\"searchEnabled\": true,\r\n\"dataSource\": {\r\n\"load\": \"function(loadOptions){ \r\n                    let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : \u0027\u0027); \r\n                    let skip = loadOptions.skip || 0; \r\n                    let take = loadOptions.take || 20;\r\n                    var param = { name: searchValue, skip: skip, take: take\r\n}; \r\n                    var divisionId = SW.getValueFromComponent(\u0027DivisionId\u0027); \r\n                    var companyId = SW.getValueFromComponent(\u0027CompanyId\u0027); \r\n                    if (divisionId != null \u0026\u0026 divisionId != \u002700000000-0000-0000-0000-000000000000\u0027 \u0026\u0026 companyId != null \u0026\u0026 companyId != \u002700000000-0000-0000-0000-000000000000\u0027) { \r\n                        param[\u0027divisionId\u0027\r\n] = divisionId;\r\n                        param[\u0027companyId\u0027\r\n] = companyId;\r\n} else if (divisionId != null \u0026\u0026 divisionId != \u002700000000-0000-0000-0000-000000000000\u0027 \u0026\u0026 (companyId == null || companyId == \u002700000000-0000-0000-0000-000000000000\u0027)) {\r\n                        param[\u0027divisionId\u0027\r\n] = divisionId;\r\n}\r\n                    return SkillsWorkflow.executeAPI(\u0027GET\u0027, \u0027departments\u0027,param,\r\n{}).then(function(res){ res.push({Id: \u002700000000-0000-0000-0000-000000000000\u0027, Name:\u0027All departments\u0027, CompanyName: \u0027\u0027, DivisionName: \u0027\u0027\r\n});return res;\r\n})\r\n}\",\r\n    \"byKey\": \"function(key) { return SW.executeAPI(\u0027GET\u0027, \u0027departments/\u0027 + key, null, {}).then( result =\u003e  { return Promise.resolve(result); } ) }\"\r\n},\r\n\"placeholder\": \"All departments\",\r\n\"onValueChanged\": \"function(e){ \r\n                    if(e.value != null \u0026\u0026 e.value != \u0027\u0027) {\r\n                        SkillsWorkflow.setDashboardFilter(\u0027Department\u0027, e.value);\r\n} else {\r\n                        SkillsWorkflow.setDashboardFilter(\u0027Department\u0027, \u002700000000-0000-0000-0000-000000000000\u0027);\r\n}\r\n}\",\r\n\"onInitialized\": \"function(e){ SW.saveComponent(e.component, \u0027DepartmentId\u0027); }\",\r\n\"onOpened\": \"function (e) {  e.component._popup.option(\u0027width\u0027, 350); }\",\r\n\"itemTemplate\": \"function (data, index, e) {\r\n            debugger;\r\n            \r\n            SW.setAttribute(e, \u0027\u0027, \u0027class\u0027, \u0027ellipsis\u0027);\r\n            SW.setAttribute(e, data.Name, \u0027style\u0027, \u0027font-weight: bold\u0027);\r\n\r\n            SW.setAttribute(e, \u0027\u0027, \u0027class\u0027, \u0027ellipsis\u0027);\r\n            SW.setAttribute(e, data.CompanyName, \u0027style\u0027, \u0027max-width: 47%; float: left\u0027);\r\n\r\n            SW.setAttribute(e, \u0027-\u0027, \u0027style\u0027, \u0027margin: 0px 3px; float: left\u0027);\r\n\r\n            SW.setAttribute(e, \u0027\u0027, \u0027class\u0027, \u0027ellipsis\u0027);\r\n            SW.setAttribute(e, data.DivisionName, \u0027style\u0027, \u0027max-width: 47%; float: left\u0027);\r\n}\",\r\n\"displayExpr\": \"function (data) {\r\n    if(!data) return \u0027All departments\u0027;  \r\n    if( data.CompanyName != \u0027\u0027 \u0026\u0026 data.DivisionName != \u0027\u0027 )\r\n        return data.CompanyName + \u0027 - \u0027 + data.DivisionName + \u0027 - \u0027 + data.Name;\r\n    else if( data.CompanyName != \u0027\u0027 )\r\n        return data.CompanyName + \u0027 - - \u0027 + data.Name;\r\n    else if( data.DivisionName != \u0027\u0027 )\r\n        return data.DivisionName + \u0027 - \u0027 + data.Name;\r\n    return data.Name;\r\n}\",\r\n\"valueExpr\": \"Id\",\r\n\"disabled\": true\r\n}\r\n}\r\n]\r\n}",
            "DashboardDefinitionId": "1933f5f5-eaf1-4913-85f8-51b34b266a59"
        },
        {
            "Id": "8933227b-bdde-4ffb-8156-aa9055063d12",
            "Name": "Visualiza??o de todo o per?odo",
            "Active": true,
            "UseQuery": false,
            "Query": null,
            "Size": 12,
            "Order": 3,
            "Parameters": "[\r\n    {\r\n        \"WidgetSubTitle\": \"Capacidade, Horas Contratadas \u0026 Semanas sem Capacidade o Suficiente\",\r\n        \"WidgetType\": \"rangeselector\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"#e0e0e0\",\r\n        \"WidgetFrameStyle\": {},\r\n        \"WidgetXPosition\": 0,\r\n        \"WidgetYPosition\": 18,\r\n        \"WidgetRows\": 13,\r\n        \"WidgetColumns\": 48,\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"startDate\": \"2018/06/1\",\r\n                \"endDate\": \"2019/06/30\",\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            },\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        },\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"querytext\",\r\n                \"value\": \"select  [Date] - datepart(dw, [Date]) + 1 as Week,\\n        sum(WorkingTime - Holidays - Leaves) as Capacity,\\n        sum(ContractedTime) as ContractedTime,\\n        iif(sum(WorkingTime - Holidays - Leaves - ContractedTime) \u003c 0, sum(WorkingTime - Holidays - Leaves), null) as NotEnoughCapacity\\nfrom    (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        yrd.Day as [Date],\\n                        sum(RequiredHours) as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, Yearday yrd, UserTypology typ\\n                where   datepart(dw, yrd.day) not in (1, 7) and\\n                        typ.oid = ssu.Typology\\n                        and yrd.day \u003e= @FromDate and yrd.day \u003c= @ToDate\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        hld.Date as [Date],\\n                        0 as WorkingTime,\\n                        sum(RequiredHours) as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserTypology typ, Holiday hld\\n                where   datepart(dw, hld.Date) not in (1, 7) and\\n                        typ.oid = ssu.Typology and\\n                        ssu.Company = hld.Company \\n                        and hld.Date \u003e= @FromDate and hld.Date \u003c= @ToDate\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, hld.Date\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        uv.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        sum(RequiredHours) as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserVacation uv, UserTypology typ\\n                where   datepart(dw, uv.Day) not in (1, 7) and\\n                        uv.[User] = ssu.Oid and\\n                        typ.oid = ssu.Typology\\n                        and uv.Day \u003e= @FromDate and uv.Day \u003c= @ToDate\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, uv.Day\\n                union all\\n                select  TypologyGroupOid,\\n                        UserOid,\\n                        [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        sum(ContractedTime) as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    (\\n                            select  edt.UserTypologyGroup as TypologyGroupOid,\\n                                    edt.[User] as UserOid,\\n                                    yrd.Day as [Date],\\n                                    sum(edt.Hours / (datediff(dd, est.[Date], est.Expiration) + 1)) as ContractedTime\\n                            from    Estimate est, EstimateItem eit, EstimateItemDetail edt, YearDay yrd\\n                            where   eit.Estimate = est.Oid and\\n                                    edt.EstimateItem = eit.Oid and\\n                                    yrd.Day between cast(est.[Date] as date) and cast(est.Expiration as date) and\\n                                    edt.Type = 2\\n                                    and [Date] \u003e= @FromDate and [Date] \u003c= @ToDate\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                            group by  est.Oid, edt.UserTypologyGroup, edt.[User], yrd.Day\\n                        ) t\\n                group by TypologyGroupOid, UserOid, [Date]\\n        ) t\\nwhere   Year([Date]) = @year\\ngroup by [Date] - datepart(dw, [Date]) + 1\",\r\n                \"mapping\": \"\"\r\n            }\r\n        },\r\n        \"Filters\": {},\r\n        \"QueryConfiguration\": {\r\n            \"RequiredFilters\": [\r\n                \"year\",\r\n                \"Company\",\r\n                \"Division\",\r\n                \"Department\"\r\n            ]\r\n        }\r\n    }\r\n]",
            "DashboardComponentType": {
                "Id": "3c1da83b-efe9-4b70-87d0-c3813a512774",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            },
            "AnalyticsApiUrl": "globalQuery/FTE - Overtime View/execute",
            "Configuration": "{\n  \"containerBackgroundColor\":\"#e0e0e0\",\n  \"selectedRangeColor\": \"#f5564a\",\n  \"chart\": {\n    \"commonSeriesSettings\": {\n      \"type\": \"steparea\",\n      \"argumentField\": \"Week\"\n    },\n    \"series\": [\n      {\n        \"valueField\": \"Capacity\"\n},\n        {\n         \"valueField\": \"ContractedTime\"\n      },\n      {\n         \"valueField\": \"NotEnoughCapacity\",\n         \"type\":\"scatter\",\n         \"ignoreEmptyPoints\":true,\n        \"color\": \"#da5859\"\n      }\n    ]\n  },\n  \"scale\": {\n    \"minorTickInterval\": \"week\",\n    \"tickInterval\": \"month\",\n    \"valueType\": \"datetime\"\n  },\n  \"sliderMarker\": {\n    \"format\": \"monthAndDay\",\n    \"color\": \"#da5859\"\n  }\n}",
            "DashboardDefinitionId": "1933f5f5-eaf1-4913-85f8-51b34b266a59"
        },
        {
            "Id": "c1455646-8390-40a2-8b68-ba95eadaec6c",
            "Name": "Grupos de Tipologia",
            "Active": true,
            "UseQuery": false,
            "Query": null,
            "Size": 8,
            "Order": 1,
            "Parameters": "[{\"WidgetSubTitle\":\"Equipe, Propostas \u0026 Timesheet\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":18,\"WidgetColumns\":32,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":true,\"metricName\":\"? Delayed To Do\",\"metricFieldValue\":\"DelayedToDoJobsGrandTotal\"},{\"visible\":true,\"metricName\":\"?  Delayed Work in Progress\",\"metricFieldValue\":\"DelayedWorkInProgressJobsGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select  utg.Name as TypologyGroup,\\n        max(UserCount) as UserCount,\\n        sum(WorkingTime - Holidays - Leaves) as Capacity,\\n        sum(Holidays) as Holidays,\\n        sum(Leaves) as Leaves,\\n        sum(ContractedTime) as ContractedTime,\\n        sum(PlannedTime) as PlannedTime,\\n        sum(ActualTime) as ActualTime,\\n        sum(BillableTime) as BillableTime,\\n        sum(NewBusinessTime) as NewBusinessTime,\\n        sum(AdministrativeTime) as AdministrativeTime,\\n        sum(BillableTime + NewBusinessTime) as ClientTime,\\n        sum(WorkingTime - Holidays - Leaves - BillableTime - NewBusinessTime) as CapacityClientTimeVariation,\\n        sum(WorkingTime - Holidays - Leaves - ContractedTime) as CapacityContractedTimeVariation\\nfrom    UserTypologyGroup utg, \\n        (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        count(*) as UserCount\\n                from    [User] ssu, UserTypology typ\\n                where   typ.oid = ssu.Typology \\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup\\n        ) tuc,\\n        (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        yrd.Day as [Date],\\n                        sum(RequiredHours) as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, Yearday yrd, UserTypology typ\\n                where   datepart(dw, yrd.day) not in (1, 7) and\\n                        typ.oid = ssu.Typology\\n                        and (1 != 1 /*[DateFilter]*/ or yrd.Day \u003e= @FromDate and yrd.Day \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        hld.Date as [Date],\\n                        0 as WorkingTime,\\n                        sum(RequiredHours) as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserTypology typ, Holiday hld\\n                where   datepart(dw, hld.Date) not in (1, 7) and\\n                        typ.oid = ssu.Typology and\\n                        ssu.Company = hld.Company \\n                        and (1 != 1 /*[DateFilter]*/ or hld.Date \u003e= @FromDate and hld.Date \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, hld.Date\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        uv.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        sum(RequiredHours) as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserVacation uv, UserTypology typ\\n                where   datepart(dw, uv.Day) not in (1, 7) and\\n                        uv.[User] = ssu.Oid and\\n                        typ.oid = ssu.Typology\\n                        and (1 != 1 /*[DateFilter]*/ or uv.Day \u003e= @FromDate and uv.Day \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, uv.Day\\n                union all\\n                select  TypologyGroupOid,\\n                        UserOid,\\n                        [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        sum(ContractedTime) as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    (\\n                            select  edt.UserTypologyGroup as TypologyGroupOid,\\n                                    edt.[User] as UserOid,\\n                                    yrd.Day as [Date],\\n                                    sum(edt.Hours / (datediff(dd, est.[Date], est.Expiration) + 1)) as ContractedTime\\n                            from    Estimate est, EstimateItem eit, EstimateItemDetail edt, YearDay yrd\\n                            where   eit.Estimate = est.Oid and\\n                                    edt.EstimateItem = eit.Oid and\\n                                    yrd.Day between cast(est.[Date] as date) and cast(est.Expiration as date) and\\n                                    edt.Type = 2\\n                                    and (1 != 1 /*[DateFilter]*/ or yrd.Day \u003e= @FromDate and yrd.Day \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                            group by  est.Oid, edt.UserTypologyGroup, edt.[User], yrd.Day\\n                        ) t\\n                group by TypologyGroupOid, UserOid, [Date]\\n                union all\\n                select  pht.UserTypologyGroup as TypologyGroupOid,\\n                        pht.[User] as UserOid,\\n                        yrd.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        sum((pht.PlannedMinutes / 60) / (datediff(dd, prj.BeginDate, prj.EndDate + 1))) as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    PlannedHoursTotal pht, Project prj, YearDay yrd\\n                where   prj.Oid = pht.Project and\\n                        yrd.Day between cast(prj.BeginDate as date) and cast(prj.EndDate as date)\\n                        and (1 != 1 /*[DateFilter]*/ or yrd.Day \u003e= @FromDate and yrd.Day \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (prj.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (prj.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (pht.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by pht.UserTypologyGroup, pht.[User], yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        sum(DurationHours + DurationMinutes / 60) as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid  \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn \u003e= @FromDate and tim.CreatedOn \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        sum(DurationHours + DurationMinutes / 60) as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is not null and\\n                        (tim.Billable = 1 or tim.Billable is null) \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn \u003e= @FromDate and tim.CreatedOn \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        sum(DurationHours + DurationMinutes / 60) as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is not null and\\n                        not (tim.Billable = 1 or tim.Billable is null)  \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn \u003e= @FromDate and tim.CreatedOn \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        sum(DurationHours + DurationMinutes / 60) as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is null \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn \u003e= @FromDate and tim.CreatedOn \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n        ) t\\nwhere   utg.Oid = t.TypologyGroupOid and\\n        tuc.TypologyGroupOid = utg.Oid \\ngroup by utg.Name\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"startDate\",\"endDate\",\"Company\",\"Division\",\"Department\"]}}]",
            "DashboardComponentType": {
                "Id": "3c1da83b-efe9-4b70-87d0-c3813a512774",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            },
            "AnalyticsApiUrl": "globalQuery/FTE - Typology Groups/execute",
            "Configuration": "{\r\n    \"headerFilter\": {\r\n        \"visible\": true\r\n    },\r\n    \"columnResizingMode\": \"widget\",\r\n    \"allowColumnResizing\": \"true\",\r\n    \"allowFiltering\": true,\r\n    \"columnAutoWidth\": \"true\",\r\n    \"searchPanel\": {\r\n        \"visible\": true\r\n    },\r\n    \"height\": \"370\",\r\n    \"scrolling\": {\r\n        \"mode\": \"virtual\"\r\n    },\r\n    \"columnMinWidth\": \"80\",\r\n    \"columns\": [\r\n        {\r\n            \"dataField\": \"TypologyGroup\",\r\n            \"name\": \"Typology Group\",\r\n            \"caption\": \"Tipologia\",\r\n            \"width\": 300\r\n        },\r\n        {\r\n            \"caption\": \"Staff\",\r\n            \"columns\": [\r\n                {\r\n                    \"dataField\": \"UserCount\",\r\n                    \"caption\": \"# Usu?rio\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\",\r\n                    \"cssClass\": \"dataCell actualHours\"\r\n                },\r\n                {\r\n                    \"dataField\": \"Capacity\",\r\n                    \"caption\": \"Capacidade\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"caption\": \"Propostas \u0026 Projetos\",\r\n            \"columns\": [\r\n                {\r\n                    \"dataField\": \"CapacityContractedTimeVariation\",\r\n                    \"caption\": \"Varia??o\",\r\n                    \"name\": \"Variation\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\",\r\n                    \"cellTemplate\": \"function(e, i) {\r\n                        SW.setRAG(e, i.value, i.value \u003c 0, i.value \u003e= 0 \u0026\u0026 i.value \u003c 50, i.value \u003e= 50);\r\n                    }\"\r\n                },\r\n                {\r\n                    \"dataField\": \"ContractedTime\",\r\n                    \"caption\": \"Contratadas\",\r\n                    \"name\": \"Contracted\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                },\r\n                {\r\n                    \"dataField\": \"PlannedTime\",\r\n                    \"caption\": \"Planejadas\",\r\n                    \"name\": \"Planned\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"caption\": \"Timesheet\",\r\n            \"columns\": [\r\n                {\r\n                    \"dataField\": \"ActualTime\",\r\n                    \"caption\": \"Real\",\r\n                    \"name\": \"Actual\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                },\r\n                {\r\n                    \"dataField\": \"BillableTime\",\r\n                    \"caption\": \"Faturadas\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                },\r\n                {\r\n                    \"dataField\": \"NewBusinessTime\",\r\n                    \"caption\": \"Novos Neg?cios\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                },\r\n                {\r\n                    \"dataField\": \"AdministrativeTime\",\r\n                    \"caption\": \"Administrativo\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"sortByGroupSummaryInfo\": [\r\n        {\r\n            \"summaryItem\": \"count\"\r\n        }\r\n    ],\r\n    \"summary\": {\r\n        \"totalItems\": [\r\n            {\r\n                \"column\": \"Typology Group\",\r\n                \"summaryType\": \"count\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"Total: {0}\",\r\n                \"alignment\": \"left\"\r\n            },\r\n            {\r\n                \"column\": \"Capacity\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            }\r\n        ]\r\n    }\r\n}",
            "DashboardDefinitionId": "1933f5f5-eaf1-4913-85f8-51b34b266a59"
        },
        {
            "Id": "4f48fd18-4e1f-46ca-9649-f61b5cd827f4",
            "Name": "Vis?o Geral",
            "Active": true,
            "UseQuery": false,
            "Query": null,
            "Size": 4,
            "Order": 2,
            "Parameters": "[\r\n    {\r\n        \"WidgetSubTitle\": \"Timesheet \u0026 Capacidade\",\r\n        \"WidgetType\": \"chart\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"\",\r\n        \"WidgetFrameStyle\": {},\r\n        \"WidgetXPosition\": 32,\r\n        \"WidgetYPosition\": 0,\r\n        \"WidgetRows\": 18,\r\n        \"WidgetColumns\": 16,\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            },\r\n            \"WidgetMetrics\": {\r\n                \"visible\": false,\r\n                \"Metrics\": [\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"Total\",\r\n                        \"metricFieldValue\": \"PendingGrandTotal\"\r\n                    }\r\n                ]\r\n            },\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        },\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"querytext\",\r\n                \"value\": \"select  top 20\\n        utg.Name as TypologyGroup,\\n        max(UserCount) as UserCount,\\n        sum(WorkingTime - Holidays - Leaves) as Capacity,\\n        sum(Holidays) as Holidays,\\n        sum(Leaves) as Leaves,\\n        sum(ContractedTime) as ContractedTime,\\n        sum(ActualTime) as ActualTime,\\n        sum(BillableTime) as BillableTime,\\n        sum(NewBusinessTime) as NewBusinessTime,\\n        sum(AdministrativeTime) as AdministrativeTime,\\n        sum(BillableTime + NewBusinessTime) as ClientTime,\\n        sum(WorkingTime - Holidays - Leaves - BillableTime - NewBusinessTime) as CapacityClientTimeVariation,\\n        sum(WorkingTime - Holidays - Leaves - ContractedTime) as CapacityContractedTimeVariation\\nfrom    UserTypologyGroup utg, \\n        (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        count(*) as UserCount\\n                from    [User] ssu, UserTypology typ\\n                where   typ.oid = ssu.Typology \\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup\\n        ) tuc,\\n        (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        yrd.Day as [Date],\\n                        sum(RequiredHours) as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, Yearday yrd, UserTypology typ\\n                where   datepart(dw, yrd.day) not in (1, 7) and\\n                        typ.oid = ssu.Typology\\n                        and (1 != 1 /*[DateFilter]*/ or yrd.Day \u003e= @FromDate and yrd.Day \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        hld.Date as [Date],\\n                        0 as WorkingTime,\\n                        sum(RequiredHours) as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserTypology typ, Holiday hld\\n                where   datepart(dw, hld.Date) not in (1, 7) and\\n                        typ.oid = ssu.Typology and\\n                        ssu.Company = hld.Company \\n                        and (1 != 1 /*[DateFilter]*/ or hld.Date \u003e= @FromDate and hld.Date \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, hld.Date\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        uv.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        sum(RequiredHours) as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserVacation uv, UserTypology typ\\n                where   datepart(dw, uv.Day) not in (1, 7) and\\n                        uv.[User] = ssu.Oid and\\n                        typ.oid = ssu.Typology\\n                        and (1 != 1 /*[DateFilter]*/ or uv.Day \u003e= @FromDate and uv.Day \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, uv.Day\\n                union all\\n                select  TypologyGroupOid,\\n                        UserOid,\\n                        [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        sum(ContractedTime) as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    (\\n                            select  edt.UserTypologyGroup as TypologyGroupOid,\\n                                    edt.[User] as UserOid,\\n                                    yrd.Day as [Date],\\n                                    sum(edt.Hours / (datediff(dd, est.[Date], est.Expiration) + 1)) as ContractedTime\\n                            from    Estimate est, EstimateItem eit, EstimateItemDetail edt, YearDay yrd\\n                            where   eit.Estimate = est.Oid and\\n                                    edt.EstimateItem = eit.Oid and\\n                                    yrd.Day between cast(est.[Date] as date) and cast(est.Expiration as date) and\\n                                    edt.Type = 2\\n                                    and (1 != 1 /*[DateFilter]*/ or yrd.Day \u003e= @FromDate and yrd.Day \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                            group by  est.Oid, edt.UserTypologyGroup, edt.[User], yrd.Day\\n                        ) t\\n                group by TypologyGroupOid, UserOid, [Date]\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        sum(DurationHours + DurationMinutes / 60) as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid  \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn \u003e= @FromDate and tim.CreatedOn \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        sum(DurationHours + DurationMinutes / 60) as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is not null and\\n                        (tim.Billable = 1 or tim.Billable is null) \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn \u003e= @FromDate and tim.CreatedOn \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        sum(DurationHours + DurationMinutes / 60) as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is not null and\\n                        not (tim.Billable = 1 or tim.Billable is null)  \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn \u003e= @FromDate and tim.CreatedOn \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        sum(DurationHours + DurationMinutes / 60) as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is null \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn \u003e= @FromDate and tim.CreatedOn \u003c= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = \u002700000000-0000-0000-0000-000000000000\u0027)\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = \u002700000000-0000-0000-0000-000000000000\u0027)\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n        ) t\\nwhere   utg.Oid = t.TypologyGroupOid and\\n        tuc.TypologyGroupOid = utg.Oid \\ngroup by utg.Name\",\r\n                \"mapping\": \"\"\r\n            }\r\n        },\r\n        \"Filters\": {},\r\n        \"QueryConfiguration\": {\r\n            \"RequiredFilters\": [\r\n                \"startDate\",\r\n                \"endDate\",\r\n                \"Company\",\r\n                \"Division\",\r\n                \"Department\"\r\n            ]\r\n        }\r\n    }\r\n]",
            "DashboardComponentType": {
                "Id": "3c1da83b-efe9-4b70-87d0-c3813a512774",
                "Name": "Generic Dashboard",
                "ComponentTypeNumber": 42
            },
            "AnalyticsApiUrl": "globalQuery/FTE - Timesheet Capacity/execute",
            "Configuration": "{\n  \"size\": {\n    \"height\": 370\n  },\n  \"commonSeriesSettings\": {\n    \"argumentField\": \"TypologyGroup\"\n  },\n  \"panes\": [{\n                \"name\": \"Timesheet\"\n            }, {\n                \"name\": \"Capacity\"\n            }],\n  \"series\": [\n    {\n      \"pane\":\"Timesheet\",\n\n      \"type\": \"bar\",\n      \"valueField\": \"ActualTime\",\n      \"name\": \"Timesheet\"\n    },\n    {\n      \"pane\":\"Timesheet\",\n      \"type\": \"stagger\",\n      \"valueField\": \"BillableTime\",\n      \"name\": \"Faturadas\",\n      \"point\":{\"size\":6 }\n    },\n    {\n      \"pane\":\"Timesheet\",\n      \"type\": \"stagger\",\n      \"valueField\": \"NewBusinessTime\",\n      \"name\": \"Novos Neg?cios\",\n      \"point\":{\"size\":6 }\n    },\n    {\n      \"pane\":\"Capacity\",\n      \"type\": \"bar\",\n      \"valueField\": \"Capacity\",\n      \"name\": \"Capacidade\"\n    },\n    {\n      \"pane\":\"Capacity\",\n      \"type\": \"line\",\n      \"valueField\": \"ContractedTime\",\n      \"name\": \"Contratadas\",\n      \"point\":{\"size\":6 }\n    },\n    {\n      \"pane\":\"Capacity\",\n      \"type\": \"stagger\",\n      \"valueField\": \"AdministrativeTime\",\n      \"name\": \"Administrativo\",\n      \"point\":{\"size\":6 }\n    }\n  ],\n  \"legend\": {\n    \"rowCount\":1,\n    \"verticalAlignment\": \"bottom\",\n    \"horizontalAlignment\": \"center\"\n  }\n}",
            "DashboardDefinitionId": "1933f5f5-eaf1-4913-85f8-51b34b266a59"
        }
    ],
    "QueryText": null,
    "UseStore": false,
    "StoreEntity": null,
    "Version": 2,
    "Default": false
}