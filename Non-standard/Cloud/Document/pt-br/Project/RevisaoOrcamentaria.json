{
  "DashboardDefinitionRoles": [],
  "Id": "5d046645-ce15-4442-952a-3f7c88077f87",
  "Name": "Revis?o Or?ament?ria",
  "Active": true,
  "Location": 1,
  "DocumentId": "00000000-0000-0000-0000-000000000000",
  "DocumentName": "",
  "DocumentTypeName": "project",
  "DocumentsConfiguration": "[{\"entity\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"patch\":{\"endpoint\":\"\",\"model\":[{\"field\":\"\",\"caption\":\"\",\"type\":\"\"}]},\"remove\":{\"endpoint\":\"\"},\"lookup\":{\"endpoint\":\"\"},\"lookupById\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{},\"patch\":{}},\"customDocument\":{\"useCustomStyle\":false,\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemName\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"workspaces\":false},\"fields\":[]}]",
  "Templates": [],
  "DashboardDefinitionComponents": [
    {
      "Id": "28c369cf-70cf-40ed-9b16-17c98879b999",
      "Name": "Custo Incorrido",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 6,
      "Order": 2,
      "Parameters": "[{\"WidgetSubTitle\":\"Realizado / Revisado (A/B) - Realizado Real / Revisado Real (C/D)\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":12,\"WidgetYPosition\":0,\"WidgetRows\":15,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Revenue\",\"metricFieldValue\":\"ForecastSellGrandTotal\"},{\"visible\":true,\"metricName\":\"# Cost\",\"metricFieldValue\":\"ActualCostGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"WITH ProjectData AS\\n(\\n\\tSELECT\\n\\t\\tp.Oid as ProjectId,\\n\\t\\tphp.StartDate,\\n\\t\\tphp.EndDate,\\n\\t\\tDATEFROMPARTS(Year(php.[EndDate]), Month(php.[EndDate]), 1) as [Date],\\n\\t\\tISNULL(e.ProjectTotalCost, 0.0) as ProjectTotalCost,\\n\\t\\tISNULL(e.ProjectTotalIncome, 0.0) as ProjectTotalIncome\\n\\tFROM\\n\\t\\tProject p\\n\\t\\tLEFT OUTER JOIN\\n\\t\\t(\\n\\t\\t\\tSELECT\\n\\t\\t\\t\\te.Project,\\n\\t\\t\\t\\tsum(iif(wst.[Status] = 10 or wst.[Status] = 14, e.ValueWithoutVatCost, 0)) as ProjectTotalCost,\\n\\t\\t\\t\\tsum(iif(wst.[Status] = 10 or wst.[Status] = 14, e.ValueWithVatIncome, 0)) as ProjectTotalIncome\\n\\t\\t\\tFROM\\n\\t\\t\\t\\tEstimate e,\\n\\t\\t\\t\\tWorkflowState wfs,\\n\\t\\t\\t\\tWorkflowStateType wst\\n\\t\\t\\tWHERE\\n\\t\\t\\t\\te.GCRecord is null\\n\\t\\t\\t\\tAND e.Project = @ProjectId\\n\\t\\t\\t\\tAND e.WorkflowState = wfs.Oid\\n\\t\\t\\t\\tAND wfs.WorkflowStateType = wst.Oid\\n\\t\\t\\tGROUP BY \\n\\t\\t\\t\\te.Project\\n\\t\\t) e ON (e.Project = p.Oid),\\n\\t\\tPlannedHoursPeriod php\\n\\tWHERE\\n\\t\\tphp.GCRecord IS NULL\\n\\t\\tAND php.Project = p.Oid\\n\\t\\tAND p.Oid = @ProjectId\\n)\\nSELECT\\n\\tv.ActualHoursCosts,\\n\\tv.[Date],\\n\\tv.EndDate,\\n\\tv.PlannedHoursCosts,\\n\\tv.ProjectId,\\n\\tv.ProjectReviewedForecast,\\n\\tv.ProjectReviewedReal,\\n\\tv.RealizedForecast,\\n\\tv.RealizedReal,\\n\\tv.ReviewedForecastProject,\\n\\tv.ReviewedRealProject,\\n\\tv.StartDate,\\n\\tv.SuppliersHoursCosts,\\n\\tIIF(ISNULL(v.ProjectReviewedForecast, 0.0) \u003e 0, (v.RealizedForecast / v.ProjectReviewedForecast), 0.0) as RealizedPercentage,\\n\\tIIF(ISNULL(v.ProjectReviewedForecast, 0.0) \u003e 0, ((sum(v.RealizedForecast) over (partition by v.ProjectId order by v.[Date] rows unbounded preceding)) / v.ProjectReviewedForecast), 0.0) as RealizedPercentageRunningTotal,\\n\\tIIF(ISNULL(v.ProjectReviewedReal, 0.0) \u003e 0, (v.RealizedReal / v.ProjectReviewedReal), 0.0) as RealizedNoForecastPercentage,\\n\\tIIF(ISNULL(v.ProjectReviewedReal, 0.0) \u003e 0, ((sum(v.RealizedReal) over (partition by v.ProjectId order by v.[Date]  rows unbounded preceding)) / v.ProjectReviewedReal), 0.0) as RealizedNoForecastPercentageRunningTotal\\nFROM\\n(\\n\\tSELECT\\n\\t\\tv.ActualHoursCosts,\\n\\t\\tv.[Date],\\n\\t\\tv.EndDate,\\n\\t\\tv.PlannedHoursCosts,\\n\\t\\tv.ProjectId,\\n\\t\\tv.RealizedForecast,\\n\\t\\tv.RealizedReal,\\n\\t\\tv.ReviewedForecastProject,\\n\\t\\tv.ReviewedRealProject,\\n\\t\\tv.StartDate,\\n\\t\\tv.SuppliersHoursCosts,\\n\\t\\tSUM(v.ReviewedForecastProject) OVER (PARTITION BY v.ProjectId) as ProjectReviewedForecast,\\n\\t\\tSUM(v.ReviewedRealProject) OVER (PARTITION BY v.ProjectId) as ProjectReviewedReal\\n\\tFROM\\n\\t(\\n\\t\\tSELECT\\n\\t\\t\\tv.ProjectId,\\n\\t\\t\\tv.StartDate,\\n\\t\\t\\tv.EndDate,\\n\\t\\t\\tv.[Date],\\n\\t\\t\\tv.ActualHoursCosts,\\n\\t\\t\\tv.PlannedHoursCosts,\\n\\t\\t\\tv.SuppliersHoursCosts,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE \\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\tEND as RealizedForecast,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE \\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\tEND as RealizedReal,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\tEND as ReviewedForecastProject,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\tEND as ReviewedRealProject\\n\\t\\tFROM\\n\\t\\t(\\n\\t\\t\\tSELECT\\n\\t\\t\\t\\tv.ProjectId,\\n\\t\\t\\t\\tv.StartDate,\\n\\t\\t\\t\\tv.EndDate,\\n\\t\\t\\t\\tv.[Date],\\n\\t\\t\\t\\tMAX(v.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\tMAX(v.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\tSUM(ISNULL(v.ActualHoursCosts, 0.0)) as ActualHoursCosts,\\n\\t\\t\\t\\tSUM(ISNULL(v.PlannedHoursCosts, 0.0)) as PlannedHoursCosts,\\n\\t\\t\\t\\tSUM(ISNULL(v.SuppliersCosts, 0.0)) as SuppliersHoursCosts\\n\\t\\t\\tFROM\\n\\t\\t\\t(\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tpj.ProjectTotalCost,\\n\\t\\t\\t\\t\\tpj.ProjectTotalIncome,\\n\\t\\t\\t\\t\\t0.0 as ActualHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as PlannedHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as SuppliersCosts\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tProjectData pj\\n\\t\\t\\t\\tUNION ALL\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\t\\tSUM((ISNULL(t.DurationHours * 60.0 + t.DurationMinutes, 0.0) / 60.0) * ISNULL(ISNULL(ISNULL(phru.Rate, phrut.Rate), tur.Rate), 0.0)) as ActualHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as PlannedHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as SuppliersCosts\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tProjectData pj,\\n\\t\\t\\t\\t\\tTimesheet t\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN [User] u ON (u.Oid = t.CreatedBy)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN [UserTypology] ut on (ut.Oid = u.Typology)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User] as UserId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User]\\n\\t\\t\\t\\t\\t) phru ON (phru.UserId = u.Oid AND phru.Project = t.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup\\n\\t\\t\\t\\t\\t) phrut ON (phrut.UserTypologyGroupId = ut.UserTypologyGroup AND phrut.Project = t.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid as ProjectId,\\n\\t\\t\\t\\t\\t\\t\\tusr.Oid as UserId,\\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(rciv.Cost) as Rate\\n\\t\\t\\t\\t\\t\\tfrom\\t\\n\\t\\t\\t\\t\\t\\t\\tRateCardItemValue rciv, RateCard rc, RateCardColumn rcc, RateCardItem rci, Project p, CommercialClient cc, [User] usr, UserTypology ust\\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid = @ProjectId AND \\n\\t\\t\\t\\t\\t\\t\\tcc.Oid = p.Client AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardColumnSuggestion = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardSuggestion = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trci.RateCard = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tust.Oid = usr.Typology AND\\n\\t\\t\\t\\t\\t\\t\\trci.[UserTypologyGroup] = ust.UserTypologyGroup AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardColumn = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardItem = rci.Oid\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tp.Oid, \\n\\t\\t\\t\\t\\t\\t\\tusr.Oid,\\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup\\n\\t\\t\\t\\t\\t) tur ON (tur.UserId = u.Oid AND tur.UserTypologyGroupId = ut.UserTypologyGroup)\\n\\t\\t\\t\\tWHERE\\n\\t\\t\\t\\t\\tt.StateMachineTimesheetStatus != 3\\n\\t\\t\\t\\t\\tAND (t.DurationHours \u003e 0 or t.DurationMinutes \u003e 0 OR t.DailyAllowance = 1)\\n\\t\\t\\t\\t\\tAND t.Billable = 1\\n\\t\\t\\t\\t\\tAND t.Project = pj.ProjectId\\n\\t\\t\\t\\t\\tAND CAST(t.[Date] as Date) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date]\\n\\t\\t\\t\\tUNION ALL\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\t\\t0.0 as ActualHoursCost,\\n\\t\\t\\t\\t\\tSUM(ISNULL(ISNULL(ISNULL(phru.Rate, phrut.Rate), tur.Rate), 0.0) * (ISNULL(pha.AdjustmentMinutes, 0.0) / 60.0)) as PlannedHoursCost, \\n\\t\\t\\t\\t\\t0.0 as SuppliersCosts\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tProjectData pj,\\n\\t\\t\\t\\t\\tPlannedHoursAdjustment pha\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN [UserTypologyGroup] utg on (utg.Oid = pha.UserTypologyGroup)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User] as UserId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User]\\n\\t\\t\\t\\t\\t) phru ON (phru.UserId = pha.[User] AND phru.Project = pha.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup\\n\\t\\t\\t\\t\\t) phrut ON (phrut.UserTypologyGroupId = utg.Oid AND phrut.Project = pha.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid as ProjectId,\\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(rciv.Cost) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tRateCardItemValue rciv, RateCard rc, RateCardColumn rcc, RateCardItem rci, Project p, CommercialClient cc, [User] usr, UserTypology ust\\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid = @ProjectId AND \\n\\t\\t\\t\\t\\t\\t\\tcc.Oid = p.Client AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardColumnSuggestion = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardSuggestion = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trci.RateCard = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tust.Oid = usr.Typology AND\\n\\t\\t\\t\\t\\t\\t\\trci.[UserTypologyGroup] = ust.UserTypologyGroup AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardColumn = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardItem = rci.Oid\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tp.Oid, \\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup\\n\\t\\t\\t\\t\\t) tur ON (tur.UserTypologyGroupId = utg.Oid)\\n\\t\\t\\t\\tWHERE\\n\\t\\t\\t\\t\\tpha.GCRecord is null\\n\\t\\t\\t\\t\\tAND pha.Project = pj.ProjectId\\n\\t\\t\\t\\t\\tAND CAST(pha.[Date] as Date) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date]\\n\\t\\t\\t\\tUNION ALL\\n\\t\\t\\t\\tSELECT  \\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\t\\t0.0 as ActualHoursCost,\\n\\t\\t\\t\\t\\t0.0 as PlannedHoursCost, \\n\\t\\t\\t\\t\\tSUM(ISNULL(pca.AdjustmentCosts, 0.0)) as SuppliersCosts\\n\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\tProjectData pj,\\n\\t\\t\\t\\t\\tPlannedCostsAdjustment pca, \\n\\t\\t\\t\\t\\tPlannedCostsTotal pct\\n\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\tpca.GCRecord is null\\n\\t\\t\\t\\t\\tAND pct.GCRecord is null\\n\\t\\t\\t\\t\\tAND pct.Oid = pca.PlannedCostsTotal\\n\\t\\t\\t\\t\\tAND pct.Project = pj.ProjectId\\n\\t\\t\\t\\t\\tAND CAST(pca.[Date] as DATE) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date]\\n\\t\\t\\t) v\\n\\t\\t\\tGROUP BY\\n\\t\\t\\t\\tv.ProjectId,\\n\\t\\t\\t\\tv.StartDate,\\n\\t\\t\\t\\tv.EndDate,\\n\\t\\t\\t\\tv.[Date]\\n\\t\\t) v\\n\\t) v\\n) v\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]",
      "DashboardComponentType": {
        "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Revenue_By_Project_Per_Year_Month1/execute",
      "Configuration": "{\n    \"size\": {\n        \"height\": 290\n    },\n    \"resolveLabelOverlapping\": \"none\",\n    \"argumentAxis\": {\n        \"type\": \"discrete\",\n        \"argumentType\": \"datetime\",\n        \"label\": {\n            \"format\": \"monthAndYear\"\n        }\n    },\n    \"commonAxisSettings\": {\n        \"label\": {\n            \"font\": {\n                \"family\": \"Varela Round\"\n            }\n        }\n    },\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"Date\",\n        \"ignoreEmptyPoints\": false,\n        \"label\": {\n            \"font\": {\n                \"family\": \"Varela Round\",\n                \"size\": 10\n            },\n            \"showForZeroValues\": false\n        }\n    },\n    \"tooltip\": {\n        \"format\": {\n            \"type\": \"percent\",\n            \"precision\": 1\n        }\n    },\n    \"legend\": {\n        \"position\": \"inside\",\n        \"horizontalAlignment\": \"left\",\n        \"verticalAlignment\": \"top\",\n        \"margin\": 0,\n        \"backgroundColor\": \"#00000000\",\n        \"visible\": false\n    },\n    \"panes\": [\n        {\n            \"name\": \"Realized (A/B)\"\n        },\n        {\n            \"name\": \"Realized (C/D)\"\n        }\n    ],\n    \"series\": [\n        {\n            \"type\": \"line\",\n            \"valueField\": \"RealizedPercentageRunningTotal\",\n            \"point\": {\n                \"size\": 6\n            },\n            \"name\": \"# % Realizado (A/B)\",\n            \"label\": {\n                \"visible\": true,\n                \"format\": {\n                    \"type\": \"percent\",\n                    \"precision\": 2\n                },\n                \"verticalOffset\": 20\n            },\n            \"pane\": \"Realized (A/B)\"\n        },\n        {\n            \"type\": \"area\",\n            \"valueField\": \"RealizedPercentage\",\n            \"name\": \"% Realizado (A/B)\",\n            \"label\": {\n                \"visible\": true,\n                \"format\": {\n                    \"type\": \"percent\",\n                    \"precision\": 2\n                },\n                \"verticalOffset\": -20\n            },\n            \"pane\": \"Realized (A/B)\"\n        },\n        {\n            \"type\": \"line\",\n            \"valueField\": \"RealizedNoForecastPercentageRunningTotal\",\n            \"point\": {\n                \"size\": 6\n            },\n            \"name\": \"# % Realizado (C/D)\",\n            \"label\": {\n                \"visible\": true,\n                \"format\": {\n                    \"type\": \"percent\",\n                    \"precision\": 2\n                },\n                \"verticalOffset\": 20\n            },\n            \"pane\": \"Realized (C/D)\",\n            \"visible\": true\n        },\n        {\n            \"type\": \"area\",\n            \"valueField\": \"RealizedNoForecastPercentage\",\n            \"name\": \"% Realizado (C/D)\",\n            \"label\": {\n                \"visible\": true,\n                \"format\": {\n                    \"type\": \"percent\",\n                    \"precision\": 2\n                },\n                \"verticalOffset\": -20\n            },\n            \"pane\": \"Realized (C/D)\",\n            \"visible\": true\n        }\n    ],\n    \"valueAxis\": [\n        {\n            \"showZero\": true,\n            \"label\": {\n                \"format\": \"percent\"\n            }\n        }\n    ]\n}",
      "DashboardDefinitionId": "5d046645-ce15-4442-952a-3f7c88077f87"
    },
    {
      "Id": "7e847d9f-4534-413c-8fcc-38424a7f98a0",
      "Name": "Evolu??o de Horas",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 6,
      "Order": 4,
      "Parameters": "[{\"WidgetSubTitle\":\"Forecast vs Horas Realizadas\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":15,\"WidgetRows\":17,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Forecast\",\"metricFieldValue\":\"ForecastTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Factur?vel\",\"metricFieldValue\":\"ActualBillableTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# N?o Factur?vel\",\"metricFieldValue\":\"ActualNonBillableTimeGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"WITH ProjectData AS\\n(\\n\\tSELECT\\n\\t\\tp.Oid as ProjectId,\\n\\t\\tphp.StartDate,\\n\\t\\tphp.EndDate\\n\\tFROM\\n\\t\\tProject p,\\n\\t\\tPlannedHoursPeriod php\\n\\tWHERE\\n\\t\\tphp.GCRecord IS NULL\\n\\t\\tAND php.Project = p.Oid\\n\\t\\tAND p.Oid = @ProjectId\\n)\\nSELECT\\n\\tv.ProjectId,\\n\\tv.StartDate,\\n\\tv.EndDate,\\n\\tCONCAT(FORMAT(Month(v.EndDate), \u00270#\u0027), \u0027/\u0027, Year(v.EndDate)) as MonthYear,\\n\\tv.ActualBillableHours as ActualBillableTime,\\n\\tActualNonBillableHours as ActualNonBillableTime,\\n\\tv.ForecastHours as ForecastTime,\\n\\tSUM(v.ActualBillableHours) over (order by v.ProjectId, v.StartDate, v.EndDate) as ActualBillableTimeRunningTotal,\\n\\tSUM(v.ActualNonBillableHours) over (order by v.ProjectId, v.StartDate, v.EndDate) as ActualNonBillableTimeRunningTotal,\\n\\tSUM(v.ForecastHours) over (order by v.ProjectId, v.StartDate, v.EndDate) as ForecastTimeRunningTotal,\\n\\tSUM(v.ActualBillableHours) over () as ActualBillableTimeGrandTotal,\\n\\tSUM(v.ActualNonBillableHours) over () as ActualNonBillableTimeGrandTotal,\\n\\tSUM(v.ForecastHours) OVER () AS ForecastTimeGrandTotal\\nFROM\\n(\\n\\tSELECT\\n\\t\\tv.ProjectId,\\n\\t\\tv.StartDate,\\n\\t\\tv.EndDate,\\n\\t\\tSUM(v.ActualHours) as ActualHours, \\n\\t\\tSUM(v.ActualBillableHours) as ActualBillableHours, \\n\\t\\tSUM(v.ActualNonBillableHours) as ActualNonBillableHours, \\n\\t\\tSUM(v.ForecastHours) as ForecastHours\\n\\tFROM\\n\\t(\\n\\t\\tSELECT\\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate,\\n\\t\\t\\t0.0 as ActualHours, \\n\\t\\t\\t0.0 as ActualBillableHours, \\n\\t\\t\\t0.0 as ActualNonBillableHours, \\n\\t\\t\\t0.0 as ForecastHours\\n\\t\\tFROM\\n\\t\\t\\tProjectData pj\\n\\t\\tGROUP BY\\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate\\n\\t\\tUNION ALL\\n\\t\\tSELECT\\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate,\\n\\t\\t\\tSUM(ISNULL(t.DurationHours * 60.0 + t.DurationMinutes, 0.0) / 60.0) as ActualHours, \\n\\t\\t\\tSUM(IIF(t.Billable = 1, ISNULL(t.DurationHours * 60.0 + t.DurationMinutes, 0.0) / 60.0, 0.0)) as ActualBillableHours, \\n\\t\\t\\tSUM(IIF(t.Billable = 0, ISNULL(t.DurationHours * 60.0 + t.DurationMinutes, 0.0) / 60.0, 0.0)) as ActualNonBillableHours, \\n\\t\\t\\t0.0 as ForecastHours\\n\\t\\tFROM\\n\\t\\t\\tProjectData pj,\\n\\t\\t\\tTimesheet t\\n\\t\\tWHERE\\n\\t\\t\\tt.StateMachineTimesheetStatus != 3\\n\\t\\t\\tAND (t.DurationHours \u003e 0 or t.DurationMinutes \u003e 0 OR t.DailyAllowance = 1)\\n\\t\\t\\tAND t.Project = pj.ProjectId\\n\\t\\t\\tAND CAST(t.[Date] as Date) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\tGROUP BY\\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate\\n\\t\\tUNION ALL\\n\\t\\tSELECT\\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate,\\n\\t\\t\\t0.0 as ActualHours,\\n\\t\\t\\t0.0 as ActualBillableHours, \\n\\t\\t\\t0.0 as ActualNonBillableHours, \\n\\t\\t\\tSUM(\\n\\t\\t\\t\\tCASE\\n\\t\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e pj.EndDate) THEN \\n\\t\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN pj.StartDate AND pj.EndDate THEN \\n\\t\\t\\t\\t\\t\\t(ISNULL(pha.AdjustmentMinutes, 0.0) / 60.0)\\n\\t\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\t\\t(ISNULL(pha.AdjustmentMinutes, 0.0) / 60.0)\\n\\t\\t\\t\\tEND\\n\\t\\t\\t) AS ForecastHours\\n\\t\\tFROM\\n\\t\\t\\tProjectData pj,\\n\\t\\t\\tPlannedHoursAdjustment pha\\n\\t\\tWHERE\\n\\t\\t\\tpha.GCRecord is null\\n\\t\\t\\tAND pha.Project = pj.ProjectId\\n\\t\\t\\tAND CAST(pha.[Date] as Date) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\tGROUP BY\\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate\\n\\t) v\\n\\tGROUP BY\\n\\t\\tv.ProjectId,\\n\\t\\tv.StartDate,\\n\\t\\tv.EndDate\\n) v\\n\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]",
      "DashboardComponentType": {
        "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_By_Project_Per_Year_Month/execute",
      "Configuration": "{\n    \"size\": {\n        \"height\": 300\n    },\n    \"commonSeriesSettings\": {\n        \"argumentField\": \"MonthYear\",\n        \"ignoreEmptyPoints\": false\n    },\n    \"panes\": [\n        {\n            \"name\": \"accumulated\"\n        },\n        {\n            \"name\": \"monthly\"\n        }\n    ],\n    \"series\": [\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"bar\",\n            \"valueField\": \"ForecastTime\",\n            \"name\": \"Forecast\"\n        },\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualBillableTime\",\n            \"name\": \"Factur?vel\",\n            \"point\": {\n                \"size\": 6\n            }\n        },\n        {\n            \"pane\": \"monthly\",\n            \"axis\": \"monthly\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualNonBillableTime\",\n            \"name\": \"N?o Factur?vel\",\n            \"point\": {\n                \"size\": 6\n            }\n        },\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"bar\",\n            \"valueField\": \"ForecastTimeRunningTotal\",\n            \"name\": \"# Forecast\"\n        },\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualBillableTimeRunningTotal\",\n            \"name\": \"# Factur?vel\",\n            \"point\": {\n                \"size\": 6\n            }\n        },\n        {\n            \"pane\": \"accumulated\",\n            \"axis\": \"accumulated\",\n            \"type\": \"line\",\n            \"valueField\": \"ActualNonBillableTimeRunningTotal\",\n            \"name\": \"# N?o Factur?vel\",\n            \"point\": {\n                \"size\": 6\n            }\n        }\n    ],\n    \"valueAxis\": [\n        {\n            \"name\": \"monthly\",\n            \"position\": \"left\"\n        },\n        {\n            \"name\": \"accumulated\",\n            \"position\": \"left\"\n        }\n    ],\n    \"legend\": {\n        \"rowCount\": 1,\n        \"verticalAlignment\": \"bottom\",\n        \"horizontalAlignment\": \"center\"\n    }\n}",
      "DashboardDefinitionId": "5d046645-ce15-4442-952a-3f7c88077f87"
    },
    {
      "Id": "561289e7-93b7-40d3-ab0b-3ded5ab4e08b",
      "Name": "Evolu??o de Servi?os e Despesas",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 6,
      "Order": 5,
      "Parameters": "[{\"WidgetSubTitle\":\"Forecast vs Custo Realizado\",\"WidgetType\":\"chart\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":24,\"WidgetYPosition\":15,\"WidgetRows\":17,\"WidgetColumns\":24,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Forecast\",\"metricFieldValue\":\"ProjectForecastCosts\"},{\"visible\":true,\"metricName\":\"# Realizado\",\"metricFieldValue\":\"ProjectRealizedCosts\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"WITH ProjectData AS\\n(\\n\\tSELECT\\n\\t\\tp.Oid as ProjectId,\\n\\t\\tphp.StartDate,\\n\\t\\tphp.EndDate\\n\\tFROM\\n\\t\\tProject p,\\n\\t\\tPlannedHoursPeriod php\\n\\tWHERE\\n\\t\\tphp.GCRecord IS NULL\\n\\t\\tAND php.Project = p.Oid\\n\\t\\tAND p.Oid = @ProjectId\\n)\\nSELECT\\n\\tv.ProjectId,\\n\\tv.StartDate,\\n\\tv.EndDate,\\n\\tCONCAT(FORMAT(Month(v.EndDate), \u00270#\u0027), \u0027/\u0027, Year(v.EndDate)) as MonthYear,\\n\\tCASE\\n\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\tv.RealizedSuppliersCosts\\n\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\tv.ForecastSuppliersCosts\\n\\t\\tELSE\\n\\t\\t\\tv.ForecastSuppliersCosts\\n\\tEND AS SuppliersCosts,\\n\\tCASE\\n\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\tv.RealizedExpensesCosts\\n\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\tv.ForecastExpensesCosts\\n\\t\\tELSE\\n\\t\\t\\tv.ForecastExpensesCosts\\n\\tEND AS ExpensesCosts,\\n\\tv.RealizedSuppliersCosts,\\n\\tv.RealizedExpensesCosts,\\n\\tv.ForecastSuppliersCosts,\\n\\tv.ForecastExpensesCosts,\\n\\t(v.RealizedSuppliersCosts + v.RealizedExpensesCosts) AS RealizedSuppliersExpensesCosts,\\n\\tSUM(v.SuppliersCosts) OVER (ORDER BY v.ProjectId, v.StartDate, v.EndDate) AS SuppliersCostsRunningTotal,\\n\\tSUM(v.ExpensesCosts) OVER (ORDER BY v.ProjectId, v.StartDate, v.EndDate) AS ExpensesCostsRunningTotal,\\n\\tSUM(v.RealizedSuppliersCosts + v.RealizedExpensesCosts) OVER () AS ProjectRealizedCosts,\\n\\tSUM(v.ForecastSuppliersCosts + v.ForecastExpensesCosts) OVER () ProjectForecastCosts,\\n\\tSUM(v.RealizedSuppliersCosts + v.RealizedExpensesCosts) OVER (ORDER BY v.ProjectId, v.StartDate, v.EndDate) AS RealizedSuppliersExpensesCostsRunningTotal\\nFROM\\n(\\n\\tSELECT\\n\\t\\tv.ProjectId,\\n\\t\\tv.StartDate,\\n\\t\\tv.EndDate,\\n\\t\\tSUM(v.SuppliersCosts) as SuppliersCosts,\\n\\t\\tSUM(v.ExpensesCosts) as ExpensesCosts,\\n\\t\\tSUM(v.RealizedSuppliersCosts) as RealizedSuppliersCosts,\\n\\t\\tSUM(v.RealizedExpensesCosts) as RealizedExpensesCosts,\\n\\t\\tSUM(v.ForecastSuppliersCosts) as ForecastSuppliersCosts,\\n\\t\\tSUM(v.ForecastExpensesCosts) as ForecastExpensesCosts\\n\\tFROM\\n\\t(\\n\\t\\tSELECT\\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate,\\n\\t\\t\\t0.0 as SuppliersCosts,\\n\\t\\t\\t0.0 as RealizedSuppliersCosts,\\n\\t\\t\\t0.0 as ForecastSuppliersCosts,\\n\\t\\t\\t0.0 as ExpensesCosts,\\n\\t\\t\\t0.0 as RealizedExpensesCosts,\\n\\t\\t\\t0.0 as ForecastExpensesCosts\\n\\t\\tFROM\\n\\t\\t\\tProjectData pj\\n\\t\\tUNION ALL\\n\\t\\tSELECT  \\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate,\\n\\t\\t\\tSUM(ISNULL(pca.AdjustmentCosts, 0.0)) as SuppliersCosts,\\n\\t\\t\\tSUM(\\n\\t\\t\\t\\tCASE\\n\\t\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e pj.EndDate) THEN \\n\\t\\t\\t\\t\\t\\tISNULL(pca.AdjustmentCosts, 0.0)\\n\\t\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN pj.StartDate AND pj.EndDate THEN \\n\\t\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\tEND\\n\\t\\t\\t) AS RealizedSuppliersCosts,\\n\\t\\t\\tSUM(\\n\\t\\t\\t\\tCASE\\n\\t\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e pj.EndDate) THEN \\n\\t\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN pj.StartDate AND pj.EndDate THEN \\n\\t\\t\\t\\t\\t\\tISNULL(pca.AdjustmentCosts, 0.0)\\n\\t\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\t\\tISNULL(pca.AdjustmentCosts, 0.0)\\n\\t\\t\\t\\tEND\\n\\t\\t\\t) AS ForecastSuppliersCosts,\\n\\t\\t\\t0.0 AS ExpensesCosts,\\n\\t\\t\\t0.0 AS RealizedExpensesCosts,\\n\\t\\t\\t0.0 AS ForecastExpensesCosts\\n\\t\\tFROM\\t\\n\\t\\t\\tProjectData pj,\\n\\t\\t\\tPlannedCostsAdjustment pca, \\n\\t\\t\\tPlannedCostsTotal pct\\n\\t\\tWHERE\\t\\n\\t\\t\\tpca.GCRecord is null\\n\\t\\t\\tAND pct.GCRecord is null\\n\\t\\t\\tAND pca.Supplier is not null\\n\\t\\t\\tAND pct.Oid = pca.PlannedCostsTotal\\n\\t\\t\\tAND pct.Project = pj.ProjectId\\n\\t\\t\\tAND CAST(pca.[Date] as DATE) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\tGROUP BY\\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate\\n\\t\\tUNION ALL\\n\\t\\tSELECT  \\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate,\\n\\t\\t\\t0.0 as SuppliersCosts,\\n\\t\\t\\t0.0 as RealizedSuppliersCosts,\\n\\t\\t\\t0.0 as ForecastSuppliersCosts,\\n\\t\\t\\tSUM(ISNULL(pca.AdjustmentCosts, 0.0)) as ExpensesCosts,\\n\\t\\t\\tSUM(\\n\\t\\t\\t\\tCASE\\n\\t\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e pj.EndDate) THEN \\n\\t\\t\\t\\t\\t\\tISNULL(pca.AdjustmentCosts, 0.0)\\n\\t\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN pj.StartDate AND pj.EndDate THEN \\n\\t\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\tEND\\n\\t\\t\\t) AS RealizedExpensesCosts,\\n\\t\\t\\tSUM(\\n\\t\\t\\t\\tCASE\\n\\t\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e pj.EndDate) THEN \\n\\t\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN pj.StartDate AND pj.EndDate THEN \\n\\t\\t\\t\\t\\t\\tISNULL(pca.AdjustmentCosts, 0.0)\\n\\t\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\t\\tISNULL(pca.AdjustmentCosts, 0.0)\\n\\t\\t\\t\\tEND\\n\\t\\t\\t) AS ForecastExpensesCosts\\n\\t\\tFROM\\t\\n\\t\\t\\tProjectData pj,\\n\\t\\t\\tPlannedCostsAdjustment pca, \\n\\t\\t\\tPlannedCostsTotal pct\\n\\t\\tWHERE\\t\\n\\t\\t\\tpca.GCRecord is null\\n\\t\\t\\tAND pct.GCRecord is null\\n\\t\\t\\tAND pca.Supplier is null\\n\\t\\t\\tAND pct.Oid = pca.PlannedCostsTotal\\n\\t\\t\\tAND pct.Project = pj.ProjectId\\n\\t\\t\\tAND CAST(pca.[Date] as DATE) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\tGROUP BY\\n\\t\\t\\tpj.ProjectId,\\n\\t\\t\\tpj.StartDate,\\n\\t\\t\\tpj.EndDate\\n\\t) v\\n\\tGROUP BY\\n\\t\\tv.ProjectId,\\n\\t\\tv.StartDate,\\n\\t\\tv.EndDate\\n) v\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]",
      "DashboardComponentType": {
        "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Services_By_Project_Per_Year_Month/execute",
      "Configuration": "{\n  \"size\": {\n    \"height\": 300\n  },\n  \"commonSeriesSettings\": {\n    \"argumentField\": \"MonthYear\",\n    \"ignoreEmptyPoints\": false,\n    \"type\":\"stackedBar\"\n  },\n  \"panes\": [\n    {\n      \"name\": \"accumulated\"\n    },\n    {\n      \"name\": \"monthly\"\n    }\n  ],\n  \"series\": [\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"valueField\": \"SuppliersCosts\",\n      \"name\": \"Servi?os\"\n    },\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"valueField\": \"ExpensesCosts\",\n      \"name\": \"Despesas\"\n    },\n    {\n      \"pane\": \"monthly\",\n      \"axis\": \"monthly\",\n      \"type\": \"line\",\n      \"valueField\": \"RealizedSuppliersExpensesCosts\",\n      \"name\": \"Realizado\",\n      \"point\": {\n        \"size\": 6\n      }\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"stackedBar\",\n      \"valueField\": \"SuppliersCostsRunningTotal\",\n      \"name\": \"# Servi?os\"\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"stackedBar\",\n      \"valueField\": \"ExpensesCostsRunningTotal\",\n      \"name\": \"# Despesas\"\n    },\n    {\n      \"pane\": \"accumulated\",\n      \"axis\": \"accumulated\",\n      \"type\": \"line\",\n      \"valueField\": \"RealizedSuppliersExpensesCostsRunningTotal\",\n      \"name\": \"# Realizado\",\n      \"point\": {\n        \"size\": 6\n      }\n    }\n  ],\n  \"valueAxis\": [\n    {\n      \"name\": \"monthly\",\n      \"position\": \"left\"\n    },\n    {\n      \"name\": \"accumulated\",\n      \"position\": \"left\"\n    }\n  ],\n  \"legend\": {\n    \"rowCount\": 1,\n    \"verticalAlignment\": \"bottom\",\n    \"horizontalAlignment\": \"center\"\n  },\n  \"tooltip\": {\n    \"format\":\"currency\"\n  }\n}",
      "DashboardDefinitionId": "5d046645-ce15-4442-952a-3f7c88077f87"
    },
    {
      "Id": "b0986410-8484-4e95-aa67-9795d67d0d0f",
      "Name": "Resumo",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 3,
      "Order": 1,
      "Parameters": "[{\"WidgetSubTitle\":\"Situa??o Geral\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":15,\"WidgetColumns\":12,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":false,\"metricName\":\"# Forecast\",\"metricFieldValue\":\"ForecastTimeGrandTotal\"},{\"visible\":false,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"WITH ProjectData AS\\n(\\n\\tSELECT\\n\\t\\tp.Oid as ProjectId,\\n\\t\\tphp.StartDate,\\n\\t\\tphp.EndDate,\\n\\t\\tDATEFROMPARTS(Year(php.[EndDate]), Month(php.[EndDate]), 1) as [Date],\\n\\t\\tISNULL(e.ProjectTotalCost, 0.0) as ProjectTotalCost,\\n\\t\\tISNULL(e.ProjectTotalIncome, 0.0) as ProjectTotalIncome\\n\\tFROM\\n\\t\\tProject p\\n\\t\\tLEFT OUTER JOIN\\n\\t\\t(\\n\\t\\t\\tSELECT\\n\\t\\t\\t\\te.Project,\\n\\t\\t\\t\\tsum(iif(wst.[Status] = 10 or wst.[Status] = 24, e.ValueWithoutVatCost, 0)) as ProjectTotalCost,\\n\\t\\t\\t\\tsum(iif(wst.[Status] = 10 or wst.[Status] = 24, e.ValueWithVatIncome, 0)) as ProjectTotalIncome\\n\\t\\t\\tFROM\\n\\t\\t\\t\\tEstimate e,\\n\\t\\t\\t\\tWorkflowState wfs,\\n\\t\\t\\t\\tWorkflowStateType wst\\n\\t\\t\\tWHERE\\n\\t\\t\\t\\te.GCRecord is null\\n\\t\\t\\t\\tAND e.Project = @ProjectId\\n\\t\\t\\t\\tAND e.WorkflowState = wfs.Oid\\n\\t\\t\\t\\tAND wfs.WorkflowStateType = wst.Oid\\n\\t\\t\\tGROUP BY \\n\\t\\t\\t\\te.Project\\n\\t\\t) e ON (e.Project = p.Oid),\\n\\t\\tPlannedHoursPeriod php\\n\\tWHERE\\n\\t\\tphp.GCRecord IS NULL\\n\\t\\tAND php.Project = p.Oid\\n\\t\\tAND p.Oid = @ProjectId\\n)\\nSELECT\\n\\tv.ProjectId,\\n\\tv.ProjectTotalCost as ProjectTotalCost,\\n\\tv.ProjectTotalIncome as ProjectTotalIncome,\\n\\tv.ProjectRealized as RealizedTotal,\\n\\tv.ProjectReviewed as ReviewedTotal,\\n\\tv.ProjectRealizedNoForecast as RealizedNoForecastTotal,\\n\\tv.ProjectReviewedNoForecast as ReviewedNoForecastTotal,\\n\\tv.ProjectRealizedCurrentPeriodNoForecast as RealizedCurrentPeriodNoForecastTotal,\\n\\tIIF(v.ProjectReviewed \u003e 0.0, (v.ProjectRealized / v.ProjectReviewed), 0.0) as RealizedPercentageTotal,\\n\\tIIF(v.ProjectReviewedNoForecast \u003e 0.0, (v.ProjectRealizedNoForecast / v.ProjectReviewedNoForecast), 0.0) as RealizedNoForecastPercentageTotal,\\n\\tIIF(v.ProjectReviewed \u003e 0.0, (v.ProjectRealizedNoForecast / v.ProjectReviewed), 0.0) as RealizedForecastPercentageTotal,\\n\\tIIF(v.ProjectTotalIncome \u003e 0.0, (v.ProjectRealizedNoForecast / v.ProjectTotalIncome), 0.0) as IncurredPercentageTotal,\\n\\tIIF(v.ProjectReviewedNoForecast \u003e 0.0, (v.ProjectRealizedCurrentPeriodNoForecast / v.ProjectReviewedNoForecast), 0.0) as RealizedCurrentPeriodNoForecastPercentageTotal,\\n\\tIIF(v.ProjectTotalIncome \u003e 0.0, (v.ProjectRealizedCurrentPeriodNoForecast / v.ProjectTotalIncome), 0.0) as IncurredCurrentPeriodPercentageTotal\\nFROM\\n(\\n\\tSELECT\\n\\t\\tv.ProjectId,\\n\\t\\tv.ProjectTotalCost,\\n\\t\\tv.ProjectTotalIncome,\\n\\t\\tSUM(v.Realized) as ProjectRealized,\\n\\t\\tSUM(v.Reviewed) as ProjectReviewed,\\n\\t\\tSUM(v.RealizedNoForecast) as ProjectRealizedNoForecast,\\n\\t\\tSUM(v.ReviewedNoForecast) as ProjectReviewedNoForecast,\\n\\t\\tSUM(v.RealizedCurrentPeriodNoForecast) as ProjectRealizedCurrentPeriodNoForecast\\n\\tFROM\\n\\t(\\n\\t\\tSELECT\\n\\t\\t\\tv.ProjectId,\\n\\t\\t\\tv.StartDate,\\n\\t\\t\\tv.EndDate,\\n\\t\\t\\tv.[Date],\\n\\t\\t\\tv.ProjectTotalCost,\\n\\t\\t\\tv.ProjectTotalIncome,\\n\\t\\t\\tv.ActualHoursCosts,\\n\\t\\t\\tv.PlannedHoursCosts,\\n\\t\\t\\tv.SuppliersHoursCosts,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE \\n\\t\\t\\t\\t\\t0\\n\\t\\t\\tEND as Realized,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\tELSE \\n\\t\\t\\t\\t\\t0\\n\\t\\t\\tEND as RealizedNoForecast,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE \\n\\t\\t\\t\\t\\t0\\n\\t\\t\\tEND as RealizedCurrentPeriodNoForecast,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\tEND as Reviewed,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\tEND as ReviewedNoForecast\\n\\t\\tFROM\\n\\t\\t(\\n\\t\\t\\tSELECT\\n\\t\\t\\t\\tv.ProjectId,\\n\\t\\t\\t\\tv.StartDate,\\n\\t\\t\\t\\tv.EndDate,\\n\\t\\t\\t\\tv.[Date],\\n\\t\\t\\t\\tMAX(v.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\tMAX(v.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\tSUM(ISNULL(v.ActualHoursCosts, 0.0)) as ActualHoursCosts,\\n\\t\\t\\t\\tSUM(ISNULL(v.PlannedHoursCosts, 0.0)) as PlannedHoursCosts,\\n\\t\\t\\t\\tSUM(ISNULL(v.SuppliersCosts, 0.0)) as SuppliersHoursCosts\\n\\t\\t\\tFROM\\n\\t\\t\\t(\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tpj.ProjectTotalCost,\\n\\t\\t\\t\\t\\tpj.ProjectTotalIncome,\\n\\t\\t\\t\\t\\t0.0 as ActualHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as PlannedHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as SuppliersCosts\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tProjectData pj\\n\\t\\t\\t\\tUNION ALL\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\t\\tSUM((ISNULL(t.DurationHours * 60.0 + t.DurationMinutes, 0.0) / 60.0) * ISNULL(ISNULL(ISNULL(phru.Rate, phrut.Rate), tur.Rate), 0.0)) as ActualHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as PlannedHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as SuppliersCosts\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tProjectData pj,\\n\\t\\t\\t\\t\\tTimesheet t\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN [User] u ON (u.Oid = t.CreatedBy)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN [UserTypology] ut on (ut.Oid = u.Typology)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User] as UserId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User]\\n\\t\\t\\t\\t\\t) phru ON (phru.UserId = u.Oid AND phru.Project = t.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup\\n\\t\\t\\t\\t\\t) phrut ON (phrut.UserTypologyGroupId = ut.UserTypologyGroup AND phrut.Project = t.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid as ProjectId,\\n\\t\\t\\t\\t\\t\\t\\tusr.Oid as UserId,\\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(rciv.Cost) as Rate\\n\\t\\t\\t\\t\\t\\tfrom\\t\\n\\t\\t\\t\\t\\t\\t\\tRateCardItemValue rciv, RateCard rc, RateCardColumn rcc, RateCardItem rci, Project p, CommercialClient cc, [User] usr, UserTypology ust\\n\\t\\t\\t\\t\\t\\twhere\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid = @ProjectId AND \\n\\t\\t\\t\\t\\t\\t\\tcc.Oid = p.Client AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardColumnSuggestion = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardSuggestion = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trci.RateCard = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tust.Oid = usr.Typology AND\\n\\t\\t\\t\\t\\t\\t\\trci.[UserTypologyGroup] = ust.UserTypologyGroup AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardColumn = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardItem = rci.Oid\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tp.Oid, \\n\\t\\t\\t\\t\\t\\t\\tusr.Oid,\\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup\\n\\t\\t\\t\\t\\t) tur ON (tur.ProjectId = t.Project AND tur.UserId = u.Oid AND tur.UserTypologyGroupId = ut.UserTypologyGroup)\\n\\t\\t\\t\\tWHERE\\n\\t\\t\\t\\t\\tt.StateMachineTimesheetStatus != 3\\n\\t\\t\\t\\t\\tAND (t.DurationHours \u003e 0 OR t.DurationMinutes \u003e 0 OR t.DailyAllowance = 1)\\n\\t\\t\\t\\t\\tAND t.Billable = 1\\n\\t\\t\\t\\t\\tAND t.Project = pj.ProjectId\\n\\t\\t\\t\\t\\tAND CAST(t.[Date] as Date) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date]\\n\\t\\t\\t\\tUNION ALL\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\t\\t0.0 as ActualHoursCost,\\n\\t\\t\\t\\t\\tSUM(ISNULL(ISNULL(ISNULL(phru.Rate, phrut.Rate), tur.Rate), 0.0) * (ISNULL(pha.AdjustmentMinutes, 0.0) / 60.0)) as PlannedHoursCost, \\n\\t\\t\\t\\t\\t0.0 as SuppliersCosts\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tProjectData pj,\\n\\t\\t\\t\\t\\tPlannedHoursAdjustment pha\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User] as UserId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User]\\n\\t\\t\\t\\t\\t) phru ON (phru.UserId = pha.[User] AND phru.Project = pha.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup\\n\\t\\t\\t\\t\\t) phrut ON (phrut.UserTypologyGroupId = pha.UserTypologyGroup AND phrut.Project = pha.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid as ProjectId,\\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(rciv.Cost) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tRateCardItemValue rciv, RateCard rc, RateCardColumn rcc, RateCardItem rci, Project p, CommercialClient cc, [User] usr, UserTypology ust\\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid = @ProjectId AND \\n\\t\\t\\t\\t\\t\\t\\tcc.Oid = p.Client AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardColumnSuggestion = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardSuggestion = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trci.RateCard = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tust.Oid = usr.Typology AND\\n\\t\\t\\t\\t\\t\\t\\trci.[UserTypologyGroup] = ust.UserTypologyGroup AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardColumn = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardItem = rci.Oid\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tp.Oid, \\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup\\n\\t\\t\\t\\t\\t) tur ON (tur.ProjectId = pha.Project AND tur.UserTypologyGroupId = pha.UserTypologyGroup)\\n\\t\\t\\t\\tWHERE\\n\\t\\t\\t\\t\\tpha.GCRecord is null\\n\\t\\t\\t\\t\\tAND pha.Project = pj.ProjectId\\n\\t\\t\\t\\t\\tAND CAST(pha.[Date] as Date) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date]\\n\\t\\t\\t\\tUNION ALL\\n\\t\\t\\t\\tSELECT  \\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\t\\t0.0 as ActualHoursCost,\\n\\t\\t\\t\\t\\t0.0 as PlannedHoursCost, \\n\\t\\t\\t\\t\\tSUM(ISNULL(pca.AdjustmentCosts, 0.0)) as SuppliersCosts\\n\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\tProjectData pj,\\n\\t\\t\\t\\t\\tPlannedCostsAdjustment pca, \\n\\t\\t\\t\\t\\tPlannedCostsTotal pct\\n\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\tpca.GCRecord is null\\n\\t\\t\\t\\t\\tAND pct.GCRecord is null\\n\\t\\t\\t\\t\\tAND pct.Oid = pca.PlannedCostsTotal\\n\\t\\t\\t\\t\\tAND pct.Project = pj.ProjectId\\n\\t\\t\\t\\t\\tAND CAST(pca.[Date] as DATE) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date]\\n\\t\\t\\t) v\\n\\t\\t\\tGROUP BY\\n\\t\\t\\t\\tv.ProjectId,\\n\\t\\t\\t\\tv.StartDate,\\n\\t\\t\\t\\tv.EndDate,\\n\\t\\t\\t\\tv.[Date]\\n\\t\\t) v\\n\\t) v\\n\\tGROUP BY\\n\\t\\tv.ProjectId,\\n\\t\\tv.ProjectTotalCost,\\n\\t\\tv.ProjectTotalIncome\\n) v\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":null}]",
      "DashboardComponentType": {
        "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Revenue_By_Project_Per_Year_Month1/execute",
      "Configuration": "{\"height\":\"305\",\"columnsAutoWidth\":true,\"showColumnHeaders\":\"true\",\"columnChooser\":{\"enabled\":false},\"searchPanel\":{\"visible\":false},\"groupPanel\":{\"visible\":false},\"onToolbarPreparing\":\"[object Object]\",\"export\":{\"enabled\":false},\"selection\":{\"mode\":\"none\"},\"onContentReady\":\"function(e){  var dataSource = e.component.getDataSource();   if(typeof dataSource === \u0027undefined\u0027)    return;  if(this.r)         return;    var q = dataSource.store().createQuery();    var f = [    {field:\u0027ProjectTotalIncome\u0027,caption:\u0027Total Venda\u0027    },    {field:\u0027ProjectTotalCost\u0027, caption:\u0027Total Compra\u0027    },    {field:\u0027RealizedNoForecastTotal\u0027, caption:\u0027A) Realizado\u0027    },    {field:\u0027ReviewedTotal\u0027, caption:\u0027B) Revisado\u0027    },    {field:\u0027RealizedForecastPercentageTotal\u0027, caption:\u0027% Custo Incorrido (A/B)\u0027    },    {field:\u0027IncurredPercentageTotal\u0027, caption:\u0027% Incorrido (A/Venda)\u0027    },    {field:\u0027RealizedCurrentPeriodNoForecastTotal\u0027, caption:\u0027C) Realizado Real\u0027    },    {field:\u0027ReviewedNoForecastTotal\u0027, caption:\u0027D) Revisado Real\u0027    },    {field:\u0027RealizedCurrentPeriodNoForecastPercentageTotal\u0027, caption:\u0027% Custo Incorrido Real (C/D)\u0027    },    {field:\u0027IncurredCurrentPeriodPercentageTotal\u0027, caption:\u0027% Incorrido Real (C/Venda)\u0027    }  ];     var data = [];     f.map(         function(a){              q.max(a.field).done(                  function(result){                      data.push({MetricName:a.caption, MetricValue:result      });    });  });      console.log(data);      e.component.option(\u0027dataSource\u0027, data);      this.r = true;}\",\"columns\":[{\"dataField\":\"MetricName\",\"caption\":\"R?brica\",\"cellTemplate\":\"function(e, i)       {          if(i.rowIndex == 4 || i.rowIndex == 5 || i.rowIndex == 8 || i.rowIndex == 9)          {            var d = document.createElement(\u0027DIV\u0027);            d.innerHTML = i.text;            d.style.fontWeight = \u0027bold\u0027;             e.appendChild(d);      }         else           {            var d = document.createElement(\u0027DIV\u0027);            d.innerHTML = i.text;            d.className = \u0027dashboard-subtitle\u0027;             e.appendChild(d);      }    }\"},{\"dataField\":\"MetricValue\",\"caption\":\"Valor\",\"calculateDisplayValue\":\"function(r) {            if(r.MetricName==\u0027% Custo Incorrido (A/B)\u0027 || r.MetricName==\u0027% Incorrido (A/Venda)\u0027 || r.MetricName==\u0027% Custo Incorrido Real (C/D)\u0027 || r.MetricName==\u0027% Incorrido Real (C/Venda)\u0027) return r.MetricValue * 100;             else                  return r.MetricValue;  }\",\"cellTemplate\":\"function(e, i) {            if(i.rowIndex == 4 || i.rowIndex == 5 || i.rowIndex == 8 || i.rowIndex == 9)             {              var d = document.createElement(\u0027DIV\u0027);              d.innerHTML = i.text;              d.style.fontWeight = \u0027bold\u0027;               e.appendChild(d);            }            else             {              var d = document.createElement(\u0027DIV\u0027);              d.innerHTML = i.text;              e.appendChild(d);            }    }\",\"format\":\"#,##0.00\"}]}",
      "DashboardDefinitionId": "5d046645-ce15-4442-952a-3f7c88077f87"
    },
    {
      "Id": "98f3b66c-fde5-46df-8d67-aa561a291b32",
      "Name": "% Reconhecimento",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 3,
      "Order": 3,
      "Parameters": "[{\"WidgetSubTitle\":\"Compara??o entre a Proposta, o Revisado e o Realizado\",\"WidgetType\":\"funnel\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":36,\"WidgetYPosition\":0,\"WidgetRows\":15,\"WidgetColumns\":12,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Revenue\",\"metricFieldValue\":\"ForecastSellGrandTotal\"},{\"visible\":true,\"metricName\":\"# Cost\",\"metricFieldValue\":\"ActualCostGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"WITH ProjectData AS\\n(\\n\\tSELECT\\n\\t\\tp.Oid as ProjectId,\\n\\t\\tphp.StartDate,\\n\\t\\tphp.EndDate,\\n\\t\\tDATEFROMPARTS(Year(php.[EndDate]), Month(php.[EndDate]), 1) as [Date],\\n\\t\\tISNULL(e.ProjectTotalCost, 0.0) as ProjectTotalCost,\\n\\t\\tISNULL(e.ProjectTotalIncome, 0.0) as ProjectTotalIncome\\n\\tFROM\\n\\t\\tProject p\\n\\t\\tLEFT OUTER JOIN\\n\\t\\t(\\n\\t\\t\\tSELECT\\n\\t\\t\\t\\te.Project,\\n\\t\\t\\t\\tsum(iif(wst.[Status] = 10 or wst.[Status] = 24, e.ValueWithoutVatCost, 0)) as ProjectTotalCost,\\n\\t\\t\\t\\tsum(iif(wst.[Status] = 10 or wst.[Status] = 24, e.ValueWithVatIncome, 0)) as ProjectTotalIncome\\n\\t\\t\\tFROM\\n\\t\\t\\t\\tEstimate e,\\n\\t\\t\\t\\tWorkflowState wfs,\\n\\t\\t\\t\\tWorkflowStateType wst\\n\\t\\t\\tWHERE\\n\\t\\t\\t\\te.GCRecord is null\\n\\t\\t\\t\\tAND e.Project = @ProjectId\\n\\t\\t\\t\\tAND e.WorkflowState = wfs.Oid\\n\\t\\t\\t\\tAND wfs.WorkflowStateType = wst.Oid\\n\\t\\t\\tGROUP BY \\n\\t\\t\\t\\te.Project\\n\\t\\t) e ON (e.Project = p.Oid),\\n\\t\\tPlannedHoursPeriod php\\n\\tWHERE\\n\\t\\tphp.GCRecord IS NULL\\n\\t\\tAND php.Project = p.Oid\\n\\t\\tAND p.Oid = @ProjectId\\n)\\nSELECT\\n\\tv.ProjectId,\\n\\tv.ProjectTotalCost as ProjectTotalCost,\\n\\tv.ProjectTotalIncome as ProjectTotalIncome,\\n\\tv.ProjectRealized as RealizedTotal,\\n\\tv.ProjectReviewed as ReviewedTotal,\\n\\tv.ProjectRealizedNoForecast as RealizedNoForecastTotal,\\n\\tv.ProjectReviewedNoForecast as ReviewedNoForecastTotal,\\n\\tv.ProjectRealizedCurrentPeriodNoForecast as RealizedCurrentPeriodNoForecastTotal,\\n\\tIIF(v.ProjectReviewed \u003e 0.0, (v.ProjectRealized / v.ProjectReviewed), 0.0) as RealizedPercentageTotal,\\n\\tIIF(v.ProjectReviewedNoForecast \u003e 0.0, (v.ProjectRealizedNoForecast / v.ProjectReviewedNoForecast), 0.0) as RealizedNoForecastPercentageTotal,\\n\\tIIF(v.ProjectReviewed \u003e 0.0, (v.ProjectRealizedNoForecast / v.ProjectReviewed), 0.0) as RealizedForecastPercentageTotal,\\n\\tIIF(v.ProjectTotalIncome \u003e 0.0, (v.ProjectRealizedNoForecast / v.ProjectTotalIncome), 0.0) as IncurredPercentageTotal,\\n\\tIIF(v.ProjectReviewedNoForecast \u003e 0.0, (v.ProjectRealizedCurrentPeriodNoForecast / v.ProjectReviewedNoForecast), 0.0) as RealizedCurrentPeriodNoForecastPercentageTotal,\\n\\tIIF(v.ProjectTotalIncome \u003e 0.0, (v.ProjectRealizedCurrentPeriodNoForecast / v.ProjectTotalIncome), 0.0) as IncurredCurrentPeriodPercentageTotal\\nFROM\\n(\\n\\tSELECT\\n\\t\\tv.ProjectId,\\n\\t\\tv.ProjectTotalCost,\\n\\t\\tv.ProjectTotalIncome,\\n\\t\\tSUM(v.Realized) as ProjectRealized,\\n\\t\\tSUM(v.Reviewed) as ProjectReviewed,\\n\\t\\tSUM(v.RealizedNoForecast) as ProjectRealizedNoForecast,\\n\\t\\tSUM(v.ReviewedNoForecast) as ProjectReviewedNoForecast,\\n\\t\\tSUM(v.RealizedCurrentPeriodNoForecast) as ProjectRealizedCurrentPeriodNoForecast\\n\\tFROM\\n\\t(\\n\\t\\tSELECT\\n\\t\\t\\tv.ProjectId,\\n\\t\\t\\tv.StartDate,\\n\\t\\t\\tv.EndDate,\\n\\t\\t\\tv.[Date],\\n\\t\\t\\tv.ProjectTotalCost,\\n\\t\\t\\tv.ProjectTotalIncome,\\n\\t\\t\\tv.ActualHoursCosts,\\n\\t\\t\\tv.PlannedHoursCosts,\\n\\t\\t\\tv.SuppliersHoursCosts,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE \\n\\t\\t\\t\\t\\t0\\n\\t\\t\\tEND as Realized,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\tELSE \\n\\t\\t\\t\\t\\t0\\n\\t\\t\\tEND as RealizedNoForecast,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts\\n\\t\\t\\t\\tELSE \\n\\t\\t\\t\\t\\t0\\n\\t\\t\\tEND as RealizedCurrentPeriodNoForecast,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\tEND as Reviewed,\\n\\t\\t\\tCASE\\n\\t\\t\\t\\tWHEN (CAST(GETDATE() as DATE) \u003e v.EndDate) THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tWHEN CAST(GETDATE() as DATE) BETWEEN v.StartDate AND v.EndDate THEN \\n\\t\\t\\t\\t\\tv.ActualHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\t\\tELSE\\n\\t\\t\\t\\t\\tv.PlannedHoursCosts + v.SuppliersHoursCosts\\n\\t\\t\\tEND as ReviewedNoForecast\\n\\t\\tFROM\\n\\t\\t(\\n\\t\\t\\tSELECT\\n\\t\\t\\t\\tv.ProjectId,\\n\\t\\t\\t\\tv.StartDate,\\n\\t\\t\\t\\tv.EndDate,\\n\\t\\t\\t\\tv.[Date],\\n\\t\\t\\t\\tMAX(v.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\tMAX(v.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\tSUM(ISNULL(v.ActualHoursCosts, 0.0)) as ActualHoursCosts,\\n\\t\\t\\t\\tSUM(ISNULL(v.PlannedHoursCosts, 0.0)) as PlannedHoursCosts,\\n\\t\\t\\t\\tSUM(ISNULL(v.SuppliersCosts, 0.0)) as SuppliersHoursCosts\\n\\t\\t\\tFROM\\n\\t\\t\\t(\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tpj.ProjectTotalCost,\\n\\t\\t\\t\\t\\tpj.ProjectTotalIncome,\\n\\t\\t\\t\\t\\t0.0 as ActualHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as PlannedHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as SuppliersCosts\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tProjectData pj\\n\\t\\t\\t\\tUNION ALL\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\t\\tSUM((ISNULL(t.DurationHours * 60.0 + t.DurationMinutes, 0.0) / 60.0) * ISNULL(ISNULL(ISNULL(phru.Rate, phrut.Rate), tur.Rate), 0.0)) as ActualHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as PlannedHoursCosts, \\n\\t\\t\\t\\t\\t0.0 as SuppliersCosts\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tProjectData pj,\\n\\t\\t\\t\\t\\tTimesheet t\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN [User] u ON (u.Oid = t.CreatedBy)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN [UserTypology] ut on (ut.Oid = u.Typology)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User] as UserId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User]\\n\\t\\t\\t\\t\\t) phru ON (phru.UserId = u.Oid AND phru.Project = t.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup\\n\\t\\t\\t\\t\\t) phrut ON (phrut.UserTypologyGroupId = ut.UserTypologyGroup AND phrut.Project = t.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid as ProjectId,\\n\\t\\t\\t\\t\\t\\t\\tusr.Oid as UserId,\\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(rciv.Cost) as Rate\\n\\t\\t\\t\\t\\t\\tfrom\\t\\n\\t\\t\\t\\t\\t\\t\\tRateCardItemValue rciv, RateCard rc, RateCardColumn rcc, RateCardItem rci, Project p, CommercialClient cc, [User] usr, UserTypology ust\\n\\t\\t\\t\\t\\t\\twhere\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid = @ProjectId AND \\n\\t\\t\\t\\t\\t\\t\\tcc.Oid = p.Client AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardColumnSuggestion = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardSuggestion = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trci.RateCard = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tust.Oid = usr.Typology AND\\n\\t\\t\\t\\t\\t\\t\\trci.[UserTypologyGroup] = ust.UserTypologyGroup AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardColumn = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardItem = rci.Oid\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tp.Oid, \\n\\t\\t\\t\\t\\t\\t\\tusr.Oid,\\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup\\n\\t\\t\\t\\t\\t) tur ON (tur.ProjectId = t.Project AND tur.UserId = u.Oid AND tur.UserTypologyGroupId = ut.UserTypologyGroup)\\n\\t\\t\\t\\tWHERE\\n\\t\\t\\t\\t\\tt.StateMachineTimesheetStatus != 3\\n\\t\\t\\t\\t\\tAND (t.DurationHours \u003e 0 OR t.DurationMinutes \u003e 0 OR t.DailyAllowance = 1)\\n\\t\\t\\t\\t\\tAND t.Billable = 1\\n\\t\\t\\t\\t\\tAND t.Project = pj.ProjectId\\n\\t\\t\\t\\t\\tAND CAST(t.[Date] as Date) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date]\\n\\t\\t\\t\\tUNION ALL\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\t\\t0.0 as ActualHoursCost,\\n\\t\\t\\t\\t\\tSUM(ISNULL(ISNULL(ISNULL(phru.Rate, phrut.Rate), tur.Rate), 0.0) * (ISNULL(pha.AdjustmentMinutes, 0.0) / 60.0)) as PlannedHoursCost, \\n\\t\\t\\t\\t\\t0.0 as SuppliersCosts\\n\\t\\t\\t\\tFROM\\n\\t\\t\\t\\t\\tProjectData pj,\\n\\t\\t\\t\\t\\tPlannedHoursAdjustment pha\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User] as UserId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.[User]\\n\\t\\t\\t\\t\\t) phru ON (phru.UserId = pha.[User] AND phru.Project = pha.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(plr.SellRate) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tPlannedHoursTotal plr \\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tplr.GCRecord is null\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tplr.Project,\\n\\t\\t\\t\\t\\t\\t\\tplr.UserTypologyGroup\\n\\t\\t\\t\\t\\t) phrut ON (phrut.UserTypologyGroupId = pha.UserTypologyGroup AND phrut.Project = pha.Project)\\n\\t\\t\\t\\t\\tLEFT OUTER JOIN\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tSELECT\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid as ProjectId,\\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup as UserTypologyGroupId,\\n\\t\\t\\t\\t\\t\\t\\tMax(rciv.Cost) as Rate\\n\\t\\t\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\t\\t\\tRateCardItemValue rciv, RateCard rc, RateCardColumn rcc, RateCardItem rci, Project p, CommercialClient cc, [User] usr, UserTypology ust\\n\\t\\t\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\t\\t\\tp.Oid = @ProjectId AND \\n\\t\\t\\t\\t\\t\\t\\tcc.Oid = p.Client AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardColumnSuggestion = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tcc.RateCardSuggestion = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trci.RateCard = rc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\tust.Oid = usr.Typology AND\\n\\t\\t\\t\\t\\t\\t\\trci.[UserTypologyGroup] = ust.UserTypologyGroup AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardColumn = rcc.Oid AND\\n\\t\\t\\t\\t\\t\\t\\trciv.RateCardItem = rci.Oid\\n\\t\\t\\t\\t\\t\\tGROUP BY \\n\\t\\t\\t\\t\\t\\t\\tp.Oid, \\n\\t\\t\\t\\t\\t\\t\\tust.UserTypologyGroup\\n\\t\\t\\t\\t\\t) tur ON (tur.ProjectId = pha.Project AND tur.UserTypologyGroupId = pha.UserTypologyGroup)\\n\\t\\t\\t\\tWHERE\\n\\t\\t\\t\\t\\tpha.GCRecord is null\\n\\t\\t\\t\\t\\tAND pha.Project = pj.ProjectId\\n\\t\\t\\t\\t\\tAND CAST(pha.[Date] as Date) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date]\\n\\t\\t\\t\\tUNION ALL\\n\\t\\t\\t\\tSELECT  \\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date],\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalCost) as ProjectTotalCost,\\n\\t\\t\\t\\t\\tMAX(pj.ProjectTotalIncome) as ProjectTotalIncome,\\n\\t\\t\\t\\t\\t0.0 as ActualHoursCost,\\n\\t\\t\\t\\t\\t0.0 as PlannedHoursCost, \\n\\t\\t\\t\\t\\tSUM(ISNULL(pca.AdjustmentCosts, 0.0)) as SuppliersCosts\\n\\t\\t\\t\\tFROM\\t\\n\\t\\t\\t\\t\\tProjectData pj,\\n\\t\\t\\t\\t\\tPlannedCostsAdjustment pca, \\n\\t\\t\\t\\t\\tPlannedCostsTotal pct\\n\\t\\t\\t\\tWHERE\\t\\n\\t\\t\\t\\t\\tpca.GCRecord is null\\n\\t\\t\\t\\t\\tAND pct.GCRecord is null\\n\\t\\t\\t\\t\\tAND pct.Oid = pca.PlannedCostsTotal\\n\\t\\t\\t\\t\\tAND pct.Project = pj.ProjectId\\n\\t\\t\\t\\t\\tAND CAST(pca.[Date] as DATE) BETWEEN pj.StartDate AND pj.EndDate\\n\\t\\t\\t\\tGROUP BY\\n\\t\\t\\t\\t\\tpj.ProjectId,\\n\\t\\t\\t\\t\\tpj.StartDate,\\n\\t\\t\\t\\t\\tpj.EndDate,\\n\\t\\t\\t\\t\\tpj.[Date]\\n\\t\\t\\t) v\\n\\t\\t\\tGROUP BY\\n\\t\\t\\t\\tv.ProjectId,\\n\\t\\t\\t\\tv.StartDate,\\n\\t\\t\\t\\tv.EndDate,\\n\\t\\t\\t\\tv.[Date]\\n\\t\\t) v\\n\\t) v\\n\\tGROUP BY\\n\\t\\tv.ProjectId,\\n\\t\\tv.ProjectTotalCost,\\n\\t\\tv.ProjectTotalIncome\\n) v\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]",
      "DashboardComponentType": {
        "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Revenue_By_Project_Per_Year_Month1/execute",
      "Configuration": "{\n    \"size\": {\n        \"height\": 290\n    },\n    \"sortData\": false,\n    \"tooltip\": {\n        \"enabled\": true,\n        \"format\": \"currency\"\n    },\n    \"onDrawn\": \"function(e){if(this.r)return;var q = e.component.getDataSource().store().createQuery();var f = [{field:\u0027ProjectTotalCost\u0027,caption:\u0027Total Compra\u0027}, {field:\u0027ReviewedTotal\u0027, caption:\u0027B) Revisado\u0027}, {field:\u0027RealizedNoForecastTotal\u0027, caption:\u0027A) Realizado\u0027}];var data = [];f.map(function(a){q.max(a.field).done(function(result){data.push({MetricName:a.caption, MetricValue:result});});});e.component.option(\u0027dataSource\u0027, data);this.r = true;}\",\n    \"argumentField\": \"MetricName\",\n    \"valueField\": \"MetricValue\",\n    \"item\": {\n        \"border\": {\n            \"visible\": true\n        }\n    },\n    \"label\": {\n        \"visible\": true,\n        \"position\": \"inside\",\n        \"format\": {\n            \"type\": \"currency\",\n            \"precision\": 2\n        },\n        \"font\": {\n            \"family\": \"Varela Round\"\n        },\n        \"backgroundColor\": \"none\",\n        \"customizeText\": \"function(e) {return \u0027\u003cspan\u003e\u0027+e.valueText+\u0027\u003c/span\u003e\u003cbr/\u003e\u0027+e.item.argument;}\"\n    }\n}",
      "DashboardDefinitionId": "5d046645-ce15-4442-952a-3f7c88077f87"
    }
  ],
  "QueryText": "",
  "UseStore": false,
  "StoreEntity": null,
  "Version": 7,
  "Default": false
}
