{
  "DashboardDefinitionRoles": [

  ],
  "Id": "31a58c54-3332-4b91-82e9-7335aca7ad13",
  "Name": "Contract Projects",
  "Active": true,
  "Location": 1,
  "DocumentId": "00000000-0000-0000-0000-000000000000",
  "DocumentName": "",
  "DocumentTypeName": "contract",
  "DocumentsConfiguration": "[{\"entity\":\"\",\"operations\":{\"read\":{\"endpoint\":\"\"},\"update\":{\"endpoint\":\"\",\"model\":{}},\"create\":{\"endpoint\":\"\",\"model\":{}},\"patch\":{\"endpoint\":\"\",\"model\":[{\"field\":\"\",\"caption\":\"\",\"type\":\"\"}]},\"remove\":{\"endpoint\":\"\"},\"lookup\":{\"endpoint\":\"\"},\"lookupById\":{\"endpoint\":\"\"}},\"layout\":{\"create\":{},\"read\":{},\"patch\":{}},\"customDocument\":{\"useCustomStyle\":false,\"mainColor\":\"\",\"secondaryColor\":\"\",\"imageClass\":\"\",\"namePlural\":\"\",\"name\":\"\",\"systemName\":\"\"},\"availableOptions\":{\"feed\":false,\"info\":true,\"files\":false,\"userfields\":false,\"workspaces\":false},\"fields\":[]}]",
  "Templates": [

  ],
  "DashboardDefinitionComponents": [
    {
      "Id": "1f204c29-fd82-4499-9da4-06302b788a33",
      "Name": "Typology Group Contracted Time",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 4,
      "Order": 4,
      "Parameters": "[{\"WidgetSubTitle\":\"Contracted Time\",\"WidgetType\":\"pie\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":32,\"WidgetYPosition\":18,\"WidgetRows\":13.714285714285714,\"WidgetColumns\":16,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Contracted\",\"metricFieldValue\":\"ContractedTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Planned\",\"metricFieldValue\":\"PlannedTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\tv.ActualCost,\\r\\n\\t\\tv.ActualCostGrandTotal,\\r\\n\\t\\tv.ActualCostRunningTotal,\\r\\n\\t\\tv.ActualSell,\\r\\n\\t\\tv.ActualSellGrandTotal,\\r\\n\\t\\tv.ActualSellRunningTotal,\\r\\n\\t\\tv.ActualTime,\\r\\n\\t\\tv.ActualTimeGrandTotal,\\r\\n\\t\\tv.ActualTimeRunningTotal,\\r\\n\\t\\tv.AllocatedSell,\\r\\n\\t\\tv.AllocatedSellGrandTotal,\\r\\n\\t\\tv.AllocatedSellRunningTotal,\\r\\n\\t\\tv.AllocatedTime,\\r\\n\\t\\tv.AllocatedTimeGrandTotal,\\r\\n\\t\\tv.AllocatedTimeRunningTotal,\\r\\n\\t\\tv.ContractedRate,\\r\\n\\t\\tv.ContractedSell,\\r\\n\\t\\tv.ContractedSellGrandTotal,\\r\\n\\t\\tv.ContractedSellRunningTotal,\\r\\n\\t\\tv.ContractedTime,\\r\\n\\t\\tv.ContractedTimeGrandTotal,\\r\\n\\t\\tv.ContractedTimeRunningTotal,\\r\\n\\t\\tv.ForecastSell,\\r\\n\\t\\tv.ForecastSellGrandTotal,\\r\\n\\t\\tv.ForecastSellRunningTotal,\\r\\n\\t\\tv.ForecastTime,\\r\\n\\t\\tv.ForecastTimeGrandTotal,\\r\\n\\t\\tv.ForecastTimeRunningTotal,\\r\\n\\t\\tv.PlannedRate,\\r\\n\\t\\tv.PlannedSell,\\r\\n\\t\\tv.PlannedSellGrandTotal,\\r\\n\\t\\tv.PlannedSellRunningTotal,\\r\\n\\t\\tv.TypologyGroup,\\r\\n\\t\\tv.TypologyGroupId,\\r\\n\\t\\t                                    iif(v.ActualCostGrandTotal > 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage,\\r\\n\\t\\t                                    (v.ForecastSell - v.ActualCost) as ForecastProfit,\\r\\n\\t\\t                                    (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ForecastSellGrandTotal > 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage,\\r\\n\\t\\t                                    (v.PlannedSell - v.ActualCost) as PlannedProfit,\\r\\n\\t\\t                                    (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.PlannedSellGrandTotal > 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage,\\r\\n\\t\\t                                    (v.ContractedSell - v.ActualCost) as ContractedProfit,\\r\\n\\t\\t                                    (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ContractedSellGrandTotal > 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage\\r\\n                                    from\\r\\n                                    (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t    select\\ttg.Oid as TypologyGroupId, \\r\\n                                                tg.[Name] as TypologyGroup,\\r\\n\\t\\t                                        sum(v.ActualHours) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER (ORDER BY tg.[Oid]) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursCost) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER (ORDER BY tg.[Oid]) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursSell) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER (ORDER BY tg.[Oid]) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHours) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER (ORDER BY tg.[Oid]) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHoursSell) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER (ORDER BY tg.[Oid]) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHours) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER (ORDER BY tg.[Oid]) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHoursSell) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY tg.[Oid]) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHours) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER (ORDER BY tg.[Oid]) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHoursSell) as ContractedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER (ORDER BY tg.[Oid]) AS ContractedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal,\\r\\n\\t\\t                                        max(v.ContractedHoursRate) as ContractedRate, \\r\\n\\t\\t                                        sum(v.PlannedHours) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER (ORDER BY tg.[Oid]) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.PlannedHoursSell) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER (ORDER BY tg.[Oid]) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal,\\r\\n\\t\\t                                        max(v.PlannedHoursRate) as PlannedRate \\r\\n                                        from\\tSkillAnalyticsBurnRate v, \\r\\n\\t\\t                                        UserTypologyGroup tg,\\r\\n\\t\\t                                        Project p,\\r\\n\\t\\t                                        CommercialClient cc,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUserUsers_CompanyCompanies uucc\\r\\n                                        where\\tv.ProjectId = p.Oid and \\r\\n\\t\\t                                        p.Client = cc.Oid and\\r\\n                                    \\t        v.UserTypologyGroupId = tg.Oid and \\r\\n\\t\\t                                        v.ProjectId = p.Oid \\r\\n\\t\\t\\t\\t                                /*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/\\r\\n\\t\\t                                        /*[ClientFilter]*/ and cc.Oid = @ClientId /*[/ClientFilter]*/\\r\\n\\t\\t                                        /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tand uucc.Users = @CurrentUserId and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuucc.Companies = p.Company\\r\\n                                        group by tg.Oid,\\r\\n                                                tg.[Name]\\r\\n                                    ) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]",
      "DashboardComponentType": {
        "Id": "1146a3e4-a230-433c-aef4-84b4b3b1a80d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_TypologyGroup/execute",
      "Configuration": "{\n    \"type\": \"doughnut\",\n    \"series\": {\n        \"argumentField\": \"TypologyGroup\",\n        \"valueField\": \"ContractedTime\",\n        \"label\": {\n            \"visible\": false,\n            \"format\": \"fixedPoint\",\n            \"connector\": {\n                \"visible\": true,\n                \"width\": 1\n            }\n        },\n        \"smallValuesGrouping\": {\n            \"mode\": \"topN\",\n            \"topCount\": 10\n        }\n    },\n    \"size\": {\n        \"height\": 200\n    },\n    \"legend\": {\n        \"horizontalAlignment\": \"left\",\n        \"verticalAlignment\": \"middle\",\n        \"itemTextPosition\": \"right\",\n        \"paddingLeftRight\": 0,\n        \"font\": {\n            \"size\": 8\n        }\n    }\n}",
      "DashboardDefinitionId": "31a58c54-3332-4b91-82e9-7335aca7ad13"
    },
    {
      "Id": "ce0500e6-e87d-44ef-aafe-26ed89e4e2c8",
      "Name": "Projects",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 12,
      "Order": 1,
      "Parameters": "[{\"WidgetSubTitle\":\"All Projects\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"ProjectId\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":18,\"WidgetColumns\":48,\"WidgetHeader\":{\"showContextInfo\":false,\"showPeriodChooser\":false,\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Planned\",\"metricFieldValue\":\"PlannedTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Revenue\",\"metricFieldValue\":\"PlannedSellGrandTotal\"},{\"visible\":true,\"metricName\":\"# Cost\",\"metricFieldValue\":\"ActualCostGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\tv.ActualCost,\\r\\n\\t\\tv.ActualCostGrandTotal,\\r\\n\\t\\tv.ActualCostRunningTotal,\\r\\n\\t\\tv.ActualSell,\\r\\n\\t\\tv.ActualSellGrandTotal,\\r\\n\\t\\tv.ActualSellRunningTotal,\\r\\n\\t\\tv.ActualTime,\\r\\n\\t\\tv.ActualTimeGrandTotal,\\r\\n\\t\\tv.ActualTimeRunningTotal,\\r\\n\\t\\tv.AllocatedSell,\\r\\n\\t\\tv.AllocatedSellGrandTotal,\\r\\n\\t\\tv.AllocatedSellRunningTotal,\\r\\n\\t\\tv.AllocatedTime,\\r\\n\\t\\tv.AllocatedTimeGrandTotal,\\r\\n\\t\\tv.AllocatedTimeRunningTotal,\\r\\n\\t\\tv.[Classification],\\r\\n\\t\\tv.ContractedRate,\\r\\n\\t\\tv.ContractedSell,\\r\\n\\t\\tv.ContractedSellGrandTotal,\\r\\n\\t\\tv.ContractedSellRunningTotal,\\r\\n\\t\\tv.ContractedTime,\\r\\n\\t\\tv.ContractedTimeGrandTotal,\\r\\n\\t\\tv.ContractedTimeRunningTotal,\\r\\n\\t\\tv.ForecastSell,\\r\\n\\t\\tv.ForecastSellGrandTotal,\\r\\n\\t\\tv.ForecastSellRunningTotal,\\r\\n\\t\\tv.ForecastTime,\\r\\n\\t\\tv.ForecastTimeGrandTotal,\\r\\n\\t\\tv.ForecastTimeRunningTotal,\\r\\n\\t\\tv.PlannedRate,\\r\\n\\t\\tv.PlannedSell,\\r\\n\\t\\tv.PlannedSellGrandTotal,\\r\\n\\t\\tv.PlannedSellRunningTotal,\\r\\n\\t\\tv.Project,\\r\\n\\t\\tv.ProjectId,\\r\\n\\t\\tv.Stage,\\r\\n\\t\\tv.StageColor,\\r\\n\\t\\tv.[Type],\\r\\n\\r\\n\\t\\t                                    iif(v.ActualCostGrandTotal > 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage,\\r\\n\\t\\t                                    (v.ForecastSell - v.ActualCost) as ForecastProfit,\\r\\n\\t\\t                                    (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ForecastSellGrandTotal > 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage,\\r\\n\\t\\t                                    (v.PlannedSell - v.ActualCost) as PlannedProfit,\\r\\n\\t\\t                                    (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.PlannedSellGrandTotal > 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage,\\r\\n\\t\\t                                    (v.ContractedSell - v.ActualCost) as ContractedProfit,\\r\\n\\t\\t                                    (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ContractedSellGrandTotal > 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage\\r\\n                                    from\\r\\n                                    (\\r\\n                                        select\\tp.Oid as ProjectId,\\r\\n                                                p.[Name] as Project,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ws.[Name] as Stage,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ws.[Color] as StageColor, \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pc.[Name] as Classification,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pn.[Name] as [Type],\\r\\n\\t\\t\\t\\t                                sum(v.ActualHours) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER (ORDER BY p.[Oid]) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursCost) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER (ORDER BY p.[Oid]) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursSell) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER (ORDER BY p.[Oid]) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHours) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER (ORDER BY p.[Oid]) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHoursSell) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER (ORDER BY p.[Oid]) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHours) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER (ORDER BY p.[Oid]) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHoursSell) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY p.[Oid]) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHours) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER (ORDER BY p.[Oid]) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHoursSell) as ContractedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER (ORDER BY p.[Oid]) AS ContractedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal,\\r\\n\\t\\t                                        max(v.ContractedHoursRate) as ContractedRate, \\r\\n\\t\\t                                        sum(v.PlannedHours) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER (ORDER BY p.[Oid]) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.PlannedHoursSell) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER (ORDER BY p.[Oid]) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal,\\r\\n\\t\\t                                        max(v.PlannedHoursRate) as PlannedRate \\r\\n                                        from\\tSkillAnalyticsBurnRate v, \\r\\n\\t\\t                                        Project p,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    WorkflowState ws,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ProjectClassification pc,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ProjectNature pn,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUserUsers_CompanyCompanies uucc\\r\\n                                        where\\tv.ProjectId = p.Oid and \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ws.Oid = p.WorkflowState and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pc.Oid = p.Classification and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pn.Oid = p.ProjectNature\\r\\n\\t\\t\\t\\t                                --/*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/\\r\\n\\t\\t                                        --/*[ClientFilter]*/ and p.Client = @ClientId /*[/ClientFilter]*/\\r\\n\\t\\t                                        --/*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tand uucc.Users = @CurrentUserId and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuucc.Companies = p.Company\\r\\n                                        group by p.Oid,\\r\\n                                                p.[Name],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ws.[Name],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    ws.[Color], \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pc.[Name],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    pn.[Name]\\r\\n                                    ) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"Sort\":{\"Type\":1,\"FieldName\":\"MonthYearNumber\"}}}]",
      "DashboardComponentType": {
        "Id": "1146a3e4-a230-433c-aef4-84b4b3b1a80d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_Project/execute",
      "Configuration": "{\"selection\":{\"mode\":\"single\"},\"height\":\"325\",\"columnsAutoWidth\":true,\"allowColumnResizing\":\"true\",\"columnResizingMode\":\"nextColumn\",\"columnMinWidth\":\"50\",\"scrolling\":{\"mode\":\"virtual\"},\"columns\":[\"Project\",{\"dataField\":\"ActualTime\",\"caption\":\"Actual\",\"format\":\"#,##0.00\"},{\"dataField\":\"ActualCost\",\"caption\":\"Cost\",\"format\":{\"type\":\"currency\",\"precision\":2}},{\"dataField\":\"PlannedTime\",\"caption\":\"Planned\",\"format\":\"#,##0.00\"},{\"dataField\":\"PlannedSell\",\"caption\":\"Planned Revenue\",\"format\":{\"type\":\"currency\",\"precision\":2}},{\"dataField\":\"PlannedProfitPercentage\",\"caption\":\"Contribution Margin %\",\"dataType\":\"number\",\"format\":\"0.00 '%'\"},{\"dataField\":\"ContractedTime\",\"caption\":\"Contracted\",\"format\":\"#,##0.00\"}],\"summary\":{\"totalItems\":[{\"column\":\"Project\",\"summaryType\":\"count\"},{\"column\":\"ActualTime\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"ActualCost\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"},{\"column\":\"PlannedTime\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"},{\"column\":\"PlannedSell\",\"summaryType\":\"sum\",\"valueFormat\":{\"type\":\"currency\",\"precision\":2},\"displayFormat\":\"{0}\"},{\"column\":\"ContractedTime\",\"summaryType\":\"sum\",\"valueFormat\":\"#,##0.00\",\"displayFormat\":\"{0}\"}]}}",
      "DashboardDefinitionId": "31a58c54-3332-4b91-82e9-7335aca7ad13"
    },
    {
      "Id": "17c4eb0d-5c6c-4656-8d35-825a1ec4e5a7",
      "Name": "Typology Group Actual Time",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 4,
      "Order": 3,
      "Parameters": "[{\"WidgetSubTitle\":\"Actual Time\",\"WidgetType\":\"pie\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":16,\"WidgetYPosition\":18,\"WidgetRows\":13.714285714285714,\"WidgetColumns\":16,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Planned\",\"metricFieldValue\":\"PlannedTimeGrandTotal\"},{\"visible\":true,\"metricName\":\"# Actual\",\"metricFieldValue\":\"ActualTimeGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\tv.ActualCost,\\r\\n\\t\\tv.ActualCostGrandTotal,\\r\\n\\t\\tv.ActualCostRunningTotal,\\r\\n\\t\\tv.ActualSell,\\r\\n\\t\\tv.ActualSellGrandTotal,\\r\\n\\t\\tv.ActualSellRunningTotal,\\r\\n\\t\\tv.ActualTime,\\r\\n\\t\\tv.ActualTimeGrandTotal,\\r\\n\\t\\tv.ActualTimeRunningTotal,\\r\\n\\t\\tv.AllocatedSell,\\r\\n\\t\\tv.AllocatedSellGrandTotal,\\r\\n\\t\\tv.AllocatedSellRunningTotal,\\r\\n\\t\\tv.AllocatedTime,\\r\\n\\t\\tv.AllocatedTimeGrandTotal,\\r\\n\\t\\tv.AllocatedTimeRunningTotal,\\r\\n\\t\\tv.ContractedRate,\\r\\n\\t\\tv.ContractedSell,\\r\\n\\t\\tv.ContractedSellGrandTotal,\\r\\n\\t\\tv.ContractedSellRunningTotal,\\r\\n\\t\\tv.ContractedTime,\\r\\n\\t\\tv.ContractedTimeGrandTotal,\\r\\n\\t\\tv.ContractedTimeRunningTotal,\\r\\n\\t\\tv.ForecastSell,\\r\\n\\t\\tv.ForecastSellGrandTotal,\\r\\n\\t\\tv.ForecastSellRunningTotal,\\r\\n\\t\\tv.ForecastTime,\\r\\n\\t\\tv.ForecastTimeGrandTotal,\\r\\n\\t\\tv.ForecastTimeRunningTotal,\\r\\n\\t\\tv.PlannedRate,\\r\\n\\t\\tv.PlannedSell,\\r\\n\\t\\tv.PlannedSellGrandTotal,\\r\\n\\t\\tv.PlannedSellRunningTotal,\\r\\n\\t\\tv.TypologyGroup,\\r\\n\\t\\tv.TypologyGroupId,\\r\\n\\t\\t                                    iif(v.ActualCostGrandTotal > 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage,\\r\\n\\t\\t                                    (v.ForecastSell - v.ActualCost) as ForecastProfit,\\r\\n\\t\\t                                    (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ForecastSellGrandTotal > 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage,\\r\\n\\t\\t                                    (v.PlannedSell - v.ActualCost) as PlannedProfit,\\r\\n\\t\\t                                    (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.PlannedSellGrandTotal > 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage,\\r\\n\\t\\t                                    (v.ContractedSell - v.ActualCost) as ContractedProfit,\\r\\n\\t\\t                                    (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ContractedSellGrandTotal > 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage\\r\\n                                    from\\r\\n                                    (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t    select\\ttg.Oid as TypologyGroupId, \\r\\n                                                tg.[Name] as TypologyGroup,\\r\\n\\t\\t                                        sum(v.ActualHours) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER (ORDER BY tg.[Oid]) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursCost) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER (ORDER BY tg.[Oid]) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursSell) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER (ORDER BY tg.[Oid]) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHours) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER (ORDER BY tg.[Oid]) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHoursSell) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER (ORDER BY tg.[Oid]) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHours) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER (ORDER BY tg.[Oid]) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHoursSell) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY tg.[Oid]) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHours) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER (ORDER BY tg.[Oid]) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHoursSell) as ContractedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER (ORDER BY tg.[Oid]) AS ContractedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal,\\r\\n\\t\\t                                        max(v.ContractedHoursRate) as ContractedRate, \\r\\n\\t\\t                                        sum(v.PlannedHours) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER (ORDER BY tg.[Oid]) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.PlannedHoursSell) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER (ORDER BY tg.[Oid]) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal,\\r\\n\\t\\t                                        max(v.PlannedHoursRate) as PlannedRate \\r\\n                                        from\\tSkillAnalyticsBurnRate v, \\r\\n\\t\\t                                        UserTypologyGroup tg,\\r\\n\\t\\t                                        Project p,\\r\\n\\t\\t                                        CommercialClient cc,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUserUsers_CompanyCompanies uucc\\r\\n                                        where\\tv.ProjectId = p.Oid and \\r\\n\\t\\t                                        p.Client = cc.Oid and\\r\\n                                    \\t        v.UserTypologyGroupId = tg.Oid and \\r\\n\\t\\t                                        v.ProjectId = p.Oid \\r\\n\\t\\t\\t\\t                                /*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/\\r\\n\\t\\t                                        /*[ClientFilter]*/ and cc.Oid = @ClientId /*[/ClientFilter]*/\\r\\n\\t\\t                                        /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tand uucc.Users = @CurrentUserId and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuucc.Companies = p.Company\\r\\n                                        group by tg.Oid,\\r\\n                                                tg.[Name]\\r\\n                                    ) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]",
      "DashboardComponentType": {
        "Id": "1146a3e4-a230-433c-aef4-84b4b3b1a80d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_TypologyGroup/execute",
      "Configuration": "{\n    \"type\": \"doughnut\",\n    \"series\": {\n        \"argumentField\": \"TypologyGroup\",\n        \"valueField\": \"ActualTime\",\n        \"label\": {\n            \"visible\": false,\n            \"format\": \"fixedPoint\",\n            \"connector\": {\n                \"visible\": true,\n                \"width\": 1\n            }\n        },\n        \"smallValuesGrouping\": {\n            \"mode\": \"topN\",\n            \"topCount\": 10\n        }\n    },\n    \"size\": {\n        \"height\": 200\n    },\n    \"legend\": {\n        \"horizontalAlignment\": \"left\",\n        \"verticalAlignment\": \"middle\",\n        \"itemTextPosition\": \"right\",\n        \"paddingLeftRight\": 0,\n        \"font\": {\n            \"size\": 8\n        }\n    }\n}",
      "DashboardDefinitionId": "31a58c54-3332-4b91-82e9-7335aca7ad13"
    },
    {
      "Id": "ea4f7ff2-ab98-4e8b-9aaf-e46419b7e15a",
      "Name": "Typology Group Planned Time",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 4,
      "Order": 2,
      "Parameters": "[{\"WidgetSubTitle\":\"Planned Time\",\"WidgetType\":\"pie\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#efefef\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":18,\"WidgetRows\":13.714285714285714,\"WidgetColumns\":16,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":true,\"Metrics\":[{\"visible\":true,\"metricName\":\"# Planned\",\"metricFieldValue\":\"PlannedTimeGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\tv.ActualCost,\\r\\n\\t\\tv.ActualCostGrandTotal,\\r\\n\\t\\tv.ActualCostRunningTotal,\\r\\n\\t\\tv.ActualSell,\\r\\n\\t\\tv.ActualSellGrandTotal,\\r\\n\\t\\tv.ActualSellRunningTotal,\\r\\n\\t\\tv.ActualTime,\\r\\n\\t\\tv.ActualTimeGrandTotal,\\r\\n\\t\\tv.ActualTimeRunningTotal,\\r\\n\\t\\tv.AllocatedSell,\\r\\n\\t\\tv.AllocatedSellGrandTotal,\\r\\n\\t\\tv.AllocatedSellRunningTotal,\\r\\n\\t\\tv.AllocatedTime,\\r\\n\\t\\tv.AllocatedTimeGrandTotal,\\r\\n\\t\\tv.AllocatedTimeRunningTotal,\\r\\n\\t\\tv.ContractedRate,\\r\\n\\t\\tv.ContractedSell,\\r\\n\\t\\tv.ContractedSellGrandTotal,\\r\\n\\t\\tv.ContractedSellRunningTotal,\\r\\n\\t\\tv.ContractedTime,\\r\\n\\t\\tv.ContractedTimeGrandTotal,\\r\\n\\t\\tv.ContractedTimeRunningTotal,\\r\\n\\t\\tv.ForecastSell,\\r\\n\\t\\tv.ForecastSellGrandTotal,\\r\\n\\t\\tv.ForecastSellRunningTotal,\\r\\n\\t\\tv.ForecastTime,\\r\\n\\t\\tv.ForecastTimeGrandTotal,\\r\\n\\t\\tv.ForecastTimeRunningTotal,\\r\\n\\t\\tv.PlannedRate,\\r\\n\\t\\tv.PlannedSell,\\r\\n\\t\\tv.PlannedSellGrandTotal,\\r\\n\\t\\tv.PlannedSellRunningTotal,\\r\\n\\t\\tv.TypologyGroup,\\r\\n\\t\\tv.TypologyGroupId,\\r\\n\\t\\t                                    iif(v.ActualCostGrandTotal > 0, (v.ActualCost / v.ActualCostGrandTotal), 0) * 100.0 as ActualCostPercentage,\\r\\n\\t\\t                                    (v.ForecastSell - v.ActualCost) as ForecastProfit,\\r\\n\\t\\t                                    (v.ForecastSellGrandTotal - v.ActualCostGrandTotal) as ForecastProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ForecastProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ForecastSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ForecastSell - v.ActualCost) / (v.ForecastSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ForecastSell - v.ActualCost) DESC) * 100.0 as ForecastProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ForecastSellGrandTotal > 0, (v.ForecastSell / v.ForecastSellGrandTotal), 0) * 100.0 as ForecastSellPercentage,\\r\\n\\t\\t                                    (v.PlannedSell - v.ActualCost) as PlannedProfit,\\r\\n\\t\\t                                    (v.PlannedSellGrandTotal - v.ActualCostGrandTotal) as PlannedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as PlannedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.PlannedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.PlannedSell - v.ActualCost) / (v.PlannedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.PlannedSell - v.ActualCost) DESC) * 100.0 as PlannedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.PlannedSellGrandTotal > 0, (v.PlannedSell / v.PlannedSellGrandTotal), 0) * 100.0 as PlannedSellPercentage,\\r\\n\\t\\t                                    (v.ContractedSell - v.ActualCost) as ContractedProfit,\\r\\n\\t\\t                                    (v.ContractedSellGrandTotal - v.ActualCostGrandTotal) as ContractedProfitGrandTotal,\\r\\n\\t\\t                                    iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0) * 100.0 as ContractedProfitPercentage,\\r\\n\\t\\t                                    sum(iif((v.ContractedSellGrandTotal - v.ActualCostGrandTotal) > 0, ((v.ContractedSell - v.ActualCost) / (v.ContractedSellGrandTotal - v.ActualCostGrandTotal)), 0)) OVER (ORDER BY (v.ContractedSell - v.ActualCost) DESC) * 100.0 as ContractedProfitPercentageRunningTotal,\\r\\n\\t\\t                                    iif(v.ContractedSellGrandTotal > 0, (v.ContractedSell / v.ContractedSellGrandTotal), 0) * 100.0 as ContractedSellPercentage\\r\\n                                    from\\r\\n                                    (\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t    select\\ttg.Oid as TypologyGroupId, \\r\\n                                                tg.[Name] as TypologyGroup,\\r\\n\\t\\t                                        sum(v.ActualHours) as ActualTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER (ORDER BY tg.[Oid]) AS ActualTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHours)) OVER () AS ActualTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursCost) as ActualCost,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER (ORDER BY tg.[Oid]) AS ActualCostRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursCost)) OVER () AS ActualCostGrandTotal,\\r\\n\\t\\t                                        sum(v.ActualHoursSell) as ActualSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER (ORDER BY tg.[Oid]) AS ActualSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ActualHoursSell)) OVER () AS ActualSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHours) as ForecastTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER (ORDER BY tg.[Oid]) AS ForecastTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHours)) OVER () AS ForecastTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ForecastHoursSell) as ForecastSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER (ORDER BY tg.[Oid]) AS ForecastSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ForecastHoursSell)) OVER () AS ForecastSellGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHours) as AllocatedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER (ORDER BY tg.[Oid]) AS AllocatedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHours)) OVER () AS AllocatedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.AllocatedHoursSell) as AllocatedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER (ORDER BY tg.[Oid]) AS AllocatedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.AllocatedHoursSell)) OVER () AS AllocatedSellGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHours) as ContractedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER (ORDER BY tg.[Oid]) AS ContractedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHours)) OVER () AS ContractedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.ContractedHoursSell) as ContractedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER (ORDER BY tg.[Oid]) AS ContractedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.ContractedHoursSell)) OVER () AS ContractedSellGrandTotal,\\r\\n\\t\\t                                        max(v.ContractedHoursRate) as ContractedRate, \\r\\n\\t\\t                                        sum(v.PlannedHours) as PlannedTime,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER (ORDER BY tg.[Oid]) AS PlannedTimeRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHours)) OVER () AS PlannedTimeGrandTotal,\\r\\n\\t\\t                                        sum(v.PlannedHoursSell) as PlannedSell,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER (ORDER BY tg.[Oid]) AS PlannedSellRunningTotal,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    sum(sum(v.PlannedHoursSell)) OVER () AS PlannedSellGrandTotal,\\r\\n\\t\\t                                        max(v.PlannedHoursRate) as PlannedRate \\r\\n                                        from\\tSkillAnalyticsBurnRate v, \\r\\n\\t\\t                                        UserTypologyGroup tg,\\r\\n\\t\\t                                        Project p,\\r\\n\\t\\t                                        CommercialClient cc,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUserUsers_CompanyCompanies uucc\\r\\n                                        where\\tv.ProjectId = p.Oid and \\r\\n\\t\\t                                        p.Client = cc.Oid and\\r\\n                                    \\t        v.UserTypologyGroupId = tg.Oid and \\r\\n\\t\\t                                        v.ProjectId = p.Oid \\r\\n\\t\\t\\t\\t                                /*[DateFilter]*/ and (v.[Year] is null or v.[Month] is null or DATEFROMPARTS(v.[Year], v.[Month], 1) between @FromDate and @ToDate) /*[/DateFilter]*/\\r\\n\\t\\t                                        /*[ClientFilter]*/ and cc.Oid = @ClientId /*[/ClientFilter]*/\\r\\n\\t\\t                                        /*[ProjectFilter]*/ and v.ProjectId = @ProjectId /*[/ProjectFilter]*/\\r\\n                                                /*[ContractFilter]*/ and v.ProjectContractId = @ContractId /*[/ContractFilter]*/\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tand uucc.Users = @CurrentUserId and\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuucc.Companies = p.Company\\r\\n                                        group by tg.Oid,\\r\\n                                                tg.[Name]\\r\\n                                    ) v\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"projectId\"]}}]",
      "DashboardComponentType": {
        "Id": "1146a3e4-a230-433c-aef4-84b4b3b1a80d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/Analytics_Burn_Rate_Per_TypologyGroup/execute",
      "Configuration": "{\n    \"type\": \"doughnut\",\n    \"series\": {\n        \"argumentField\": \"TypologyGroup\",\n        \"valueField\": \"ForecastTime\",\n        \"label\": {\n            \"visible\": false,\n            \"format\": \"fixedPoint\",\n            \"connector\": {\n                \"visible\": true,\n                \"width\": 1\n            }\n        },\n        \"smallValuesGrouping\": {\n            \"mode\": \"topN\",\n            \"topCount\": 10\n        }\n    },\n    \"size\": {\n        \"height\": 200\n    },\n    \"legend\": {\n        \"horizontalAlignment\": \"left\",\n        \"verticalAlignment\": \"middle\",\n        \"itemTextPosition\": \"right\",\n        \"paddingLeftRight\": 0,\n        \"font\": {\n            \"size\": 8\n        }\n    }\n}",
      "DashboardDefinitionId": "31a58c54-3332-4b91-82e9-7335aca7ad13"
    }
  ],
  "QueryText": null,
  "UseStore": false,
  "StoreEntity": null,
  "Version": 7,
  "Default": false
}
