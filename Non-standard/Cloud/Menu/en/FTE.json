{
  "DashboardDefinitionRoles": [],
  "Id": "84f13a06-c446-4450-8586-1abd1872d684",
  "Name": "FTE",
  "Active": true,
  "Location": 0,
  "DocumentId": "00000000-0000-0000-0000-000000000000",
  "DocumentName": "",
  "DocumentTypeName": null,
  "DocumentsConfiguration": "{}",
  "Templates": [],
  "DashboardDefinitionComponents": [
    {
      "Id": "b3c31cef-6715-4aa4-8497-1402a1baef25",
      "Name": "Filters",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"form\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#f0f0f0\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":2,\"WidgetColumns\":48,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\"colCount\":\"4\",\"items\":[{\"name\":\"Year\",\"dataField\":\"Year\",\"editorType\":\"dxNumberBox\",\"editorOptions\":{\"showSpinButtons\":true,\"value\":2020,\"width\":65,\"placeholder\":\"year\",\"onContentReady\":\"function(e){ setTimeout(function() { SkillsWorkflow.setDashboardFilter('year', 2020); SkillsWorkflow.setDashboardFilter('CompanyOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('DivisionOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('DepartmentOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('TypologyGroupOid', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('UserType', '00000000-0000-0000-0000-000000000000');} , 1000) }\",\"onValueChanged\":\"function(e){ if(e.value != null) { SkillsWorkflow.setDashboardFilter('year', e.value); }  }\"},\"noDataText\":\"Please wait...\"},{\"dataField\":\"CompanyId\",\"label\":{\"text\":\"Company\"},\"editorType\":\"dxSelectBox\",\"editorOptions\":{\"width\":200,\"searchEnabled\":true,\"dataSource\":{\"load\":\"function(loadOptions){                             var searchValue = (                            loadOptions.searchValue != null ? loadOptions.searchValue : '');                             var searchTake = (loadOptions.searchValue != null && loadOptions.searchValue != '' ? 10 : 100);                             return SkillsWorkflow.executeAPI('GET', 'companies/lookup',                    null,                    {} ).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All companies'                        } );return res;                    } )                }\",\"byKey\":\"function(key) { return SW.executeAPI('GET','companies/'+key+'/lookup',null,{} ).then( result =>  { return Promise.resolve(result);} ) }\"},\"placeholder\":\"All companies\",\"displayExpr\":\"Name\",\"valueExpr\":\"Id\",\"onValueChanged\":\"function(e){                 if( e.value != null && e.value != '') {                    SkillsWorkflow.setDashboardFilter('CompanyOid', e.value);            }  else {                    SkillsWorkflow.setDashboardFilter('CompanyOid', '00000000-0000-0000-0000-000000000000');            }                 SW.setComponentByValue(e.previousValue, e.value, 'DivisionId');        }\",\"onInitialized\":\"function(e){ SW.saveComponent(e.component,'CompanyId');}\"}},{\"dataField\":\"DivisionId\",\"label\":{\"text\":\"Division\"},\"editorType\":\"dxSelectBox\",\"editorOptions\":{\"width\":200,\"searchEnabled\":true,\"dataSource\":{\"load\":\"function(loadOptions){                             let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : '');                             let skip = loadOptions.skip || 0;                             let take = loadOptions.take || 20;                             var param = { name:searchValue, skip: skip, take: take            } ;                             var companyId = SW.getValueFromComponent('CompanyId');                             if (companyId == '00000000-0000-0000-0000-000000000000') {                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',                null,                {} ).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All divisions'                    } );return res;                } )            }  else if (companyId != null) {                                 param['companyId'                ] = companyId;                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',param,                {} ).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All divisions'                    } );return res;                } )            }        }\",\"byKey\":\"function(key) { return SW.executeAPI('GET','divisions/'+key+'/lookup',null,{} ).then( result =>  { return Promise.resolve(result);} )}\"},\"placeholder\":\"All divisions\",\"onValueChanged\":\"function(e){                 if (e.value != null && e.value != '') {                    SkillsWorkflow.setDashboardFilter('DivisionOid', e.value);    }  else {                    SkillsWorkflow.setDashboardFilter('DivisionOid', '00000000-0000-0000-0000-000000000000');    }                 SW.setComponentByValue(e.previousValue, e.value, 'DepartmentId');}\",\"onInitialized\":\"function(e){ SW.saveComponent(e.component, 'DivisionId'); }\",\"displayExpr\":\"Name\",\"valueExpr\":\"Id\",\"disabled\":true}},{\"dataField\":\"DepartmentId\",\"label\":{\"text\":\"Department\"},\"editorType\":\"dxSelectBox\",\"editorOptions\":{\"width\":200,\"searchEnabled\":true,\"dataSource\":{\"load\":\"function(loadOptions){                     let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : '');                     let skip = loadOptions.skip || 0;                     let take = loadOptions.take || 20;                    var param = { name: searchValue, skip: skip, take: take    } ;                     var divisionId = SW.getValueFromComponent('DivisionId');                     var companyId = SW.getValueFromComponent('CompanyId');                     if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && companyId != null && companyId != '00000000-0000-0000-0000-000000000000') {                         param['divisionId'        ] = divisionId;                        param['companyId'        ] = companyId;    }  else if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && (companyId == null || companyId == '00000000-0000-0000-0000-000000000000')) {                        param['divisionId'        ] = divisionId;    }                      return SkillsWorkflow.executeAPI('GET', 'departments',param,    {} ).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'All departments'        } );return res;    } )}\",\"byKey\":\"function(key) { return SW.executeAPI('GET', 'departments/' + key, null, {} ).then( result =>  { return Promise.resolve(result); }  ) }\"},\"placeholder\":\"All departments\",\"onValueChanged\":\"function(e){                     if(e.value != null && e.value != '') {                        SkillsWorkflow.setDashboardFilter('DepartmentOid', e.value);}  else {                        SkillsWorkflow.setDashboardFilter('DepartmentOid', '00000000-0000-0000-0000-000000000000');}}\",\"onInitialized\":\"function(e){ SW.saveComponent(e.component, 'DepartmentId'); }\",\"displayExpr\":\"Name\",\"valueExpr\":\"Id\",\"disabled\":true}}]}",
      "DashboardDefinitionId": "84f13a06-c446-4450-8586-1abd1872d684"
    },
    {
      "Id": "4168f975-6dab-4a92-9c61-6d6ec5636850",
      "Name": "Users per Typology Group, Department and Division",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 12,
      "Order": 2,
      "Parameters": "[{\"WidgetSubTitle\":\"Staff Capacity, Contracts / Estimates & Timesheet\",\"WidgetType\":\"grid\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":7,\"WidgetRows\":20,\"WidgetColumns\":48,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"type\":\"year\",\"visible\":false},\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[{\"visible\":true,\"metricName\":\"? Delayed To Do\",\"metricFieldValue\":\"DelayedToDoJobsGrandTotal\"},{\"visible\":true,\"metricName\":\"?  Delayed Work in Progress\",\"metricFieldValue\":\"DelayedWorkInProgressJobsGrandTotal\"}]},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\tv.Company,\\n\\t\\tv.Division,\\n\\t\\tv.Department,\\n\\t\\tUserTypologyGroup as TypologyGroup,\\n\\t\\tusr.Name as [User],\\n\\t\\tusr.Oid as UserId,\\n\\t\\tusr.HasImage,\\n\\t\\tuty.Name as UserType,\\n\\t\\tsum(HeadCount) as HeadCount,\\n\\t\\tsum(Capacity) / ((datediff(day, @FromDate, @ToDate) / 365.0) * 1600) as FTE1600,\\n\\t\\tsum(Capacity) as Capacity,\\n\\t\\tsum(HolidayTime) as HolidayTime,\\n\\t\\tsum(LeaveTime) as LeaveTime,\\n\\t\\tsum(ContractedTime) as ContractedTime,\\n\\t\\tsum(ForecastTime) as ForecastTime,\\n\\t\\tsum(ActualTime) as ActualTime,\\n\\t\\tsum(BillableTime) as BillableTime,\\n\\t\\tsum(NewBusinessTime) as NewBusinessTime,\\n\\t\\tsum(AdministrativeTime) as AdministrativeTime,\\n\\t\\tsum(ActualTime - AdministrativeTime) as ClientBillableTime,\\n\\t\\tsum(BillableTime + ForecastTime) as BillableAndForecastTime,\\n\\t\\tiif(sum(Capacity) > 0, sum(ActualTime - AdministrativeTime) / sum(Capacity), 0) as CapacityClientTimeVariation,\\n        iif(sum(Capacity) > 0, sum(ContractedTime) / sum(Capacity), 0) as CapacityContractedTimeVariation,\\n\\t\\tiif(sum(Capacity) > 0, sum(BillableTime + ForecastTime) / sum(Capacity), 0) as CapacityBillableAndForecastVariation,\\n        iif(sum(ContractedTime) > 0, sum(BillableTime + ForecastTime) / sum(ContractedTime), 0) ContractedBillableAndForecastVariation\\nfrom(\\n\\t\\tselect\\tCompany,\\n\\t\\t\\t\\tDivision,\\n\\t\\t\\t\\tDepartment,\\n\\t\\t\\t\\tUserTypologyGroup,\\n\\t\\t\\t\\tOid as UserId,\\n\\t\\t\\t\\tmax(iif(IsActive = 1, 1, 0)) as HeadCount,\\n\\t\\t\\t\\tsum(du.ActualTime) as ActualTime,\\n\\t\\t\\t\\tsum(du.AdministrativeTime) as AdministrativeTime,\\n\\t\\t\\t\\tsum(du.NewBusinessTime) as NewBusinessTime,\\n\\t\\t\\t\\tsum(du.BillableTime) as BillableTime,\\n\\t\\t\\t\\tsum(du.Capacity) as Capacity,\\n\\t\\t\\t\\tsum(du.LeaveTime) as LeaveTime,\\n\\t\\t\\t\\tsum(du.HolidayTime) as HolidayTime,\\n\\t\\t\\t\\t0 as ContractedTime,\\n\\t\\t\\t\\t0 as ForecastTime\\n\\t\\tfrom \\tAnalytics.DatamartUser du\\n\\t\\twhere\\tdu.[Date] between @FromDate and @ToDate and \\n\\t\\t\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' or du.CompanyId = @CompanyOid) and\\n\\t\\t\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' or du.DivisionId = @DivisionOid) and\\n\\t\\t\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' or du.DepartmentId = @DepartmentOid) and\\n\\t\\t\\t\\t(@UserType = '00000000-0000-0000-0000-000000000000' or du.UserTypeId = @UserType)\\n\\t\\tgroup by Company, Division, Department, UserTypologyGroup, Oid\\n\\t\\tunion all\\n\\t\\tselect\\tCompany,\\n\\t\\t\\t\\tDivision,\\n\\t\\t\\t\\tde.Department,\\n\\t\\t\\t\\tde.UserTypologyGroup,\\n\\t\\t\\t\\teid.[User] as UserId,\\n\\t\\t\\t\\t0 as HeadCount,\\n\\t\\t\\t\\t0 as ActualTime,\\n\\t\\t\\t\\t0 as AdministrativeTime,\\n\\t\\t\\t\\t0 as NewBusinessTime,\\n\\t\\t\\t\\t0 as BillableTime,\\n\\t\\t\\t\\t0 as Capacity,\\n\\t\\t\\t\\t0 as LeaveTime,\\n\\t\\t\\t\\t0 as HolidayTime,\\n\\t\\t\\t\\tsum(iif(datediff(day, de.Date, de.Expiration) > 0, \\n\\t\\t\\t\\t\\t(iif(de.Date between @FromDate and @ToDate and de.Expiration between @FromDate and @ToDate, datediff(day, de.Date, de.Expiration), 0) +\\n\\t\\t\\t\\t\\tiif(de.Date between @FromDate and @ToDate and de.Expiration > @ToDate, datediff(day, de.Date, @ToDate), 0) +\\n\\t\\t\\t\\t\\tiif(de.Date < @FromDate and de.Expiration between @FromDate and @ToDate, datediff(day, @FromDate, de.Expiration), 0) + \\n\\t\\t\\t\\t\\tiif(de.Date < @FromDate and de.Expiration > @ToDate, datediff(day, @FromDate, @ToDate), 0)) *\\n\\t\\t\\t\\t\\t(de.[Hours] / datediff(day, de.Date, de.Expiration)), 0)) as ContractedTime,\\n\\t\\t\\t\\t0 as ForecastTime\\n\\t\\tfrom \\tAnalytics.DatamartEstimateResource de, EstimateItemDetail eid\\n\\t\\twhere\\teid.Oid = de.Oid and\\n\\t\\t\\t\\t(de.[Date] between @FromDate and @ToDate or \\n\\t\\t\\t\\tde.Expiration between @FromDate and @ToDate or\\n\\t\\t\\t\\tde.[Date] < @FromDate and de.Expiration > @ToDate) and\\n\\t\\t\\t\\t(@CompanyOid = '00000000-0000-0000-0000-000000000000' or de.CompanyId = @CompanyOid) and\\n\\t\\t\\t\\t(@DivisionOid = '00000000-0000-0000-0000-000000000000' or de.DivisionId = @DivisionOid) and\\n\\t\\t\\t\\t(@DepartmentOid = '00000000-0000-0000-0000-000000000000' or de.DepartmentId = @DepartmentOid)\\n\\t\\tgroup by Company, Division, de.Department, de.UserTypologyGroup, [User]\\n\\t\\tunion all\\n\\t\\tselect\\tph.Company,\\n\\t\\t\\t\\tph.Division,\\n\\t\\t\\t\\tdep.Name as Department,\\n\\t\\t\\t\\tph.UserTypologyGroup,\\n\\t\\t\\t\\tph.UserId,\\n\\t\\t\\t\\t0 as HeadCount,\\n\\t\\t\\t\\t0 as ActualTime,\\n\\t\\t\\t\\t0 as AdministrativeTime,\\n\\t\\t\\t\\t0 as NewBusinessTime,\\n\\t\\t\\t\\t0 as BillableTime,\\n\\t\\t\\t\\t0 as Capacity,\\n\\t\\t\\t\\t0 as LeaveTime,\\n\\t\\t\\t\\t0 as HolidayTime,\\n\\t\\t\\t\\t0 as ContractedTime,\\n\\t\\t\\t\\tsum(ph.[Hours]) as ForecastTime\\n\\t\\tfrom \\tAnalytics.DatamartPlannedHours ph, PlannedHoursTotal pht, Department dep\\n\\t\\twhere\\tpht.Oid = ph.Oid and\\n\\t\\t\\t\\tdep.Oid = pht.Department and\\n\\t\\t\\t\\tph.[Date] between @FromDate and @ToDate and\\n\\t\\t\\t\\t(ph.CompanyId = @CompanyOid or @CompanyOid = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t(ph.DivisionId = @DivisionOid or @DivisionOid = '00000000-0000-0000-0000-000000000000')\\n\\t\\tgroup by ph.Company, ph.Division, dep.Name, ph.UserTypologyGroup, ph.UserId\\n\\t\\t) v \\n\\t\\tleft join [User] usr on (usr.Oid = v.UserId)\\n\\t\\tleft join [UserType] uty on (uty.Oid = usr.UserType)\\ngroup by v.Company, v.Division, v.Department, UserTypologyGroup, usr.Name, usr.Oid, usr.HasImage, uty.Name\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"startDate\",\"endDate\",\"CompanyOid\",\"DivisionOid\",\"DepartmentOid\"]}}]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/FTE - Typology Groups/execute",
      "Configuration": "{\n    \"stateStoring\": {\n        \"enabled\": false\n    },\n    \"grouping\": {\n        \"autoExpandAll\": true\n    },\n    \"onRowClick\": \"function(e){ if(e.data.TypologyGroupOid != null) {        SkillsWorkflow.setDashboardFilter('TypologyGroupOid', e.data.TypologyGroupOid);                                            }              }\",\n    \"columnResizingMode\": \"widget\",\n    \"allowColumnResizing\": \"true\",\n    \"allowFiltering\": true,\n    \"columnAutoWidth\": \"true\",\n    \"searchPanel\": {\n        \"visible\": true\n    },\n    \"height\": \"590\",\n    \"scrolling\": {\n        \"mode\": \"virtual\"\n    },\n    \"selection\": {\n        \"mode\": \"single\"\n    },\n    \"columns\": [\n        {\n            \"dataField\": \"Division\",\n            \"caption\": \"Division\",\n            \"width\": 100,\n            \"groupIndex\": 0\n        },\n        {\n            \"dataField\": \"Department\",\n            \"caption\": \"Department\",\n            \"width\": 100,\n            \"groupIndex\": 1\n        },\n        {\n            \"dataField\": \"TypologyGroup\",\n            \"caption\": \"Typology\",\n            \"width\": 200\n        },\n        {\n            \"dataField\": \"UserType\",\n            \"caption\": \"User Type\",\n            \"width\": 100\n        },\n        {\n            \"dataField\": \"User\",\n            \"caption\": \"\",\n            \"width\": 20,\n            \"entity\": \"User\",\n            \"format\": {\n                \"image\": {\n                    \"mapping\": {\n                        \"id\": \"UserId\",\n                        \"name\": \"User\",\n                        \"hasImage\": \"HasImage\"\n                    },\n                    \"size\": \"small\"\n                }\n            }\n        },\n        {\n            \"dataField\": \"User\",\n            \"caption\": \"User\",\n            \"width\": 100\n        },\n        {\n            \"caption\": \"Head Count\",\n            \"alignment\": \"center\",\n            \"columns\": [\n                {\n                    \"dataField\": \"HeadCount\",\n                    \"caption\": \"# People\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\"\n                },\n                {\n                    \"dataField\": \"FTE1600\",\n                    \"caption\": \"FTE 1600\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\"\n                },\n                {\n                    \"dataField\": \"Capacity\",\n                    \"caption\": \"Capacity\",\n                    \"alignment\": \"right\",\n                    \"format\": \"###,##0.0\"\n                }\n            ]\n        },\n        {\n            \"caption\": \"Contracted\",\n            \"alignment\": \"center\",\n            \"columns\": [\n                {\n                    \"dataField\": \"ContractedTime\",\n                    \"caption\": \"Total\",\n                    \"name\": \"Contracted\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\"\n                },\n                {\n                    \"dataField\": \"CapacityContractedTimeVariation\",\n                    \"caption\": \"% Capacity\",\n                    \"name\": \"VariationCapCon\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\",\n                    \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\n                }\n            ]\n        },\n        {\n            \"caption\": \"Billable + Forecast\",\n            \"alignment\": \"center\",\n            \"columns\": [\n                {\n                    \"dataField\": \"BillableAndForecastTime\",\n                    \"caption\": \"Total\",\n                    \"name\": \"BillableAndForecast\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\"\n                },\n                {\n                    \"dataField\": \"ForecastTime\",\n                    \"caption\": \"Forecast\",\n                    \"name\": \"Forecast\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\"\n                },\n                {\n                    \"dataField\": \"ContractedBillableAndForecastVariation\",\n                    \"caption\": \"% Contracted\",\n                    \"name\": \"VariationConBilFor\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\",\n                    \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\n                },\n                {\n                    \"dataField\": \"CapacityBillableAndForecastVariation\",\n                    \"caption\": \"% Capacity\",\n                    \"name\": \"VariationCapBilFor\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\",\n                    \"cellTemplate\": \"function(e, i) { SW.setRAG(e, (i.value * 100.0).toFixed(1) + '%', i.value >= 1.2, (i.value >= 0.8 && i.value < 1.2), i.value < 0.8, true); }\"\n                }\n            ]\n        },\n        {\n            \"caption\": \"Actual\",\n            \"alignment\": \"center\",\n            \"columns\": [\n                {\n                    \"dataField\": \"ActualTime\",\n                    \"caption\": \"Total\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\"\n                },\n                {\n                    \"dataField\": \"BillableTime\",\n                    \"caption\": \"Billable\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\"\n                },\n                {\n                    \"dataField\": \"NewBusinessTime\",\n                    \"caption\": \"Non Billable\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\"\n                },\n                {\n                    \"dataField\": \"AdministrativeTime\",\n                    \"caption\": \"Administrative\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\"\n                },\n                {\n                    \"dataField\": \"ClientBillableTime\",\n                    \"caption\": \"Client\",\n                    \"alignment\": \"right\",\n                    \"format\": \"#,##0.0\"\n                }\n            ]\n        }\n    ],\n    \"sortByGroupSummaryInfo\": [\n        {\n            \"summaryItem\": \"count\"\n        }\n    ],\n    \"summary\": {\n        \"calculateCustomSummary\": \"function (options) {            if (options.name === 'ContractedVsCapacitySummary') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.ContractedTime;                        options.totalValue[1] = options.totalValue[1] + options.value.Capacity;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }             }             if (options.name === 'BillableVsPlannedVsContractedSummary') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableAndPlannedTime;                        options.totalValue[1] = options.totalValue[1] + options.value.ContractedTime;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }             }             if (options.name === 'BillableVsPlannedVsCapacitySummary') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableAndPlannedTime;                        options.totalValue[1] = options.totalValue[1] + options.value.Capacity;                        break;                    case 'finalize':                        if(Number(options.totalValue[1]) > 0)                            options.totalValue = (options.totalValue[0] / options.totalValue[1]);                        else                            options.totalValue = 0;                            break;                }             }             if (options.name === 'BillableVsForecastVsCapacitySummary') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableTime;                        options.totalValue[1] = options.totalValue[1] + options.value.ForecastTime;                        options.totalValue[2] = options.totalValue[2] + options.value.Capacity;                        break;                    case 'finalize':                        if(Number(options.totalValue[2]) > 0)                            options.totalValue = ((options.totalValue[0] + options.totalValue[1]) / options.totalValue[2]);                        else                            options.totalValue = 0;                            break;                }             }             if (options.name === 'BillableVsForecastVsContractedSummary') {                switch(options.summaryProcess) {                    case 'start':                        options.totalValue = [0,0,0];                        break;                    case 'calculate':                        options.totalValue[0] = options.totalValue[0] + options.value.BillableTime;                        options.totalValue[1] = options.totalValue[1] + options.value.ForecastTime;                        options.totalValue[2] = options.totalValue[2] + options.value.ContractedTime;                        break;                    case 'finalize':                        if(Number(options.totalValue[2]) > 0)                            options.totalValue = ((options.totalValue[0] + options.totalValue[1]) / options.totalValue[2]);                        else                            options.totalValue = 0;                            break;                }             }         }\",\n        \"totalItems\": [\n            {\n                \"column\": \"Typology Group\",\n                \"summaryType\": \"count\",\n                \"valueFormat\": \"#,##0\",\n                \"displayFormat\": \"Total: {0} \",\n                \"alignment\": \"left\"\n            },\n            {\n                \"column\": \"Capacity\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"NewBusinessTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"# People\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"FTE1600\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"ContractedTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"BillableAndForecastTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"ActualTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"BillableTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"NonBillableTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"AdministrativeTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"ClientBillableTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"column\": \"ForecastTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"alignment\": \"right\"\n            },\n            {\n                \"showInColumn\": \"CapacityContractedTimeVariation\",\n                \"displayFormat\": \"{0} \",\n                \"valueFormat\": {\n                    \"type\": \"percent\",\n                    \"precision\": 1\n                },\n                \"summaryType\": \"custom\",\n                \"alignment\": \"right\"\n            },\n            {\n                \"showInColumn\": \"CapacityBillableAndForecastVariation\",\n                \"displayFormat\": \"{0} \",\n                \"valueFormat\": {\n                    \"type\": \"percent\",\n                    \"precision\": 1\n                },\n                \"summaryType\": \"custom\",\n                \"alignment\": \"right\"\n            },\n            {\n                \"showInColumn\": \"ContractedBillableAndForecastVariation\",\n                \"displayFormat\": \"{0} \",\n                \"valueFormat\": {\n                    \"type\": \"percent\",\n                    \"precision\": 1\n                },\n                \"summaryType\": \"custom\",\n                \"alignment\": \"right\"\n            }\n        ],\n        \"groupItems\": [\n            {\n                \"column\": \"NewBusinessTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"column\": \"ActualTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"column\": \"BillableTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"column\": \"AdministrativeTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"column\": \"ClientBillableTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"column\": \"# People\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"column\": \"FTE1600\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"column\": \"Capacity\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"column\": \"Forecast\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"column\": \"ContractedTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"column\": \"BillableAndForecastTime\",\n                \"summaryType\": \"sum\",\n                \"valueFormat\": \"#,##0.0\",\n                \"displayFormat\": \"{0} \",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"name\": \"ContractedVsCapacitySummary\",\n                \"showInColumn\": \"CapacityContractedTimeVariation\",\n                \"displayFormat\": \"{0} \",\n                \"valueFormat\": {\n                    \"type\": \"percent\",\n                    \"precision\": 1\n                },\n                \"summaryType\": \"custom\",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"name\": \"BillableVsForecastVsContractedSummary\",\n                \"showInColumn\": \"ContractedBillableAndForecastVariation\",\n                \"displayFormat\": \"{0} \",\n                \"valueFormat\": {\n                    \"type\": \"percent\",\n                    \"precision\": 1\n                },\n                \"summaryType\": \"custom\",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            },\n            {\n                \"name\": \"BillableVsForecastVsCapacitySummary\",\n                \"showInColumn\": \"CapacityBillableAndForecastVariation\",\n                \"displayFormat\": \"{0} \",\n                \"valueFormat\": {\n                    \"type\": \"percent\",\n                    \"precision\": 1\n                },\n                \"summaryType\": \"custom\",\n                \"showInGroupFooter\": false,\n                \"alignByColumn\": true\n            }\n        ]\n    },\n    \"columnChooser\": {\n        \"enabled\": \"true\"\n    }\n}",
      "DashboardDefinitionId": "84f13a06-c446-4450-8586-1abd1872d684"
    },
    {
      "Id": "f4d25c84-9e26-424e-9836-d79ef883e16c",
      "Name": "Time Period",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 12,
      "Order": 1,
      "Parameters": "[{\"WidgetSubTitle\":\"Capacity (blue), Contracted Time (red) & Weeks with not Enough Capacity\",\"WidgetType\":\"rangeselector\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#e0e0e0\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":2,\"WidgetRows\":5,\"WidgetColumns\":48,\"WidgetHeader\":{\"showContextInfo\":false,\"WidgetPeriodChooser\":{\"startDate\":\"2018/06/1\",\"endDate\":\"2019/06/30\",\"type\":\"year\",\"visible\":false},\"showSubTitle\":true,\"showTitle\":true},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"select\\tt.[Date] as Day,\\n\\t\\tsum(t.WorkingTime - t.Holidays - t.Leaves) as Capacity,\\n\\t\\tsum(t.ContractedTime) as ContractedTime,\\n\\t\\tiif(sum(t.WorkingTime - t.Holidays - t.Leaves - t.ContractedTime) < 0, sum(t.WorkingTime - t.Holidays - t.Leaves), null) as NotEnoughCapacity\\nfrom    (\\n\\t\\t\\tselect\\tdu.[Date] as [Date],\\n\\t\\t\\t\\t\\tsum(du.RequiredHours) as WorkingTime,\\n\\t\\t\\t\\t\\tsum(du.HolidayTime) as Holidays,\\n\\t\\t\\t\\t\\tsum(du.LeaveTime) as Leaves,\\n\\t\\t\\t\\t\\t0 as ContractedTime\\n\\t\\t\\tfrom\\tAnalytics.DatamartUser du\\n\\t\\t\\twhere\\tdu.Year = @Year\\n\\t\\t\\tgroup by du.[Date]\\n\\t\\t\\tunion all\\n\\t\\t\\tselect\\tde.[Date],\\n\\t\\t\\t\\t\\t0 as WorkingTime,\\n\\t\\t\\t\\t\\t0 as Holidays,\\n\\t\\t\\t\\t\\t0 as Leaves,\\n\\t\\t\\t\\t\\tsum(de.[Hours] / (datediff(dd, de.[Date], de.Expiration) + 1)) as ContractedTime\\n\\t\\t\\tfrom\\tAnalytics.DatamartEstimateResource de\\n\\t\\t\\twhere\\tYear(de.Date) = @Year\\n\\t\\t\\tgroup by de.[Date]\\n) t\\ngroup by t.[Date]\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"RequiredFilters\":[\"year\"]}}]",
      "DashboardComponentType": {
        "Id": "c666ba5e-8578-4132-86a5-0f96c665000d",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/FTE - Overtime View/execute",
      "Configuration": "{\n    \"size\": {\n        \"height\": 70\n    },\n    \"containerBackgroundColor\": \"#e0e0e0\",\n    \"selectedRangeColor\": \"#f5564a\",\n    \"onDrawn\": \"function bla(e) { SW.saveComponent(e.component, 'rangeSelector'); }\",\n    \"chart\": {\n        \"commonSeriesSettings\": {\n            \"type\": \"steparea\",\n            \"argumentField\": \"Day\"\n        },\n        \"series\": [\n            {\n                \"valueField\": \"Capacity\"\n            },\n            {\n                \"valueField\": \"ContractedTime\"\n            },\n            {\n                \"valueField\": \"NotEnoughCapacity\",\n                \"type\": \"scatter\",\n                \"ignoreEmptyPoints\": true,\n                \"color\": \"#da5859\"\n            }\n        ]\n    },\n    \"scale\": {\n        \"minorTickInterval\": \"day\",\n        \"tickInterval\": \"month\",\n        \"valueType\": \"datetime\",\n        \"marker\": {\n            \"separatorHeight\": 10,\n            \"textTopIndent\": 0,\n            \"topIndent\": 0\n        }\n    },\n    \"sliderMarker\": {\n        \"format\": \"monthAndDay\",\n        \"color\": \"#da5859\"\n    },\n    \"value\": {\n        \"length\": {\n            \"years\": 1\n        }\n    }\n}",
      "DashboardDefinitionId": "84f13a06-c446-4450-8586-1abd1872d684"
    }
  ],
  "QueryText": null,
  "UseStore": false,
  "StoreEntity": null,
  "Version": 35,
  "Default": false
}
