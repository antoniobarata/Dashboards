{
  "DashboardDefinitionRoles": [],
  "Id": "e37e8b13-9eae-4324-96af-16de32a86970",
  "Name": "FTE",
  "Active": true,
  "Location": 0,
  "DocumentId": "00000000-0000-0000-0000-000000000000",
  "DocumentName": "",
  "DocumentTypeName": null,
  "DocumentsConfiguration": "{}",
  "Templates": [],
  "DashboardDefinitionComponents": [
    {
      "Id": "4500d739-f073-4af7-b3ad-201a3c50570e",
      "Name": "Grupos de Tipologia",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 8,
      "Order": 1,
      "Parameters": "[\r\n    {\r\n        \"WidgetSubTitle\": \"Equipe, Propostas & Timesheet\",\r\n        \"WidgetType\": \"grid\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"\",\r\n        \"WidgetFrameStyle\": {},\r\n        \"WidgetXPosition\": 0,\r\n        \"WidgetYPosition\": 2,\r\n        \"WidgetRows\": 17,\r\n        \"WidgetColumns\": 32,\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            },\r\n            \"WidgetMetrics\": {\r\n                \"visible\": false,\r\n                \"Metrics\": [\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"? Delayed To Do\",\r\n                        \"metricFieldValue\": \"DelayedToDoJobsGrandTotal\"\r\n                    },\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"?  Delayed Work in Progress\",\r\n                        \"metricFieldValue\": \"DelayedWorkInProgressJobsGrandTotal\"\r\n                    }\r\n                ]\r\n            },\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        },\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"querytext\",\r\n                \"value\": \"select  utg.Name as TypologyGroup,\\n        max(UserCount) as UserCount,\\n        sum(WorkingTime - Holidays - Leaves) as Capacity,\\n        sum(Holidays) as Holidays,\\n        sum(Leaves) as Leaves,\\n        sum(ContractedTime) as ContractedTime,\\n        sum(PlannedTime) as PlannedTime,\\n        sum(ActualTime) as ActualTime,\\n        sum(BillableTime) as BillableTime,\\n        sum(NewBusinessTime) as NewBusinessTime,\\n        sum(AdministrativeTime) as AdministrativeTime,\\n        sum(BillableTime + NewBusinessTime) as ClientTime,\\n        sum(WorkingTime - Holidays - Leaves - BillableTime - NewBusinessTime) as CapacityClientTimeVariation,\\n        sum(WorkingTime - Holidays - Leaves - ContractedTime) as CapacityContractedTimeVariation\\nfrom    UserTypologyGroup utg, \\n        (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        count(*) as UserCount\\n                from    [User] ssu, UserTypology typ\\n                where   typ.oid = ssu.Typology \\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup\\n        ) tuc,\\n        (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        yrd.Day as [Date],\\n                        sum(RequiredHours) as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, Yearday yrd, UserTypology typ\\n                where   datepart(dw, yrd.day) not in (1, 7) and\\n                        typ.oid = ssu.Typology\\n                        and (1 != 1 /*[DateFilter]*/ or yrd.Day >= @FromDate and yrd.Day <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup, ssu.Oid, yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        hld.Date as [Date],\\n                        0 as WorkingTime,\\n                        sum(RequiredHours) as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserTypology typ, Holiday hld\\n                where   datepart(dw, hld.Date) not in (1, 7) and\\n                        typ.oid = ssu.Typology and\\n                        ssu.Company = hld.Company \\n                        and (1 != 1 /*[DateFilter]*/ or hld.Date >= @FromDate and hld.Date <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup, ssu.Oid, hld.Date\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        uv.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        sum(RequiredHours) as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserVacation uv, UserTypology typ\\n                where   datepart(dw, uv.Day) not in (1, 7) and\\n                        uv.[User] = ssu.Oid and\\n                        typ.oid = ssu.Typology\\n                        and (1 != 1 /*[DateFilter]*/ or uv.Day >= @FromDate and uv.Day <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup, ssu.Oid, uv.Day\\n                union all\\n                select  TypologyGroupOid,\\n                        UserOid,\\n                        [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        sum(ContractedTime) as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    (\\n                            select  edt.UserTypologyGroup as TypologyGroupOid,\\n                                    edt.[User] as UserOid,\\n                                    yrd.Day as [Date],\\n                                    sum(edt.Hours / (datediff(dd, est.[Date], est.Expiration) + 1)) as ContractedTime\\n                            from    Estimate est, EstimateItem eit, EstimateItemDetail edt, YearDay yrd\\n                            where   eit.Estimate = est.Oid and\\n                                    edt.EstimateItem = eit.Oid and\\n                                    yrd.Day between cast(est.[Date] as date) and cast(est.Expiration as date) and\\n                                    edt.Type = 2\\n                                    and (1 != 1 /*[DateFilter]*/ or yrd.Day >= @FromDate and yrd.Day <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or est.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or est.Project in (@ProjectOid))\\n                            group by  est.Oid, edt.UserTypologyGroup, edt.[User], yrd.Day\\n                        ) t\\n                group by TypologyGroupOid, UserOid, [Date]\\n                union all\\n                select  pht.UserTypologyGroup as TypologyGroupOid,\\n                        pht.[User] as UserOid,\\n                        yrd.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        sum((pht.PlannedMinutes / 60) / (datediff(dd, prj.BeginDate, prj.EndDate + 1))) as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    PlannedHoursTotal pht, Project prj, YearDay yrd\\n                where   prj.Oid = pht.Project and\\n                        yrd.Day between cast(prj.BeginDate as date) and cast(prj.EndDate as date)\\n                        and (1 != 1 /*[DateFilter]*/ or yrd.Day >= @FromDate and yrd.Day <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (prj.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (prj.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (pht.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or prj.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or prj.Oid in (@ProjectOid))\\n                group by pht.UserTypologyGroup, pht.[User], yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        sum(DurationHours + DurationMinutes / 60) as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid  \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn >= @FromDate and tim.CreatedOn <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or tim.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or tim.Project in (@ProjectOid))\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        sum(DurationHours + DurationMinutes / 60) as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is not null and\\n                        (tim.Billable = 1 or tim.Billable is null) \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn >= @FromDate and tim.CreatedOn <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or tim.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or tim.Project in (@ProjectOid))\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        sum(DurationHours + DurationMinutes / 60) as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is not null and\\n                        not (tim.Billable = 1 or tim.Billable is null)  \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn >= @FromDate and tim.CreatedOn <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or tim.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or tim.Project in (@ProjectOid))\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as PlannedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        sum(DurationHours + DurationMinutes / 60) as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is null \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn >= @FromDate and tim.CreatedOn <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or tim.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or tim.Project in (@ProjectOid))\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n        ) t\\nwhere   utg.Oid = t.TypologyGroupOid and\\n        tuc.TypologyGroupOid = utg.Oid \\ngroup by utg.Name\",\r\n                \"mapping\": \"\"\r\n            }\r\n        },\r\n        \"Filters\": {},\r\n        \"QueryConfiguration\": {\r\n            \"RequiredFilters\": [\r\n                \"startDate\",\r\n                \"endDate\",\r\n                \"Company\",\r\n                \"Division\",\r\n                \"Department\",\r\n                \"ClientOid\",\r\n                \"ProjectOid\"\r\n            ]\r\n        }\r\n    }\r\n]",
      "DashboardComponentType": {
        "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/FTE - Typology Groups/execute",
      "Configuration": "{\r\n    \"headerFilter\": {\r\n        \"visible\": true\r\n    },\r\n    \"columnResizingMode\": \"widget\",\r\n    \"allowColumnResizing\": \"true\",\r\n    \"allowFiltering\": true,\r\n    \"columnAutoWidth\": \"true\",\r\n    \"searchPanel\": {\r\n        \"visible\": true\r\n    },\r\n    \"height\": \"370\",\r\n    \"scrolling\": {\r\n        \"mode\": \"virtual\"\r\n    },\r\n    \"columnMinWidth\": \"80\",\r\n    \"columns\": [\r\n        {\r\n            \"dataField\": \"TypologyGroup\",\r\n            \"name\": \"Typology Group\",\r\n            \"caption\": \"Tipologia\",\r\n            \"width\": 300\r\n        },\r\n        {\r\n            \"caption\": \"Staff\",\r\n            \"columns\": [\r\n                {\r\n                    \"dataField\": \"UserCount\",\r\n                    \"caption\": \"# Usuário\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\",\r\n                    \"cssClass\": \"dataCell actualHours\"\r\n                },\r\n                {\r\n                    \"dataField\": \"Capacity\",\r\n                    \"caption\": \"Capacidade\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"caption\": \"Propostas & Projetos\",\r\n            \"columns\": [\r\n                {\r\n                    \"dataField\": \"CapacityContractedTimeVariation\",\r\n                    \"caption\": \"Variação\",\r\n                    \"name\": \"Variation\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                },\r\n                {\r\n                    \"dataField\": \"ContractedTime\",\r\n                    \"caption\": \"Contratadas\",\r\n                    \"name\": \"Contracted\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                },\r\n                {\r\n                    \"dataField\": \"PlannedTime\",\r\n                    \"caption\": \"Planejadas\",\r\n                    \"name\": \"Planned\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"caption\": \"Timesheet\",\r\n            \"columns\": [\r\n                {\r\n                    \"dataField\": \"ActualTime\",\r\n                    \"caption\": \"Real\",\r\n                    \"name\": \"Actual\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                },\r\n                {\r\n                    \"dataField\": \"BillableTime\",\r\n                    \"caption\": \"Faturadas\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                },\r\n                {\r\n                    \"dataField\": \"NewBusinessTime\",\r\n                    \"caption\": \"Novos Negócios\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                },\r\n                {\r\n                    \"dataField\": \"AdministrativeTime\",\r\n                    \"caption\": \"Administrativo\",\r\n                    \"alignment\": \"right\",\r\n                    \"format\": \"#,##0\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"sortByGroupSummaryInfo\": [\r\n        {\r\n            \"summaryItem\": \"count\"\r\n        }\r\n    ],\r\n    \"summary\": {\r\n        \"totalItems\": [\r\n            {\r\n                \"column\": \"Typology Group\",\r\n                \"summaryType\": \"count\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"Total: {0}\",\r\n                \"alignment\": \"left\"\r\n            },\r\n            {\r\n                \"column\": \"Capacity\",\r\n                \"summaryType\": \"sum\",\r\n                \"valueFormat\": \"#,##0\",\r\n                \"displayFormat\": \"{0}\",\r\n                \"alignment\": \"right\"\r\n            }\r\n        ]\r\n    }\r\n}",
      "DashboardDefinitionId": "e37e8b13-9eae-4324-96af-16de32a86970"
    },
    {
      "Id": "1e7ab77a-fd2a-4a85-8778-c3d861313036",
      "Name": "Visão Geral",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 4,
      "Order": 2,
      "Parameters": "[\r\n    {\r\n        \"WidgetSubTitle\": \"Timesheet & Capacidade\",\r\n        \"WidgetType\": \"chart\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"\",\r\n        \"WidgetFrameStyle\": {},\r\n        \"WidgetXPosition\": 32,\r\n        \"WidgetYPosition\": 2,\r\n        \"WidgetRows\": 17,\r\n        \"WidgetColumns\": 16,\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            },\r\n            \"WidgetMetrics\": {\r\n                \"visible\": false,\r\n                \"Metrics\": [\r\n                    {\r\n                        \"visible\": true,\r\n                        \"metricName\": \"Total\",\r\n                        \"metricFieldValue\": \"PendingGrandTotal\"\r\n                    }\r\n                ]\r\n            },\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        },\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"querytext\",\r\n                \"value\": \"select  top 20\\n        utg.Name as TypologyGroup,\\n        max(UserCount) as UserCount,\\n        sum(WorkingTime - Holidays - Leaves) as Capacity,\\n        sum(Holidays) as Holidays,\\n        sum(Leaves) as Leaves,\\n        sum(ContractedTime) as ContractedTime,\\n        sum(ActualTime) as ActualTime,\\n        sum(BillableTime) as BillableTime,\\n        sum(NewBusinessTime) as NewBusinessTime,\\n        sum(AdministrativeTime) as AdministrativeTime,\\n        sum(BillableTime + NewBusinessTime) as ClientTime,\\n        sum(WorkingTime - Holidays - Leaves - BillableTime - NewBusinessTime) as CapacityClientTimeVariation,\\n        sum(WorkingTime - Holidays - Leaves - ContractedTime) as CapacityContractedTimeVariation\\nfrom    UserTypologyGroup utg, \\n        (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        count(*) as UserCount\\n                from    [User] ssu, UserTypology typ\\n                where   typ.oid = ssu.Typology \\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup\\n        ) tuc,\\n        (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        yrd.Day as [Date],\\n                        sum(RequiredHours) as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, Yearday yrd, UserTypology typ\\n                where   datepart(dw, yrd.day) not in (1, 7) and\\n                        typ.oid = ssu.Typology\\n                        and (1 != 1 /*[DateFilter]*/ or yrd.Day >= @FromDate and yrd.Day <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup, ssu.Oid, yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        hld.Date as [Date],\\n                        0 as WorkingTime,\\n                        sum(RequiredHours) as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserTypology typ, Holiday hld\\n                where   datepart(dw, hld.Date) not in (1, 7) and\\n                        typ.oid = ssu.Typology and\\n                        ssu.Company = hld.Company \\n                        and (1 != 1 /*[DateFilter]*/ or hld.Date >= @FromDate and hld.Date <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup, ssu.Oid, hld.Date\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        uv.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        sum(RequiredHours) as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserVacation uv, UserTypology typ\\n                where   datepart(dw, uv.Day) not in (1, 7) and\\n                        uv.[User] = ssu.Oid and\\n                        typ.oid = ssu.Typology\\n                        and (1 != 1 /*[DateFilter]*/ or uv.Day >= @FromDate and uv.Day <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup, ssu.Oid, uv.Day\\n                union all\\n                select  TypologyGroupOid,\\n                        UserOid,\\n                        [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        sum(ContractedTime) as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    (\\n                            select  edt.UserTypologyGroup as TypologyGroupOid,\\n                                    edt.[User] as UserOid,\\n                                    yrd.Day as [Date],\\n                                    sum(edt.Hours / (datediff(dd, est.[Date], est.Expiration) + 1)) as ContractedTime\\n                            from    Estimate est, EstimateItem eit, EstimateItemDetail edt, YearDay yrd\\n                            where   eit.Estimate = est.Oid and\\n                                    edt.EstimateItem = eit.Oid and\\n                                    yrd.Day between cast(est.[Date] as date) and cast(est.Expiration as date) and\\n                                    edt.Type = 2\\n                                    and (1 != 1 /*[DateFilter]*/ or yrd.Day >= @FromDate and yrd.Day <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or est.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or est.Project in (@ProjectOid))\\n                            group by  est.Oid, edt.UserTypologyGroup, edt.[User], yrd.Day\\n                        ) t\\n                group by TypologyGroupOid, UserOid, [Date]\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        sum(DurationHours + DurationMinutes / 60) as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid  \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn >= @FromDate and tim.CreatedOn <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or tim.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or tim.Project in (@ProjectOid))\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        sum(DurationHours + DurationMinutes / 60) as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is not null and\\n                        (tim.Billable = 1 or tim.Billable is null) \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn >= @FromDate and tim.CreatedOn <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or tim.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or tim.Project in (@ProjectOid))\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        sum(DurationHours + DurationMinutes / 60) as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is not null and\\n                        not (tim.Billable = 1 or tim.Billable is null)  \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn >= @FromDate and tim.CreatedOn <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or tim.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or tim.Project in (@ProjectOid))\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        cast(tim.CreatedOn as date) as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        sum(DurationHours + DurationMinutes / 60) as AdministrativeTime\\n                from    Timesheet tim, [User] ssu, UserTypology typ\\n                where   typ.Oid = ssu.Typology and\\n                        tim.CreatedBy = ssu.Oid and\\n                        tim.Client is null \\n                        and (1 != 1 /*[DateFilter]*/ or tim.CreatedOn >= @FromDate and tim.CreatedOn <= @ToDate /*[/DateFilter]*/)\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or tim.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or tim.Project in (@ProjectOid))\\n                group by typ.UserTypologyGroup, ssu.Oid, cast(tim.CreatedOn as date)\\n        ) t\\nwhere   utg.Oid = t.TypologyGroupOid and\\n        tuc.TypologyGroupOid = utg.Oid \\ngroup by utg.Name\",\r\n                \"mapping\": \"\"\r\n            }\r\n        },\r\n        \"Filters\": {},\r\n        \"QueryConfiguration\": {\r\n            \"RequiredFilters\": [\r\n                \"startDate\",\r\n                \"endDate\",\r\n                \"Company\",\r\n                \"Division\",\r\n                \"Department\",\r\n                \"ClientOid\",\r\n                \"ProjectOid\"\r\n            ]\r\n        }\r\n    }\r\n]",
      "DashboardComponentType": {
        "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/FTE - Timesheet Capacity/execute",
      "Configuration": "{\n  \"size\": {\n    \"height\": 370\n  },\n  \"commonSeriesSettings\": {\n    \"argumentField\": \"TypologyGroup\"\n  },\n  \"panes\": [{\n                \"name\": \"Timesheet\"\n            }, {\n                \"name\": \"Capacity\"\n            }],\n  \"series\": [\n    {\n      \"pane\":\"Timesheet\",\n\n      \"type\": \"bar\",\n      \"valueField\": \"ActualTime\",\n      \"name\": \"Timesheet\"\n    },\n    {\n      \"pane\":\"Timesheet\",\n      \"type\": \"stagger\",\n      \"valueField\": \"BillableTime\",\n      \"name\": \"Faturadas\",\n      \"point\":{\"size\":6 }\n    },\n    {\n      \"pane\":\"Timesheet\",\n      \"type\": \"stagger\",\n      \"valueField\": \"NewBusinessTime\",\n      \"name\": \"Novos Negócios\",\n      \"point\":{\"size\":6 }\n    },\n    {\n      \"pane\":\"Capacity\",\n      \"type\": \"bar\",\n      \"valueField\": \"Capacity\",\n      \"name\": \"Capacidade\"\n    },\n    {\n      \"pane\":\"Capacity\",\n      \"type\": \"line\",\n      \"valueField\": \"ContractedTime\",\n      \"name\": \"Contratadas\",\n      \"point\":{\"size\":6 }\n    },\n    {\n      \"pane\":\"Capacity\",\n      \"type\": \"stagger\",\n      \"valueField\": \"AdministrativeTime\",\n      \"name\": \"Administrativo\",\n      \"point\":{\"size\":6 }\n    }\n  ],\n  \"legend\": {\n    \"rowCount\":1,\n    \"verticalAlignment\": \"bottom\",\n    \"horizontalAlignment\": \"center\"\n  }\n}",
      "DashboardDefinitionId": "e37e8b13-9eae-4324-96af-16de32a86970"
    },
    {
      "Id": "914a84b3-69ba-439f-b2ba-cbd3ea9768d9",
      "Name": "Cliente, Projecto e User",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"tag\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#e0e0e0\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":37,\"WidgetYPosition\":0,\"WidgetRows\":2,\"WidgetColumns\":11,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"\\t\\t\\twith t as\\r\\n(\\r\\n    select  d.Client,\\r\\n            d.Project,\\r\\n            d.Oid\\r\\n    from    Deliverable d,\\r\\n            [WorkflowState] ws, \\r\\n            [WorkflowStateType] wst\\r\\n    where \\tws.[Oid] = d.[WorkflowState] and\\r\\n            wst.[Oid] = ws.[WorkflowStateType] and\\r\\n            wst.[Status] = 4 and\\r\\n            cast(d.AgreedDate as date) <= cast(GetDate() as date) and\\r\\n            ((d.[Company]  = @Company or @Company = '00000000-0000-0000-0000-000000000000')) and\\r\\n            ((d.[Division] = @Division or @Division = '00000000-0000-0000-0000-000000000000')) and\\r\\n            ((d.[Department] = @Department or @Department = '00000000-0000-0000-0000-000000000000'))\\r\\n)\\r\\nselect  distinct\\r\\n        'Client' as GroupName, \\r\\n        'ClientOid' as GroupId, \\r\\n        c.NameAndExternalId as Name, \\r\\n        c.Oid as Oid\\r\\nfrom    CommercialClient c, t\\r\\nwhere   c.Oid = t.Client\\r\\nunion all\\r\\nselect  distinct \\r\\n        'Project' as GroupName, \\r\\n        'ProjectOid' as GroupId, \\r\\n        p.NameAndExternalId,\\r\\n\\t\\tp.Oid\\r\\nfrom    Project p, t\\r\\nwhere   p.Oid = t.Project\",\"mapping\":{\"groupExpr\":\"GroupName\",\"groupId\":\"GroupId\",\"displayExpr\":\"Name\",\"valueExpr\":\"Oid\"}}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[\"Company\",\"Division\",\"Department\"]}}]",
      "DashboardComponentType": {
        "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\r\n    \"align\": \"right\",\r\n    \"width\": \"250\",\r\n    \"placeholder\": \"Pesquisa por cliente e projecto\"\r\n}",
      "DashboardDefinitionId": "e37e8b13-9eae-4324-96af-16de32a86970"
    },
    {
      "Id": "7517126c-a7c8-414a-b940-f6eabd808074",
      "Name": "",
      "Active": true,
      "UseQuery": false,
      "Query": "",
      "Size": 12,
      "Order": 0,
      "Parameters": "[{\"WidgetSubTitle\":\"\",\"WidgetType\":\"form\",\"WidgetFilterField\":\"\",\"WidgetColor\":\"#e0e0e0\",\"WidgetFrameStyle\":{},\"WidgetXPosition\":0,\"WidgetYPosition\":0,\"WidgetRows\":2,\"WidgetColumns\":37,\"WidgetHeader\":{\"showTitle\":false,\"showSubTitle\":false,\"WidgetMetrics\":{\"visible\":false,\"Metrics\":[]},\"WidgetPeriodChooser\":{\"visible\":false,\"type\":\"\",\"startDate\":null,\"endDate\":null}},\"WidgetDataSources\":{\"main\":{\"type\":\"querytext\",\"value\":\"\",\"mapping\":\"\"}},\"Filters\":{},\"QueryConfiguration\":{\"PreviousPeriod\":{\"Show\":false,\"KeyFieldName\":\"\",\"Type\":0},\"RequiredFilters\":[]}}]",
      "DashboardComponentType": {
        "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "",
      "Configuration": "{\r\n    \"colCount\": \"4\",\r\n    \"items\": [\r\n        {\r\n            \"label\": {\r\n                \"text\": \"Ano\"\r\n            },\r\n            \"dataField\": \"Year\",\r\n            \"editorType\": \"dxNumberBox\",\r\n            \"editorOptions\": {\r\n                \"showSpinButtons\": true,\r\n                \"value\": 2020,\r\n                \"width\": 65,\r\n                \"placeholder\": \"ano\",\r\n                \"onContentReady\": \"function(e){ setTimeout(function() { SkillsWorkflow.setDashboardFilter('year', 2020); SkillsWorkflow.setDashboardFilter('Company', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('Division', '00000000-0000-0000-0000-000000000000'); SkillsWorkflow.setDashboardFilter('Department', '00000000-0000-0000-0000-000000000000');}, 1000) }\",\r\n                \"onValueChanged\": \"function(e){ if(e.value != null) { SkillsWorkflow.setDashboardFilter('year', e.value); } }\"\r\n            },\r\n            \"noDataText\": \"Please wait...\"\r\n        },\r\n        {\r\n            \"dataField\": \"CompanyId\",\r\n            \"label\": {\r\n                \"text\": \"Companhia\"\r\n            },\r\n            \"editorType\": \"dxSelectBox\",\r\n            \"editorOptions\": {\r\n                \"width\": 200,\r\n                \"searchEnabled\": true,\r\n                \"dataSource\": {\r\n                    \"load\": \"function(loadOptions){                             var searchValue = (                            loadOptions.searchValue != null ? loadOptions.searchValue : '');                             var searchTake = (loadOptions.searchValue != null && loadOptions.searchValue != '' ? 10 : 100);                             return SkillsWorkflow.getMyCompanies('',                    0,                    0).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'Todas as Companhias'                        });return res;                    });                }\",\r\n                    \"byKey\": \"function(key) { return SW.executeAPI('GET','companies/'+key+'/lookup',null,{}).then( result =>  { return Promise.resolve(result);}) }\"\r\n                },\r\n                \"placeholder\": \"Todas as Companhias\",\r\n                \"displayExpr\": \"Name\",\r\n                \"valueExpr\": \"Id\",\r\n                \"onValueChanged\": \"function(e){                 if( e.value != null && e.value != '' ) {                    SkillsWorkflow.setDashboardFilter('Company', e.value);            } else {                    SkillsWorkflow.setDashboardFilter('Company', '00000000-0000-0000-0000-000000000000');            }                SW.setComponentByValue(e.previousValue, e.value, 'DivisionId');        }\",\r\n                \"onInitialized\": \"function(e){ SW.saveComponent(e.component,'CompanyId');}\"\r\n            }\r\n        },\r\n        {\r\n            \"dataField\": \"DivisionId\",\r\n            \"label\": {\r\n                \"text\": \"Divisão\"\r\n            },\r\n            \"editorType\": \"dxSelectBox\",\r\n            \"editorOptions\": {\r\n                \"width\": 200,\r\n                \"searchEnabled\": true,\r\n                \"dataSource\": {\r\n                    \"load\": \"function(loadOptions){                             let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : '');                             let skip = loadOptions.skip || 0;                             let take = loadOptions.take || 20;                             var param = { name:searchValue, skip: skip, take: take            };                             var companyId = SW.getValueFromComponent('CompanyId');                             if (companyId == '00000000-0000-0000-0000-000000000000') {                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',                null,                {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'Todas as Divisões', CompanyName:''                    });return res;                });            } else if (companyId != null) {                                 param['companyId'                ] = companyId;                                return SkillsWorkflow.executeAPI('GET', 'divisions/lookup',param,                {}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'Todas as Divisões', CompanyName:''                    });return res;                })            }        }\",\r\n                    \"byKey\": \"function(key) { return SW.executeAPI('GET','divisions/'+key+'/lookup',null,{}).then( result =>  { return Promise.resolve(result);})}\"\r\n                },\r\n                \"placeholder\": \"Todas as Divisões\",\r\n                \"onValueChanged\": \"function(e){                 if (e.value != null && e.value != '') {                    SkillsWorkflow.setDashboardFilter('Division', e.value);    } else {                    SkillsWorkflow.setDashboardFilter('Division', '00000000-0000-0000-0000-000000000000');    }                SW.setComponentByValue(e.previousValue, e.value, 'DepartmentId');}\",\r\n                \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'DivisionId'); }\",\r\n                \"itemTemplate\": \"function (data, index, e) {            SW.setAttribute(e, '', 'class', 'ellipsis');            SW.setAttribute(e, data.Name, 'style', 'font-weight: bold');            SW.setAttribute(e, '', 'class', 'ellipsis');            SW.setAttribute(e, data.CompanyName, 'style', 'max-width: 47%; float: left');}\",\r\n                \"displayExpr\": \"function (data) {      if(!data) return 'Todas as Divisões';     if( data.CompanyName && data.CompanyName != '' ) {        return data.CompanyName + ' - ' + data.Name;}    return data.Name;}\",\r\n                \"valueExpr\": \"Id\",\r\n                \"disabled\": true\r\n            }\r\n        },\r\n        {\r\n            \"dataField\": \"DepartmentId\",\r\n            \"label\": {\r\n                \"text\": \"Departamento\"\r\n            },\r\n            \"editorType\": \"dxSelectBox\",\r\n            \"editorOptions\": {\r\n                \"width\": 200,\r\n                \"searchEnabled\": true,\r\n                \"dataSource\": {\r\n                    \"load\": \"function(loadOptions){                     let searchValue = (loadOptions.searchValue != null ? loadOptions.searchValue : '');                     let skip = loadOptions.skip || 0;                     let take = loadOptions.take || 20;                    var param = { name: searchValue, skip: skip, take: take};                     var divisionId = SW.getValueFromComponent('DivisionId');                     var companyId = SW.getValueFromComponent('CompanyId');                     if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && companyId != null && companyId != '00000000-0000-0000-0000-000000000000') {                         param['divisionId'] = divisionId;                        param['companyId'] = companyId;} else if (divisionId != null && divisionId != '00000000-0000-0000-0000-000000000000' && (companyId == null || companyId == '00000000-0000-0000-0000-000000000000')) {                        param['divisionId'] = divisionId;}                    return SkillsWorkflow.executeAPI('GET', 'departments',param,{}).then(function(res){ res.push({Id: '00000000-0000-0000-0000-000000000000', Name:'Todos os Departamentos', CompanyName: '', DivisionName: ''});return res;})}\",\r\n                    \"byKey\": \"function(key) { return SW.executeAPI('GET', 'departments/' + key, null, {}).then( result =>  { return Promise.resolve(result); } ) }\"\r\n                },\r\n                \"placeholder\": \"Todos os Departamentos\",\r\n                \"onValueChanged\": \"function(e){                     if(e.value != null && e.value != '') {                        SkillsWorkflow.setDashboardFilter('Department', e.value);} else {                        SkillsWorkflow.setDashboardFilter('Department', '00000000-0000-0000-0000-000000000000');}}\",\r\n                \"onInitialized\": \"function(e){ SW.saveComponent(e.component, 'DepartmentId'); }\",\r\n                \"onOpened\": \"function (e) {  e.component._popup.option('width', 350); }\",\r\n                \"itemTemplate\": \"function (data, index, e) {                                    SW.setAttribute(e, '', 'class', 'ellipsis');            SW.setAttribute(e, data.Name, 'style', 'font-weight: bold');            SW.setAttribute(e, '', 'class', 'ellipsis');            SW.setAttribute(e, data.CompanyName, 'style', 'max-width: 47%; float: left');            SW.setAttribute(e, '-', 'style', 'margin: 0px 3px; float: left');            SW.setAttribute(e, '', 'class', 'ellipsis');            SW.setAttribute(e, data.DivisionName, 'style', 'max-width: 47%; float: left');}\",\r\n                \"displayExpr\": \"function (data) {    if(!data) return 'Todos os Departamentos';      if( data.CompanyName != '' && data.DivisionName != '' )        return data.CompanyName + ' - ' + data.DivisionName + ' - ' + data.Name;    else if( data.CompanyName != '' )        return data.CompanyName + ' - - ' + data.Name;    else if( data.DivisionName != '' )        return data.DivisionName + ' - ' + data.Name;    return data.Name;}\",\r\n                \"valueExpr\": \"Id\",\r\n                \"disabled\": true\r\n            }\r\n        }\r\n    ]\r\n}",
      "DashboardDefinitionId": "e37e8b13-9eae-4324-96af-16de32a86970"
    },
    {
      "Id": "0390c857-92d2-4523-b012-f6f7675668e3",
      "Name": "Visualização de todo o período",
      "Active": true,
      "UseQuery": false,
      "Query": null,
      "Size": 12,
      "Order": 3,
      "Parameters": "[\r\n    {\r\n        \"WidgetSubTitle\": \"Capacidade, Horas Contratadas & Semanas sem Capacidade o Suficiente\",\r\n        \"WidgetType\": \"rangeselector\",\r\n        \"WidgetFilterField\": \"\",\r\n        \"WidgetColor\": \"#e0e0e0\",\r\n        \"WidgetFrameStyle\": {},\r\n        \"WidgetXPosition\": 0,\r\n        \"WidgetYPosition\": 19,\r\n        \"WidgetRows\": 11,\r\n        \"WidgetColumns\": 48,\r\n        \"WidgetHeader\": {\r\n            \"showContextInfo\": false,\r\n            \"WidgetPeriodChooser\": {\r\n                \"startDate\": \"2018/06/1\",\r\n                \"endDate\": \"2019/06/30\",\r\n                \"type\": \"year\",\r\n                \"visible\": false\r\n            },\r\n            \"showSubTitle\": true,\r\n            \"showTitle\": true\r\n        },\r\n        \"WidgetDataSources\": {\r\n            \"main\": {\r\n                \"type\": \"querytext\",\r\n                \"value\": \"select  [Date] - datepart(dw, [Date]) + 1 as Week,\\n        sum(WorkingTime - Holidays - Leaves) as Capacity,\\n        sum(ContractedTime) as ContractedTime,\\n        iif(sum(WorkingTime - Holidays - Leaves - ContractedTime) < 0, sum(WorkingTime - Holidays - Leaves), null) as NotEnoughCapacity\\nfrom    (\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        yrd.Day as [Date],\\n                        sum(RequiredHours) as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, Yearday yrd, UserTypology typ\\n                where   datepart(dw, yrd.day) not in (1, 7) and\\n                        typ.oid = ssu.Typology\\n                        and yrd.day >= @FromDate and yrd.day <= @ToDate\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup, ssu.Oid, yrd.Day\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        hld.Date as [Date],\\n                        0 as WorkingTime,\\n                        sum(RequiredHours) as Holidays,\\n                        0 as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserTypology typ, Holiday hld\\n                where   datepart(dw, hld.Date) not in (1, 7) and\\n                        typ.oid = ssu.Typology and\\n                        ssu.Company = hld.Company \\n                        and hld.Date >= @FromDate and hld.Date <= @ToDate\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup, ssu.Oid, hld.Date\\n                union all\\n                select  typ.UserTypologyGroup as TypologyGroupOid,\\n                        ssu.Oid as UserOid,\\n                        uv.Day as [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        sum(RequiredHours) as Leaves,\\n                        0 as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    [User] ssu, UserVacation uv, UserTypology typ\\n                where   datepart(dw, uv.Day) not in (1, 7) and\\n                        uv.[User] = ssu.Oid and\\n                        typ.oid = ssu.Typology\\n                        and uv.Day >= @FromDate and uv.Day <= @ToDate\\n\\t\\t\\t\\t\\t\\tand (ssu.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\tand (ssu.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000')\\n                group by typ.UserTypologyGroup, ssu.Oid, uv.Day\\n                union all\\n                select  TypologyGroupOid,\\n                        UserOid,\\n                        [Date],\\n                        0 as WorkingTime,\\n                        0 as Holidays,\\n                        0 as Leaves,\\n                        sum(ContractedTime) as ContractedTime,\\n                        0 as ActualTime,\\n                        0 as BillableTime,\\n                        0 as NewBusinessTime,\\n                        0 as AdministrativeTime\\n                from    (\\n                            select  edt.UserTypologyGroup as TypologyGroupOid,\\n                                    edt.[User] as UserOid,\\n                                    yrd.Day as [Date],\\n                                    sum(edt.Hours / (datediff(dd, est.[Date], est.Expiration) + 1)) as ContractedTime\\n                            from    Estimate est, EstimateItem eit, EstimateItemDetail edt, YearDay yrd\\n                            where   eit.Estimate = est.Oid and\\n                                    edt.EstimateItem = eit.Oid and\\n                                    yrd.Day between cast(est.[Date] as date) and cast(est.Expiration as date) and\\n                                    edt.Type = 2\\n                                    and [Date] >= @FromDate and [Date] <= @ToDate\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Company = @Company or @Company = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Division = @Division or @Division = '00000000-0000-0000-0000-000000000000')\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand (est.Department = @Department or @Department = '00000000-0000-0000-0000-000000000000') and\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ClientOid) or est.Client in (@ClientOid)) and\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t('00000000-0000-0000-0000-000000000000' in (@ProjectOid) or est.Project in (@ProjectOid))\\n                            group by  est.Oid, edt.UserTypologyGroup, edt.[User], yrd.Day\\n                        ) t\\n                group by TypologyGroupOid, UserOid, [Date]\\n        ) t\\nwhere   Year([Date]) = @year\\ngroup by [Date] - datepart(dw, [Date]) + 1\",\r\n                \"mapping\": \"\"\r\n            }\r\n        },\r\n        \"Filters\": {},\r\n        \"QueryConfiguration\": {\r\n            \"RequiredFilters\": [\r\n                \"year\",\r\n                \"Company\",\r\n                \"Division\",\r\n                \"Department\",\r\n                \"ClientOid\",\r\n                \"ProjectOid\"\r\n            ]\r\n        }\r\n    }\r\n]",
      "DashboardComponentType": {
        "Id": "7831bc23-b74a-48b2-95a7-130d290fd43b",
        "Name": "Generic Dashboard",
        "ComponentTypeNumber": 42
      },
      "AnalyticsApiUrl": "globalQuery/FTE - Overtime View/execute",
      "Configuration": "{\n  \"containerBackgroundColor\":\"#e0e0e0\",\n  \"selectedRangeColor\": \"#f5564a\",\n  \"chart\": {\n    \"commonSeriesSettings\": {\n      \"type\": \"steparea\",\n      \"argumentField\": \"Week\"\n    },\n    \"series\": [\n      {\n        \"valueField\": \"Capacity\"\n},\n        {\n         \"valueField\": \"ContractedTime\"\n      },\n      {\n         \"valueField\": \"NotEnoughCapacity\",\n         \"type\":\"scatter\",\n         \"ignoreEmptyPoints\":true,\n        \"color\": \"#da5859\"\n      }\n    ]\n  },\n  \"scale\": {\n    \"minorTickInterval\": \"week\",\n    \"tickInterval\": \"month\",\n    \"valueType\": \"datetime\"\n  },\n  \"sliderMarker\": {\n    \"format\": \"monthAndDay\",\n    \"color\": \"#da5859\"\n  }\n}",
      "DashboardDefinitionId": "e37e8b13-9eae-4324-96af-16de32a86970"
    }
  ],
  "QueryText": null,
  "UseStore": false,
  "StoreEntity": null,
  "Version": 1,
  "Default": false
}
